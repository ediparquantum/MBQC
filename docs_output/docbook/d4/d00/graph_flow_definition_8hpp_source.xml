<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_graph_flow_definition_8hpp_source" xml:lang="en-US">
<title>graphFlowDefinition.hpp</title>
<indexterm><primary>src/graphs/graphFlowDefinition.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_graph_flow_definition_8hpp_source_1l00001"/>00001 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;Filename&#32;&#32;:&#32;graphFlowDefinition.hpp</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;Author&#32;&#32;&#32;&#32;:&#32;Jonathan&#32;Miller</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;Date&#32;&#32;&#32;&#32;&#32;&#32;:&#32;2023-06-19</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00005"/>00005 <emphasis role="comment">//&#32;Aim&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;aim_script</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00006"/>00006 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;This&#32;script&#32;contains&#32;functions&#32;for&#32;asserting&#32;</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00007"/>00007 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;and&#32;checking&#32;properties&#32;in&#32;an&#32;undirected&#32;graph.&#32;</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00008"/>00008 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;The&#32;assertFlowFunctionNeighbour&#32;function&#32;verifies&#32;</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00009"/>00009 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;if&#32;the&#32;flow&#32;function&#32;for&#32;a&#32;vertex&#32;and&#32;its&#32;</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00010"/>00010 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;neighbors&#32;meets&#32;a&#32;condition.&#32;areVerticesConnected&#32;</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00011"/>00011 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;checks&#32;if&#32;two&#32;vertices&#32;are&#32;connected&#32;by&#32;an&#32;edge.&#32;</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00012"/>00012 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;The&#32;assertFlowFunctionNeighbourVertex&#32;and&#32;</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00013"/>00013 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;assertFlowFunctionFutureOfVertex&#32;functions&#32;</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00014"/>00014 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;assert&#32;conditions&#32;related&#32;to&#32;flow&#32;functions&#32;and&#32;</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00015"/>00015 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;vertex&#32;properties.&#32;Finally,&#32;</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00016"/>00016 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;assertNeighbourFlowFunctionFutureOfVertex&#32;</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00017"/>00017 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;asserts&#32;a&#32;condition&#32;involving&#32;neighbors,&#32;</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00018"/>00018 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;flow&#32;functions,&#32;and&#32;vertex&#32;futures.</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00020"/>00020 <emphasis role="comment"></emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00021"/>00021 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00022"/>00022 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00038"/><link linkend="_graph_flow_definition_8hpp_1a7da00b4eb0fe705f2a1ac54347decb27">00038</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graph_flow_definition_8hpp_1a7da00b4eb0fe705f2a1ac54347decb27">assertFlowFunctionNeighbour</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;g,&#32;<emphasis role="keywordtype">int</emphasis>&#32;v,&#32;<emphasis role="keywordtype">int</emphasis>&#32;numRows,&#32;std::function&lt;<emphasis role="keywordtype">int</emphasis>(<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>)&gt;flowFunction)
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00039"/>00039 {
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;the&#32;flow&#32;function&#32;to&#32;get&#32;the&#32;forward&#32;lattice&#32;flow</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fv&#32;=&#32;flowFunction(v,&#32;numRows);
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;neigh&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a954183dad806b30b05e526c37284768b">getVertexNeighbours</link>(g,v)
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<link linkend="_general_assert_functions_8hpp_1a4a6a933e01029d0c61bce553817a0feb">isIntInVector</link>(v,&#32;neigh)
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00046"/>00046 }
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00047"/>00047 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00048"/>00048 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00049"/>00049 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00063"/><link linkend="_graph_flow_definition_8hpp_1ab2d570648375d421e37ef5eeb2590242">00063</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_graph_flow_definition_8hpp_1ab2d570648375d421e37ef5eeb2590242">areVerticesConnected</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;g,&#32;undirectedGraph::vertex_descriptor&#32;u,&#32;undirectedGraph::vertex_descriptor&#32;v)&#32;{
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;edge&#32;=&#32;boost::edge(u,&#32;v,&#32;g);
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;edge.second;&#32;<emphasis role="comment">//&#32;Returns&#32;true&#32;if&#32;there&#32;is&#32;an&#32;edge&#32;between&#32;u&#32;and&#32;v</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00066"/>00066 }
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00067"/>00067 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00068"/>00068 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00069"/>00069 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00080"/><link linkend="_graph_flow_definition_8hpp_1a0adf0631e71f1959ee93977f2867e9c7">00080</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graph_flow_definition_8hpp_1a0adf0631e71f1959ee93977f2867e9c7">assertFlowFunctionNeighbourVertex</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;g,<emphasis role="keywordtype">int</emphasis>&#32;vertex){
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;that&#32;for&#32;vertex,&#32;v,&#32;than&#32;f(v)&#32;is&#32;a&#32;neighbour</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00082"/>00082 }
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00083"/>00083 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00084"/>00084 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00095"/><link linkend="_graph_flow_definition_8hpp_1a41aab0ccd3ea6f075647fb7a443daf4d">00095</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graph_flow_definition_8hpp_1a41aab0ccd3ea6f075647fb7a443daf4d">assertFlowFunctionFutureOfVertex</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;g,<emphasis role="keywordtype">int</emphasis>&#32;vertex){
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00097"/>00097 }
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00098"/>00098 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00109"/>00109 <emphasis role="keywordtype">void</emphasis>
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00110"/>00110 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00111"/><link linkend="_graph_flow_definition_8hpp_1aceae62f2b36e649d0a5cebdd0369f5c3">00111</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graph_flow_definition_8hpp_1aceae62f2b36e649d0a5cebdd0369f5c3">assertNeighbourFlowFunctionFutureOfVertex</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;g,<emphasis role="keywordtype">int</emphasis>&#32;vertex){
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00113"/>00113 }
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00114"/>00114 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00115"/>00115 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00116"/>00116 
<anchor xml:id="_graph_flow_definition_8hpp_source_1l00117"/>00117 
</programlisting></section>
