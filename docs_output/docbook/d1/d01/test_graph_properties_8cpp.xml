<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test_graph_properties_8cpp" xml:lang="en-US">
<title>tests/testGraphProperties.cpp File Reference</title>
<indexterm><primary>tests/testGraphProperties.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;iostream&gt;<?linebreak?>#include &lt;vector&gt;<?linebreak?>#include &lt;numeric&gt;<?linebreak?>#include &lt;algorithm&gt;<?linebreak?>#include &lt;boost/graph/adjacency_list.hpp&gt;<?linebreak?>#include &lt;boost/container/vector.hpp&gt;<?linebreak?>#include &quot;/Users/jmille15/Projects/QuEST/QuEST/projects/MBQC/src/genericHelperFunctions/generalAssertFunctions.hpp&quot;<?linebreak?>#include &quot;/Users/jmille15/Projects/QuEST/QuEST/projects/MBQC/src/graphs/graphConstructions.hpp&quot;<?linebreak?>#include &quot;/Users/jmille15/Projects/QuEST/QuEST/projects/MBQC/src/testFunctions/graphAssertFunctions.hpp&quot;<?linebreak?></programlisting><simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef boost::adjacency_list&lt; boost::vecS, boost::vecS, boost::undirectedS &gt; <link linkend="_test_graph_properties_8cpp_1af845bf432b56cdda82dbde8011882168">undirectedGraph</link></para>
</listitem>
            <listitem><para>typedef boost::graph_traits&lt; <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &gt;<link linkend="_create_graph_8hpp_1af04c50f717d4bda41f0c58fe0eece059">::edge_iterator</link> <link linkend="_test_graph_properties_8cpp_1af04c50f717d4bda41f0c58fe0eece059">edge_iterator</link></para>
</listitem>
            <listitem><para>typedef boost::graph_traits&lt; <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &gt;<link linkend="_create_graph_8hpp_1a9451df0dac964b257bedb5e60547824e">::vertex_iterator</link> <link linkend="_test_graph_properties_8cpp_1a9451df0dac964b257bedb5e60547824e">vertex_iterator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_test_graph_properties_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_test_graph_properties_8cpp_1af04c50f717d4bda41f0c58fe0eece059"/><section>
    <title>edge_iterator</title>
<indexterm><primary>edge_iterator</primary><secondary>testGraphProperties.cpp</secondary></indexterm>
<indexterm><primary>testGraphProperties.cpp</primary><secondary>edge_iterator</secondary></indexterm>
<para><computeroutput>typedef boost::graph_traits&lt;<link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&gt;<link linkend="_create_graph_8hpp_1af04c50f717d4bda41f0c58fe0eece059">::edge_iterator</link> <link linkend="_create_graph_8hpp_1af04c50f717d4bda41f0c58fe0eece059">edge_iterator</link></computeroutput></para><para>
Definition at line <link linkend="_test_graph_properties_8cpp_source_1l00024">24</link> of file <link linkend="_test_graph_properties_8cpp_source">testGraphProperties.cpp</link>.</para>
</section>
<anchor xml:id="_test_graph_properties_8cpp_1af845bf432b56cdda82dbde8011882168"/><section>
    <title>undirectedGraph</title>
<indexterm><primary>undirectedGraph</primary><secondary>testGraphProperties.cpp</secondary></indexterm>
<indexterm><primary>testGraphProperties.cpp</primary><secondary>undirectedGraph</secondary></indexterm>
<para><computeroutput>typedef boost::adjacency_list&lt;boost::vecS, boost::vecS,boost::undirectedS&gt; <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link></computeroutput></para><para>
Definition at line <link linkend="_test_graph_properties_8cpp_source_1l00023">23</link> of file <link linkend="_test_graph_properties_8cpp_source">testGraphProperties.cpp</link>.</para>
</section>
<anchor xml:id="_test_graph_properties_8cpp_1a9451df0dac964b257bedb5e60547824e"/><section>
    <title>vertex_iterator</title>
<indexterm><primary>vertex_iterator</primary><secondary>testGraphProperties.cpp</secondary></indexterm>
<indexterm><primary>testGraphProperties.cpp</primary><secondary>vertex_iterator</secondary></indexterm>
<para><computeroutput>typedef boost::graph_traits&lt;<link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&gt;<link linkend="_create_graph_8hpp_1a9451df0dac964b257bedb5e60547824e">::vertex_iterator</link> <link linkend="_create_graph_8hpp_1a9451df0dac964b257bedb5e60547824e">vertex_iterator</link></computeroutput></para><para>
Definition at line <link linkend="_test_graph_properties_8cpp_source_1l00025">25</link> of file <link linkend="_test_graph_properties_8cpp_source">testGraphProperties.cpp</link>.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_test_graph_properties_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4"/><section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>testGraphProperties.cpp</secondary></indexterm>
<indexterm><primary>testGraphProperties.cpp</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main ( )</computeroutput></para><para>
Definition at line <link linkend="_test_graph_properties_8cpp_source_1l00029">29</link> of file <link linkend="_test_graph_properties_8cpp_source">testGraphProperties.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00030 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;rows;
00031 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cols;
00032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalVertices;
00033 &#32;&#32;&#32;&#32;
00034 &#32;&#32;&#32;&#32;<link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;pathGraph;
00035 &#32;&#32;&#32;&#32;<link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;latticeGraph;
00036 &#32;&#32;&#32;&#32;
00037 &#32;&#32;&#32;&#32;rows&#32;=&#32;10;
00038 &#32;&#32;&#32;&#32;cols&#32;=&#32;10;
00039 &#32;&#32;&#32;&#32;totalVertices&#32;=&#32;rows*cols;
00040 &#32;&#32;&#32;&#32;
00041 
00042 
00043 &#32;&#32;&#32;&#32;
00044 &#32;&#32;&#32;&#32;pathGraph&#32;=&#32;<link linkend="_create_graph_8hpp_1aabb013bb6de93b1ca2ff83e1d7d200c7">createLatticeGraph</link>(1,cols);
00045 &#32;&#32;&#32;&#32;latticeGraph&#32;=&#32;<link linkend="_create_graph_8hpp_1aabb013bb6de93b1ca2ff83e1d7d200c7">createLatticeGraph</link>(rows,cols);
00046 
00047 
00048 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;that&#32;the&#32;total&#32;degree&#32;is&#32;equivalent&#32;to&#32;</emphasis>
00049 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2&#32;times&#32;the&#32;number&#32;of&#32;edges</emphasis>
00050 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a60966966368ac25fe48dbccd70490e98">assertHandShakeLemma</link>(pathGraph);
00051 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a60966966368ac25fe48dbccd70490e98">assertHandShakeLemma</link>(latticeGraph);
00052 
00053 
00054 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;minimum&#32;and&#32;maximum&#32;degree&#32;of&#32;a&#32;path&#32;graph&#32;is</emphasis>
00055 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1&#32;and&#32;2&#32;respectively&#32;</emphasis>
00056 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a781ea29934c2f8c5c65a73075bc13da1">assertPathGraphMinMaxDegrees</link>(pathGraph);
00057 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1ab7b459ddc7c532fc5a37abb8760d7ca6">assertDegreeSetLatticeGraph</link>(latticeGraph);
00058 
00059 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;the&#32;number&#32;of&#32;vertices&#32;in&#32;the&#32;graph</emphasis>
00060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;equal&#32;the&#32;inputted&#32;number</emphasis>
00061 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a026973ba07ba80213ede65e64a3eb614">assertGraphNumVertices</link>(pathGraph,cols);
00062 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a026973ba07ba80213ede65e64a3eb614">assertGraphNumVertices</link>(latticeGraph,totalVertices);
00063 &#32;&#32;&#32;&#32;
00064 &#32;&#32;&#32;&#32;
00065 
00066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00067 }
</programlisting></section>
</section>
</section>
