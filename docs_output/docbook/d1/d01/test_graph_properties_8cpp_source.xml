<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test_graph_properties_8cpp_source" xml:lang="en-US">
<title>testGraphProperties.cpp</title>
<indexterm><primary>tests/testGraphProperties.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_test_graph_properties_8cpp_source_1l00001"/>00001 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;Title&#32;&#32;:&#32;testGraphProperties.cpp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;Author&#32;:&#32;Jonathan&#32;Miller&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;Date&#32;&#32;&#32;:&#32;20230425&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00005"/>00005 <emphasis role="comment">//&#32;Aim&#32;&#32;&#32;&#32;:&#32;Build&#32;graphs&#32;and&#32;test&#32;properties&#32;of&#32;graphs.&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00006"/>00006 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;As&#32;graph&#32;types&#32;grow&#32;in&#32;number,&#32;separate&#32;tests&#32;&#32;//</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00007"/>00007 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;across&#32;multiple&#32;files&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00009"/>00009 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00012"/>00012 <emphasis role="preprocessor">#include&#32;&lt;numeric&gt;</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00013"/>00013 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00014"/>00014 <emphasis role="preprocessor">#include&#32;&lt;boost/graph/adjacency_list.hpp&gt;</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00015"/>00015 <emphasis role="preprocessor">#include&#32;&lt;boost/container/vector.hpp&gt;</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00016"/>00016 <emphasis role="preprocessor">#include&#32;&quot;/Users/jmille15/Projects/QuEST/QuEST/projects/MBQC/src/genericHelperFunctions/generalAssertFunctions.hpp&quot;</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00017"/>00017 <emphasis role="preprocessor">#include&#32;&quot;/Users/jmille15/Projects/QuEST/QuEST/projects/MBQC/src/graphs/graphConstructions.hpp&quot;</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00018"/>00018 <emphasis role="preprocessor">#include&#32;&quot;/Users/jmille15/Projects/QuEST/QuEST/projects/MBQC/src/testFunctions/graphAssertFunctions.hpp&quot;</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00019"/>00019 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00020"/>00020 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00021"/>00021 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>boost;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00022"/>00022 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00023"/><link linkend="_test_graph_properties_8cpp_1af845bf432b56cdda82dbde8011882168">00023</link> <emphasis role="keyword">typedef</emphasis>&#32;boost::adjacency_list&lt;boost::vecS,&#32;boost::vecS,boost::undirectedS&gt;&#32;<link linkend="_test_graph_properties_8cpp_1af845bf432b56cdda82dbde8011882168">undirectedGraph</link>;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00024"/><link linkend="_test_graph_properties_8cpp_1af04c50f717d4bda41f0c58fe0eece059">00024</link> <emphasis role="keyword">typedef</emphasis>&#32;boost::graph_traits&lt;undirectedGraph&gt;::edge_iterator&#32;<link linkend="_test_graph_properties_8cpp_1af04c50f717d4bda41f0c58fe0eece059">edge_iterator</link>;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00025"/><link linkend="_test_graph_properties_8cpp_1a9451df0dac964b257bedb5e60547824e">00025</link> <emphasis role="keyword">typedef</emphasis>&#32;boost::graph_traits&lt;undirectedGraph&gt;::vertex_iterator&#32;<link linkend="_test_graph_properties_8cpp_1a9451df0dac964b257bedb5e60547824e">vertex_iterator</link>;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00026"/>00026 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00027"/>00027 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00028"/>00028 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00029"/><link linkend="_test_graph_properties_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">00029</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_test_graph_properties_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link>(){
<anchor xml:id="_test_graph_properties_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;rows;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cols;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalVertices;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;pathGraph;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;latticeGraph;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;rows&#32;=&#32;10;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;cols&#32;=&#32;10;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;totalVertices&#32;=&#32;rows*cols;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00041"/>00041 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00042"/>00042 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;pathGraph&#32;=&#32;<link linkend="_graph_constructions_8hpp_1a74f9014929a19ec558c3bc766754f1c3">createLatticeGraph</link>(1,cols);
<anchor xml:id="_test_graph_properties_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;latticeGraph&#32;=&#32;<link linkend="_graph_constructions_8hpp_1a74f9014929a19ec558c3bc766754f1c3">createLatticeGraph</link>(rows,cols);
<anchor xml:id="_test_graph_properties_8cpp_source_1l00046"/>00046 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00047"/>00047 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;that&#32;the&#32;total&#32;degree&#32;is&#32;equivalent&#32;to&#32;</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2&#32;times&#32;the&#32;number&#32;of&#32;edges</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a60966966368ac25fe48dbccd70490e98">assertHandShakeLemma</link>(pathGraph);
<anchor xml:id="_test_graph_properties_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a60966966368ac25fe48dbccd70490e98">assertHandShakeLemma</link>(latticeGraph);
<anchor xml:id="_test_graph_properties_8cpp_source_1l00052"/>00052 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00053"/>00053 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;minimum&#32;and&#32;maximum&#32;degree&#32;of&#32;a&#32;path&#32;graph&#32;is</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1&#32;and&#32;2&#32;respectively&#32;</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a781ea29934c2f8c5c65a73075bc13da1">assertPathGraphMinMaxDegrees</link>(pathGraph);
<anchor xml:id="_test_graph_properties_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1ab7b459ddc7c532fc5a37abb8760d7ca6">assertDegreeSetLatticeGraph</link>(latticeGraph);
<anchor xml:id="_test_graph_properties_8cpp_source_1l00058"/>00058 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;the&#32;number&#32;of&#32;vertices&#32;in&#32;the&#32;graph</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;equal&#32;the&#32;inputted&#32;number</emphasis>
<anchor xml:id="_test_graph_properties_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a026973ba07ba80213ede65e64a3eb614">assertGraphNumVertices</link>(pathGraph,cols);
<anchor xml:id="_test_graph_properties_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a026973ba07ba80213ede65e64a3eb614">assertGraphNumVertices</link>(latticeGraph,totalVertices);
<anchor xml:id="_test_graph_properties_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00065"/>00065 
<anchor xml:id="_test_graph_properties_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_test_graph_properties_8cpp_source_1l00067"/>00067 }
</programlisting></section>
