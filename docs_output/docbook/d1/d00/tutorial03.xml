<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tutorial03" xml:lang="en-US">
<title>Tutorial 3: 1D Lattice</title>
<indexterm><primary>Tutorial 3: 1D Lattice</primary></indexterm>
<section xml:id="_tutorial03_1intro">
<title>Introduction</title>

<para>This tutorial demonstrates some consequences of implementing a MBQC pattern on a one dimensional lattice graph.</para>

<para></para>

<para>By creating a quantum register, either with a state vector or density matrix in QuEST, applying the Hadamard gate and some rotational angle <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="../../form_0.png"/>
            </imageobject>
</inlinemediaobject>
 on a Pauli-Z gate to each qubit, then entangling the register according the graph <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="../../form_1.png"/>
            </imageobject>
</inlinemediaobject>
 with the controlled Z gate, we obtain a MBQC graph-circuit. The following code implements the circuit represented by the &quot;Example 1D Lattice&quot; figure.</para>

<para><literallayout><computeroutput>QuESTEnv&#32;env&#32;=&#32;createQuESTEnv();
<emphasis role="keywordtype">int</emphasis>&#32;numQubits&#32;=&#32;3;
Qureg&#32;qubits&#32;=&#32;createQureg(numQubits,&#32;env);
initPlusState(qubits);
rotateZ(qureg,0,0);
rotateZ(qureg,1,0);
rotateZ(qureg,2,0);
controlledPhaseFlip(qureg,0,1);
controlledPhaseFlip(qureg,1,2);&#32;&#32;&#32;&#32;&#32;
</computeroutput></literallayout></para>

<para>QuEST performs mid-circuit measurements that are destructive, thus allowing for projective measurements to be simulated. In the figure, the vertex to the far left will be measured first. Its outcome will inform the basis angle associated with the middle vertex and depending on the first outcome being a <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="../../form_2.png"/>
            </imageobject>
</inlinemediaobject>
 or <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="../../form_3.png"/>
            </imageobject>
</inlinemediaobject>
. The basis of measurement adapts to previous measurements in relation to the graph flow. Finally the far right vertex will be informed by the first two measurment outcomes (see Tutorial <link linkend="_tutorial04_8cpp">examples/tutorial04.cpp</link> for a discussion on flow).</para>
</section>
<section xml:id="_tutorial03_1oneDLatticeResults">
<title>One Dimensional Results</title>
<section xml:id="_tutorial03_1oddQubitsZeroAngles">
<title>Odd number of qubits</title>

<para>In the case there the number of vertices in the graph is an odd number and the angle applied to every qubit is <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="../../form_2.png"/>
            </imageobject>
</inlinemediaobject>
, then the final measurement of the graph, the last qubit will have an outcome of <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="../../form_2.png"/>
            </imageobject>
</inlinemediaobject>
. The source code can be foubd at <link linkend="_test_odd_number_qubit_angles_all_zero_8cpp">tests/testOddNumberQubitAnglesAllZero.cpp</link>.</para>

<para>In this referenced script there is a loop, which iterates the test <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="../../form_4.png"/>
            </imageobject>
</inlinemediaobject>
 times and runs the <computeroutput>assert</computeroutput> command each iteration to verify the last qubit of the graph is <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="../../form_2.png"/>
            </imageobject>
</inlinemediaobject>
. Simply change 1e6 to 1 and you will run the simulation once.</para>

<para><literallayout><computeroutput><emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;1e6;&#32;i++)
&#32;{}
</computeroutput></literallayout></para>

<para>The script starts by including the necessary package header file:</para>

<para><literallayout><computeroutput><emphasis role="preprocessor">#include&#32;&quot;<link linkend="_packages_8hpp">packages.hpp</link>&quot;</emphasis>
</computeroutput></literallayout></para>

<para>Initialise the following code with the necessary variables and sets values for the 1D lattice:</para>

<para><literallayout><computeroutput><emphasis role="keywordtype">int</emphasis>&#32;numRows;
<emphasis role="keywordtype">int</emphasis>&#32;numCols;
<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;latticeGraph;
<emphasis role="keywordtype">int</emphasis>&#32;numVertices;
std::vector&lt;qreal&gt;&#32;qubitAngles;
std::vector&lt;int&gt;&#32;measuredQubitsOutcomes;

<emphasis role="comment">//&#32;Set&#32;values&#32;to&#32;variables</emphasis>
numRows&#32;=&#32;1;
numCols&#32;=&#32;11;&#32;<emphasis role="comment">//&#32;Test&#32;on&#32;an&#32;odd&#32;number&#32;of&#32;qubits</emphasis>
latticeGraph&#32;=&#32;<link linkend="_graph_constructions_8hpp_1a74f9014929a19ec558c3bc766754f1c3">createLatticeGraph</link>(numRows,&#32;numCols);
numVertices&#32;=&#32;boost::num_vertices(latticeGraph);
</computeroutput></literallayout></para>

<para>The quantum circuit is created and initialized:</para>

<para><literallayout><computeroutput><emphasis role="comment">//&#32;load&#32;QuEST&#32;environment</emphasis>
QuESTEnv&#32;env&#32;=&#32;createQuESTEnv();

<emphasis role="comment">//&#32;create&#32;a&#32;quantum&#32;register</emphasis>
Qureg&#32;qureg&#32;=&#32;createQureg(numVertices,&#32;env);

<emphasis role="comment">//&#32;Initialize&#32;qubit&#32;angles&#32;to&#32;0</emphasis>
qubitAngles&#32;=&#32;<link linkend="_angle_construction_8hpp_1aabc90c9d60fe6133e0143eda8db51906">initAllAnglesZero</link>(numVertices);

<emphasis role="comment">//&#32;Initialise&#32;in&#32;the&#32;plus&#32;state</emphasis>
initPlusState(qureg);

<emphasis role="comment">//&#32;Add&#32;angles&#32;to&#32;the&#32;qubits</emphasis>
<link linkend="_angle_construction_8hpp_1a6647ed996ec54a9137e68e6c6317e8ee">addAngleRotateZgate</link>(qureg,&#32;qubitAngles);
</computeroutput></literallayout></para>

<para>The graph is entangled and measurements are performed on the lattice:</para>

<para><literallayout><computeroutput><emphasis role="comment">//&#32;Entangle&#32;graph</emphasis>
<link linkend="_quantum_graph_cluster_states_8hpp_1a3f830234f9eb3a150a084b0f2b4aa056">entangleGraph</link>(qureg,&#32;latticeGraph);

<emphasis role="comment">//&#32;Measure&#32;graph</emphasis>
measuredQubitsOutcomes&#32;=&#32;<link linkend="_flow_measurements_8hpp_1a7231be9a1c347894c1d01c349f4b41c7">measureGraph</link>(qureg,&#32;latticeGraph,&#32;qubitAngles,&#32;numRows);

assert((measuredQubitsOutcomes.back()&#32;==&#32;0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;The&#32;last&#32;qubit&#32;must&#32;be&#32;0,&#32;it&#32;is&#32;not.&quot;</emphasis>);
</computeroutput></literallayout></para>

<para>This test indeen shows that the final qubit is always measured as a <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="../../form_2.png"/>
            </imageobject>
</inlinemediaobject>
 outcome.</para>
</section>
<section xml:id="_tutorial03_1twoQubiTsPi">
<title>Two Qubits with angle Pi</title>
</section>
</section>
</section>
