<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source" xml:lang="en-US">
<title>20230328_OddPathGraphEveryOtherAngleZero.cpp</title>
<indexterm><primary>src/archive/filesToGoThrough/20230328_OddPathGraphEveryOtherAngleZero.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;QuEST.h&gt;</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00002"/>00002 <emphasis role="comment">//#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::all_of</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_20230314___functions___v1_8hpp">20230314_Functions_V1.hpp</link>&quot;</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00008"/>00008 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00009"/>00009 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00010"/>00010 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00011"/>00011 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00012"/><link linkend="_20230328___odd_path_graph_every_other_angle_zero_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">00012</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_20230328___odd_path_graph_every_other_angle_zero_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link>()&#32;{
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00013"/>00013 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;lastQubitOutcome;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;allLastQubitZero;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numberRealisations&#32;=&#32;1;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;qubitNumber=5;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00018"/>00018 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00020"/>00020 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;i&lt;numberRealisations;i++)
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;QuESTEnv&#32;env&#32;=&#32;createQuESTEnv();
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;parameters</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numberQubits&#32;=&#32;qubitNumber;<emphasis role="comment">//11;</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;prepare&#32;our&#32;register</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Qureg&#32;qureg&#32;=&#32;createQureg(numberQubits,&#32;env);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;qureg&#32;-&gt;&#32;|+&gt;&lt;+|</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initPlusState(qureg);&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00031"/>00031 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00032"/>00032 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;vector&#32;representing&#32;a&#32;linear&#32;cluster&#32;graph</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;pathGraph&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1aa6c7ea81b30e713a1f641e9a86e5f0a8">getPathGraph</link>(numberQubits);&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;measuredQubitsOutcomes;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;qreal&gt;&#32;qubitAngles;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;qreal&gt;&#32;updatedQubitAngles;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00039"/>00039 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;apply&#32;CZ&#32;gate&#32;to&#32;entangle&#32;the&#32;circuit</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::vector&lt;int&gt;::size_type&#32;q&#32;=&#32;0;&#32;q&#32;!=&#32;pathGraph.size()-1;&#32;q++)&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;controlledPhaseFlip(qureg,q,q+1);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00046"/>00046 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;initial&#32;angles</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;i&lt;numberQubits;i++){
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i&#32;%&#32;2&#32;==&#32;0){
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles.push_back(2*M_PI);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles.push_back(0.0);&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00056"/>00056 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00057"/>00057 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00058"/>00058 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Run&#32;MBQC</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;measure&#32;first&#32;qubit</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;firstQubitIndex=0;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updatedQubitAngles.push_back(qubitAngles[firstQubitIndex]);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotateZ(qureg,firstQubitIndex,&#32;(-1)*updatedQubitAngles[firstQubitIndex]);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hadamard(qureg,firstQubitIndex);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measuredQubitsOutcomes.push_back(measure(qureg,firstQubitIndex));
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;measure&#32;second&#32;qubit</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;X1;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//qreal&#32;Z1;</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;secondQubitIndex=1;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;X1&#32;=&#32;pow((-1),measuredQubitsOutcomes[firstQubitIndex])*qubitAngles[secondQubitIndex];
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updatedQubitAngles[secondQubitIndex]&#32;=&#32;X1;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotateZ(qureg,secondQubitIndex,&#32;(-1)*updatedQubitAngles[secondQubitIndex]);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hadamard(qureg,secondQubitIndex);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measuredQubitsOutcomes.push_back(measure(qureg,secondQubitIndex));
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;currentQubit=2;currentQubit&lt;numberQubits;currentQubit++)
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;X;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;Z;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//qreal&#32;phi;</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;phiPrime;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;outcome;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00085"/>00085 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;X&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1a9c227d82e03f906a192a861db4ddf6ab">computeXCorrectionAnglePathGraph</link>(
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pathGraph,&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measuredQubitsOutcomes,
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles,
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentQubit);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Z&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1acf8731fbf6fdc066d371b78a916dc431">computeZCorrectionAnglePathGraph</link>(
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pathGraph,&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measuredQubitsOutcomes,
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentQubit);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;phiPrime&#32;=&#32;X+Z;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotateZ(qureg,currentQubit,&#32;(-1)*phiPrime);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hadamard(qureg,currentQubit);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outcome&#32;=&#32;measure(qureg,currentQubit);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measuredQubitsOutcomes.push_back(outcome);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00105"/>00105 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastQubitOutcome.push_back(measuredQubitsOutcomes.back());
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00109"/>00109 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00110"/>00110 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for(int&#32;i:lastQubitOutcome){</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00111"/>00111 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;i&#32;&lt;&lt;&#32;&quot;&#32;&quot;;</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00112"/>00112 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;*/</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00113"/>00113 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Confirm&#32;all&#32;of&#32;the&#32;last&#32;qubits&#32;are&#32;0</emphasis>
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;std::all_of(
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastQubitOutcome.begin(),&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastQubitOutcome.end(),&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keywordtype">int</emphasis>&#32;i){return&#32;i==0;}))
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;All&#32;the&#32;elements&#32;on&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;qubitNumber&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;qubits&#32;are&#32;1.\n&quot;</emphasis>;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allLastQubitZero.push_back(1);
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00124"/>00124 }
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00125"/>00125 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00126"/>00126 
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00127"/>00127 &#32;&#32;
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00128"/>00128 someType&#32;<link linkend="_20230314___functions___v1_8hpp_1acdb0932776bd659eddba9f2942af2c15">runMbqcPathGraph</link>(
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;Qureg&#32;qureg,
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;pathGraph,
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;vector&lt;qreal&gt;&#32;qubitAngles)
<anchor xml:id="_20230328___odd_path_graph_every_other_angle_zero_8cpp_source_1l00132"/>00132 
</programlisting></section>
