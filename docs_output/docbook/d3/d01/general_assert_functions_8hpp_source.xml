<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_general_assert_functions_8hpp_source" xml:lang="en-US">
<title>generalAssertFunctions.hpp</title>
<indexterm><primary>src/testFunctions/generalAssertFunctions.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_general_assert_functions_8hpp_source_1l00001"/>00001 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;Title&#32;&#32;:&#32;generalAssertFunctions.hpp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_general_assert_functions_8hpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;Author&#32;:&#32;Jonathan&#32;Miller&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_general_assert_functions_8hpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;Date&#32;&#32;&#32;:&#32;20230425&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_general_assert_functions_8hpp_source_1l00005"/>00005 <emphasis role="comment">//&#32;Aim&#32;&#32;&#32;&#32;:&#32;Construct&#32;general&#32;functions&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_general_assert_functions_8hpp_source_1l00007"/>00007 <emphasis role="comment"></emphasis>
<anchor xml:id="_general_assert_functions_8hpp_source_1l00008"/>00008 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00009"/>00009 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00010"/>00010 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00011"/>00011 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00012"/>00012 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00013"/>00013 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00014"/>00014 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00015"/>00015 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00025"/><link linkend="_general_assert_functions_8hpp_1ab8bc2aa68695d561b6a3d544658b5c70">00025</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_general_assert_functions_8hpp_1ab8bc2aa68695d561b6a3d544658b5c70">testTwoValueEquate</link>(<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;<emphasis role="keywordtype">int</emphasis>&#32;j)&#32;{
<anchor xml:id="_general_assert_functions_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(i&#32;==&#32;j);
<anchor xml:id="_general_assert_functions_8hpp_source_1l00027"/>00027 }
<anchor xml:id="_general_assert_functions_8hpp_source_1l00028"/>00028 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00038"/><link linkend="_general_assert_functions_8hpp_1aaa5eeda4e79aa986d57c3256556b6e6c">00038</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_general_assert_functions_8hpp_1aaa5eeda4e79aa986d57c3256556b6e6c">getMin</link>(<emphasis role="keyword">const</emphasis>&#32;boost::container::vector&lt;int&gt;&amp;&#32;vec)&#32;{
<anchor xml:id="_general_assert_functions_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vec.empty())&#32;{
<anchor xml:id="_general_assert_functions_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::invalid_argument(<emphasis role="stringliteral">&quot;Cannot&#32;get&#32;min&#32;of&#32;empty&#32;vector&quot;</emphasis>);
<anchor xml:id="_general_assert_functions_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_assert_functions_8hpp_source_1l00042"/>00042 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min_val&#32;=&#32;vec[0];
<anchor xml:id="_general_assert_functions_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;vec.size();&#32;i++)&#32;{
<anchor xml:id="_general_assert_functions_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vec[i]&#32;&lt;&#32;min_val)&#32;{
<anchor xml:id="_general_assert_functions_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min_val&#32;=&#32;vec[i];
<anchor xml:id="_general_assert_functions_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_general_assert_functions_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_assert_functions_8hpp_source_1l00049"/>00049 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;min_val;
<anchor xml:id="_general_assert_functions_8hpp_source_1l00051"/>00051 }
<anchor xml:id="_general_assert_functions_8hpp_source_1l00052"/>00052 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00053"/>00053 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00054"/>00054 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00064"/><link linkend="_general_assert_functions_8hpp_1af227e83a7360ec64f91773c37a905253">00064</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_general_assert_functions_8hpp_1af227e83a7360ec64f91773c37a905253">getMax</link>(<emphasis role="keyword">const</emphasis>&#32;boost::container::vector&lt;int&gt;&amp;&#32;vec)&#32;{
<anchor xml:id="_general_assert_functions_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vec.empty())&#32;{
<anchor xml:id="_general_assert_functions_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::invalid_argument(<emphasis role="stringliteral">&quot;Cannot&#32;get&#32;max&#32;of&#32;empty&#32;vector&quot;</emphasis>);
<anchor xml:id="_general_assert_functions_8hpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_assert_functions_8hpp_source_1l00068"/>00068 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max_val&#32;=&#32;vec[0];
<anchor xml:id="_general_assert_functions_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;vec.size();&#32;i++)&#32;{
<anchor xml:id="_general_assert_functions_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vec[i]&#32;&gt;&#32;max_val)&#32;{
<anchor xml:id="_general_assert_functions_8hpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_val&#32;=&#32;vec[i];
<anchor xml:id="_general_assert_functions_8hpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_general_assert_functions_8hpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_assert_functions_8hpp_source_1l00075"/>00075 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;max_val;
<anchor xml:id="_general_assert_functions_8hpp_source_1l00077"/>00077 }
<anchor xml:id="_general_assert_functions_8hpp_source_1l00078"/>00078 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00079"/>00079 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00080"/>00080 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00090"/><link linkend="_general_assert_functions_8hpp_1a4a6a933e01029d0c61bce553817a0feb">00090</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_general_assert_functions_8hpp_1a4a6a933e01029d0c61bce553817a0feb">isIntInVector</link>(<emphasis role="keywordtype">int</emphasis>&#32;value,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;int&gt;&amp;&#32;vec)&#32;{
<anchor xml:id="_general_assert_functions_8hpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::find(vec.begin(),&#32;vec.end(),&#32;value)&#32;!=&#32;vec.end();
<anchor xml:id="_general_assert_functions_8hpp_source_1l00092"/>00092 }
<anchor xml:id="_general_assert_functions_8hpp_source_1l00093"/>00093 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00094"/>00094 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00095"/>00095 
<anchor xml:id="_general_assert_functions_8hpp_source_1l00106"/><link linkend="_general_assert_functions_8hpp_1a0cab6d0005870e6df565f2397afff231">00106</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_general_assert_functions_8hpp_1a0cab6d0005870e6df565f2397afff231">assertFunc</link>(std::vector&lt;int&gt;&#32;measuredQubitsOutcomes,<emphasis role="keywordtype">int</emphasis>&#32;assertValue)&#32;{
<anchor xml:id="_general_assert_functions_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(measuredQubitsOutcomes.back()&#32;!=&#32;assertValue)&#32;{
<anchor xml:id="_general_assert_functions_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;The&#32;last&#32;qubit&#32;must&#32;be&#32;&quot;</emphasis>&#32;+&#32;std::to_string(assertValue)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;it&#32;is&#32;not.&quot;</emphasis>);
<anchor xml:id="_general_assert_functions_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_assert_functions_8hpp_source_1l00110"/>00110 }
<anchor xml:id="_general_assert_functions_8hpp_source_1l00111"/>00111 
</programlisting></section>
