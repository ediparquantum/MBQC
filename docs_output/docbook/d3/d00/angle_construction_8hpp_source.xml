<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_angle_construction_8hpp_source" xml:lang="en-US">
<title>angleConstruction.hpp</title>
<indexterm><primary>src/quantumGraphs/angleConstruction.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_angle_construction_8hpp_source_1l00001"/>00001 
<anchor xml:id="_angle_construction_8hpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;Title&#32;&#32;:&#32;angleConstruction.hpp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;Author&#32;:&#32;Jonathan&#32;Miller&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;Date&#32;&#32;&#32;:&#32;20230425&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00005"/>00005 <emphasis role="comment">//&#32;Aim&#32;&#32;&#32;&#32;:&#32;Construct&#32;angles&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00007"/>00007 <emphasis role="comment"></emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00008"/>00008 
<anchor xml:id="_angle_construction_8hpp_source_1l00009"/>00009 
<anchor xml:id="_angle_construction_8hpp_source_1l00010"/>00010 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00011"/>00011 <emphasis role="comment">&#32;&#32;&#32;&#32;Initialise&#32;a&#32;vector&#32;of&#32;`qreal`&#32;values&#32;all&#32;set&#32;to&#32;0.0</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00012"/>00012 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00013"/><link linkend="_angle_construction_8hpp_1aabc90c9d60fe6133e0143eda8db51906">00013</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1aabc90c9d60fe6133e0143eda8db51906">initAllAnglesZero</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits){
<anchor xml:id="_angle_construction_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits,0.0);&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00016"/>00016 }
<anchor xml:id="_angle_construction_8hpp_source_1l00017"/>00017 
<anchor xml:id="_angle_construction_8hpp_source_1l00018"/>00018 
<anchor xml:id="_angle_construction_8hpp_source_1l00019"/>00019 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00020"/>00020 <emphasis role="comment">&#32;&#32;&#32;&#32;Initialise&#32;a&#32;vector&#32;of&#32;`qreal`&#32;values&#32;all&#32;set&#32;to&#32;some&#32;same&#32;`angle`</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00021"/>00021 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00022"/><link linkend="_angle_construction_8hpp_1ac940c0b993f5f0e21dc74a2ac2f3fc7a">00022</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1ac940c0b993f5f0e21dc74a2ac2f3fc7a">initAllAnglesSame</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits,&#32;qreal&#32;angle){
<anchor xml:id="_angle_construction_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits,angle);&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00025"/>00025 }
<anchor xml:id="_angle_construction_8hpp_source_1l00026"/>00026 
<anchor xml:id="_angle_construction_8hpp_source_1l00027"/>00027 
<anchor xml:id="_angle_construction_8hpp_source_1l00028"/>00028 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00029"/>00029 <emphasis role="comment">&#32;&#32;&#32;&#32;Initialise&#32;a&#32;vector&#32;of&#32;`qreal`&#32;values&#32;all&#32;set&#32;to&#32;a&#32;random&#32;fraction</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00030"/>00030 <emphasis role="comment">&#32;&#32;&#32;&#32;X*M_PI/piDenominator:&#32;X&#32;~&#32;Uniform(0,2*piDenominator)</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00031"/>00031 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00032"/><link linkend="_angle_construction_8hpp_1aad84f8117e971acc869f15e6a616f195">00032</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1aad84f8117e971acc869f15e6a616f195">initRandomPiOnNAngles</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits,&#32;<emphasis role="keywordtype">int</emphasis>&#32;piDenominator){
<anchor xml:id="_angle_construction_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;uniform&#32;distribution&#32;for&#32;the&#32;range</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min&#32;=&#32;0;
<anchor xml:id="_angle_construction_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max&#32;=&#32;2*piDenominator&#32;-&#32;1;
<anchor xml:id="_angle_construction_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Populate&#32;angle&#32;vector</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;numQubits;&#32;i++){
<anchor xml:id="_angle_construction_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;numer&#32;=&#32;1.0&#32;*&#32;<link linkend="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46">drawRandomUniformInteger</link>(min,max);&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;angle&#32;=&#32;(double)(numer/piDenominator)&#32;*&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;angle;
<anchor xml:id="_angle_construction_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00047"/>00047 }
<anchor xml:id="_angle_construction_8hpp_source_1l00048"/>00048 
<anchor xml:id="_angle_construction_8hpp_source_1l00049"/>00049 
<anchor xml:id="_angle_construction_8hpp_source_1l00050"/>00050 
<anchor xml:id="_angle_construction_8hpp_source_1l00051"/>00051 
<anchor xml:id="_angle_construction_8hpp_source_1l00052"/>00052 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00053"/>00053 <emphasis role="comment">&#32;&#32;&#32;&#32;Initialise&#32;a&#32;vector&#32;of&#32;`qreal`&#32;values&#32;all&#32;set&#32;to&#32;a&#32;random&#32;fraction</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00054"/>00054 <emphasis role="comment">&#32;&#32;&#32;&#32;X*M_PI/piDenominator:&#32;X&#32;~&#32;Uniform(0,2*piDenominator)</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00055"/>00055 <emphasis role="comment">&#32;&#32;&#32;&#32;The&#32;sum&#32;of&#32;X*M_PI/piDenominator&#32;is&#32;a&#32;multiple&#32;of&#32;2M_PI</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00056"/>00056 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00057"/><link linkend="_angle_construction_8hpp_1a4711c7e692e9e1c3dd07c4e5255b41d1">00057</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1a4711c7e692e9e1c3dd07c4e5255b41d1">initRandomPiOnNAnglesMod2kPi</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits,&#32;<emphasis role="keywordtype">int</emphasis>&#32;piDenominator){
<anchor xml:id="_angle_construction_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;uniform&#32;distribution&#32;for&#32;the&#32;range</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min&#32;=&#32;0;
<anchor xml:id="_angle_construction_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max&#32;=&#32;2*piDenominator&#32;-&#32;1;
<anchor xml:id="_angle_construction_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalPositions&#32;=&#32;2*piDenominator;
<anchor xml:id="_angle_construction_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Populate&#32;angle&#32;vector</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;numeratorVector(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;numQubits-1;&#32;i++){
<anchor xml:id="_angle_construction_8hpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;numer&#32;=&#32;1.0&#32;*&#32;<link linkend="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46">drawRandomUniformInteger</link>(min,max);&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numeratorVector[i]&#32;=&#32;numer;
<anchor xml:id="_angle_construction_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;angle&#32;=&#32;(double)(numer/piDenominator)&#32;*&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;angle;
<anchor xml:id="_angle_construction_8hpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00074"/>00074 &#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;some&#32;of&#32;random&#32;numerators</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumerator&#32;=&#32;std::accumulate(numeratorVector.begin(),&#32;numeratorVector.end(),&#32;0);
<anchor xml:id="_angle_construction_8hpp_source_1l00077"/>00077 
<anchor xml:id="_angle_construction_8hpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;remainingPositions</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;remainingPositions&#32;=&#32;totalPositions&#32;-&#32;(totalNumerator&#32;%&#32;totalPositions);
<anchor xml:id="_angle_construction_8hpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumeratorAndRemainingModPositions&#32;=&#32;(remainingPositions&#32;+&#32;totalNumerator)&#32;%&#32;totalPositions;
<anchor xml:id="_angle_construction_8hpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;assert((totalNumeratorAndRemainingModPositions&#32;==&#32;0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Total&#32;numerator&#32;values&#32;should&#32;be&#32;&#32;mod&#32;total&#32;positions&#32;equal&#32;to&#32;0,&#32;indicating&#32;2kPi&#32;multiple&quot;</emphasis>);
<anchor xml:id="_angle_construction_8hpp_source_1l00083"/>00083 
<anchor xml:id="_angle_construction_8hpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;qreal&#32;finalAngle&#32;=&#32;(1.0)*(remainingPositions/piDenominator)*M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;qubitAngles[numQubits-1]&#32;=&#32;finalAngle;
<anchor xml:id="_angle_construction_8hpp_source_1l00086"/>00086 
<anchor xml:id="_angle_construction_8hpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00092"/>00092 }
<anchor xml:id="_angle_construction_8hpp_source_1l00093"/>00093 
<anchor xml:id="_angle_construction_8hpp_source_1l00094"/>00094 
<anchor xml:id="_angle_construction_8hpp_source_1l00095"/>00095 
<anchor xml:id="_angle_construction_8hpp_source_1l00096"/>00096 
<anchor xml:id="_angle_construction_8hpp_source_1l00097"/>00097 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00098"/>00098 <emphasis role="comment">&#32;&#32;&#32;&#32;Initialise&#32;a&#32;vector&#32;of&#32;`qreal`&#32;values&#32;all&#32;set&#32;to&#32;a&#32;random&#32;fraction</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00099"/>00099 <emphasis role="comment">&#32;&#32;&#32;&#32;X*M_PI/piDenominator:&#32;X&#32;~&#32;Uniform(0,2*piDenominator)</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00100"/>00100 <emphasis role="comment">&#32;&#32;&#32;&#32;The&#32;sum&#32;of&#32;X*M_PI/piDenominator&#32;is&#32;a&#32;multiple&#32;of&#32;</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00101"/>00101 <emphasis role="comment">&#32;&#32;&#32;&#32;2M_PI&#32;+&#32;M_PI</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00102"/>00102 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00103"/><link linkend="_angle_construction_8hpp_1adde2e56cefa79b49346bc9e560b4430b">00103</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1adde2e56cefa79b49346bc9e560b4430b">initRandomPiOnNAnglesMod2kPiPlusPi</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits,&#32;<emphasis role="keywordtype">int</emphasis>&#32;piDenominator){
<anchor xml:id="_angle_construction_8hpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;uniform&#32;distribution&#32;for&#32;the&#32;range</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min&#32;=&#32;0;
<anchor xml:id="_angle_construction_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max&#32;=&#32;2*piDenominator&#32;-&#32;1;
<anchor xml:id="_angle_construction_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalPositions&#32;=&#32;2*piDenominator;
<anchor xml:id="_angle_construction_8hpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Populate&#32;angle&#32;vector</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;numeratorVector(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;numQubits-1;&#32;i++){
<anchor xml:id="_angle_construction_8hpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;numer&#32;=&#32;1.0&#32;*&#32;<link linkend="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46">drawRandomUniformInteger</link>(min,max);&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numeratorVector[i]&#32;=&#32;numer;
<anchor xml:id="_angle_construction_8hpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;angle&#32;=&#32;(double)(numer/piDenominator)&#32;*&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;angle;
<anchor xml:id="_angle_construction_8hpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00120"/>00120 &#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;some&#32;of&#32;random&#32;numerators</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumerator&#32;=&#32;std::accumulate(numeratorVector.begin(),&#32;numeratorVector.end(),&#32;0);
<anchor xml:id="_angle_construction_8hpp_source_1l00123"/>00123 
<anchor xml:id="_angle_construction_8hpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;remainingPositions</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;remainingPositions&#32;=&#32;totalPositions&#32;-&#32;(totalNumerator&#32;%&#32;totalPositions);
<anchor xml:id="_angle_construction_8hpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumeratorAndRemainingModPositions&#32;=&#32;(remainingPositions&#32;+&#32;totalNumerator)&#32;%&#32;totalPositions;
<anchor xml:id="_angle_construction_8hpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;assert((totalNumeratorAndRemainingModPositions&#32;==&#32;0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Total&#32;numerator&#32;values&#32;should&#32;be&#32;&#32;mod&#32;total&#32;positions&#32;equal&#32;to&#32;0,&#32;indicating&#32;2kPi&#32;multiple&quot;</emphasis>);
<anchor xml:id="_angle_construction_8hpp_source_1l00129"/>00129 
<anchor xml:id="_angle_construction_8hpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;qreal&#32;finalAngle&#32;=&#32;(1.0)*(remainingPositions/piDenominator)*M_PI&#32;+&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;qubitAngles[numQubits-1]&#32;=&#32;finalAngle;
<anchor xml:id="_angle_construction_8hpp_source_1l00132"/>00132 
<anchor xml:id="_angle_construction_8hpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00138"/>00138 }
<anchor xml:id="_angle_construction_8hpp_source_1l00139"/>00139 
<anchor xml:id="_angle_construction_8hpp_source_1l00140"/>00140 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00141"/>00141 <emphasis role="comment">&#32;&#32;&#32;&#32;Apply&#32;rotation&#32;of&#32;angle&#32;to&#32;qureg</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00142"/>00142 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00143"/><link linkend="_angle_construction_8hpp_1a6647ed996ec54a9137e68e6c6317e8ee">00143</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_angle_construction_8hpp_1a6647ed996ec54a9137e68e6c6317e8ee">addAngleRotateZgate</link>(Qureg&#32;qureg,&#32;std::vector&lt;qreal&gt;&#32;qubitAngles){
<anchor xml:id="_angle_construction_8hpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=0;&#32;i&#32;&lt;&#32;qureg.numQubitsRepresented;&#32;i++){
<anchor xml:id="_angle_construction_8hpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotateZ&#32;(qureg,&#32;i,&#32;qubitAngles[i]);
<anchor xml:id="_angle_construction_8hpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;}
<anchor xml:id="_angle_construction_8hpp_source_1l00147"/>00147 }
<anchor xml:id="_angle_construction_8hpp_source_1l00148"/>00148 
<anchor xml:id="_angle_construction_8hpp_source_1l00149"/>00149 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00150"/>00150 <emphasis role="comment">&#32;&#32;&#32;&#32;Every&#32;other&#32;angle&#32;is&#32;(elements:&#32;1,3,5,...)&#32;0</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00151"/>00151 <emphasis role="comment">&#32;&#32;&#32;&#32;Total&#32;sum&#32;of&#32;anlges&#32;is&#32;multiple&#32;of&#32;2pi</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00152"/>00152 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00153"/><link linkend="_angle_construction_8hpp_1a0804b07ffb2bea2c7ac8cba482a88d62">00153</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1a0804b07ffb2bea2c7ac8cba482a88d62">initRandomPiOnNEveryOtherAnglesMod2kPi</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits,&#32;<emphasis role="keywordtype">int</emphasis>&#32;piDenominator){
<anchor xml:id="_angle_construction_8hpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;uniform&#32;distribution&#32;for&#32;the&#32;range</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min&#32;=&#32;0;
<anchor xml:id="_angle_construction_8hpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max&#32;=&#32;2*piDenominator&#32;-&#32;1;
<anchor xml:id="_angle_construction_8hpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalPositions&#32;=&#32;2*piDenominator;
<anchor xml:id="_angle_construction_8hpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Populate&#32;angle&#32;vector</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;numeratorVector(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;numQubits-1;&#32;i++){
<anchor xml:id="_angle_construction_8hpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i%2==0){
<anchor xml:id="_angle_construction_8hpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;numer&#32;=&#32;1.0&#32;*&#32;<link linkend="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46">drawRandomUniformInteger</link>(min+1,max);&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numeratorVector[i]&#32;=&#32;numer;
<anchor xml:id="_angle_construction_8hpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;angle&#32;=&#32;(double)(numer/piDenominator)&#32;*&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;angle;
<anchor xml:id="_angle_construction_8hpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(i%2==1){
<anchor xml:id="_angle_construction_8hpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;0.0;
<anchor xml:id="_angle_construction_8hpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_angle_construction_8hpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//nothing</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_angle_construction_8hpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00177"/>00177 &#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;some&#32;of&#32;random&#32;numerators</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumerator&#32;=&#32;std::accumulate(numeratorVector.begin(),&#32;numeratorVector.end(),&#32;0);
<anchor xml:id="_angle_construction_8hpp_source_1l00180"/>00180 
<anchor xml:id="_angle_construction_8hpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;remainingPositions</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;remainingPositions&#32;=&#32;totalPositions&#32;-&#32;(totalNumerator&#32;%&#32;totalPositions);
<anchor xml:id="_angle_construction_8hpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumeratorAndRemainingModPositions&#32;=&#32;(remainingPositions&#32;+&#32;totalNumerator)&#32;%&#32;totalPositions;
<anchor xml:id="_angle_construction_8hpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;assert((totalNumeratorAndRemainingModPositions&#32;==&#32;0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Total&#32;numerator&#32;values&#32;should&#32;be&#32;&#32;mod&#32;total&#32;positions&#32;equal&#32;to&#32;0,&#32;indicating&#32;2kPi&#32;multiple&quot;</emphasis>);
<anchor xml:id="_angle_construction_8hpp_source_1l00186"/>00186 
<anchor xml:id="_angle_construction_8hpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;qreal&#32;finalAngle&#32;=&#32;(1.0)*(remainingPositions/piDenominator)*M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;qubitAngles[numQubits-1]&#32;=&#32;finalAngle;
<anchor xml:id="_angle_construction_8hpp_source_1l00189"/>00189 
<anchor xml:id="_angle_construction_8hpp_source_1l00190"/>00190 
<anchor xml:id="_angle_construction_8hpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00193"/>00193 }
<anchor xml:id="_angle_construction_8hpp_source_1l00194"/>00194 
<anchor xml:id="_angle_construction_8hpp_source_1l00195"/>00195 
<anchor xml:id="_angle_construction_8hpp_source_1l00196"/>00196 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00197"/>00197 <emphasis role="comment">&#32;&#32;&#32;&#32;Every&#32;other&#32;angle&#32;is&#32;(elements:&#32;1,3,5,...)&#32;0</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00198"/>00198 <emphasis role="comment">&#32;&#32;&#32;&#32;Total&#32;sum&#32;of&#32;anlges&#32;is&#32;multiple&#32;of&#32;2pi&#32;+&#32;pi</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00199"/>00199 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00200"/><link linkend="_angle_construction_8hpp_1ac35939429a8657a1f33dad419e7812c1">00200</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1ac35939429a8657a1f33dad419e7812c1">initRandomPiOnNEveryOtherAnglesMod2kPiPlusPi</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits,&#32;<emphasis role="keywordtype">int</emphasis>&#32;piDenominator){
<anchor xml:id="_angle_construction_8hpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;uniform&#32;distribution&#32;for&#32;the&#32;range</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min&#32;=&#32;0;
<anchor xml:id="_angle_construction_8hpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max&#32;=&#32;2*piDenominator&#32;-&#32;1;
<anchor xml:id="_angle_construction_8hpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalPositions&#32;=&#32;2*piDenominator;
<anchor xml:id="_angle_construction_8hpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Populate&#32;angle&#32;vector</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;numeratorVector(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;numQubits-1;&#32;i++){
<anchor xml:id="_angle_construction_8hpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i%2==0){
<anchor xml:id="_angle_construction_8hpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;numer&#32;=&#32;1.0&#32;*&#32;<link linkend="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46">drawRandomUniformInteger</link>(min+1,max);&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numeratorVector[i]&#32;=&#32;numer;
<anchor xml:id="_angle_construction_8hpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;angle&#32;=&#32;(double)(numer/piDenominator)&#32;*&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;angle;
<anchor xml:id="_angle_construction_8hpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(i%2==1){
<anchor xml:id="_angle_construction_8hpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;0.0;
<anchor xml:id="_angle_construction_8hpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_angle_construction_8hpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//nothing</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_angle_construction_8hpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00223"/>00223 &#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;some&#32;of&#32;random&#32;numerators</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumerator&#32;=&#32;std::accumulate(numeratorVector.begin(),&#32;numeratorVector.end(),&#32;0);
<anchor xml:id="_angle_construction_8hpp_source_1l00226"/>00226 
<anchor xml:id="_angle_construction_8hpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;remainingPositions</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;remainingPositions&#32;=&#32;totalPositions&#32;-&#32;(totalNumerator&#32;%&#32;totalPositions);
<anchor xml:id="_angle_construction_8hpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumeratorAndRemainingModPositions&#32;=&#32;(remainingPositions&#32;+&#32;totalNumerator)&#32;%&#32;totalPositions;
<anchor xml:id="_angle_construction_8hpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;assert((totalNumeratorAndRemainingModPositions&#32;==&#32;0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Total&#32;numerator&#32;values&#32;should&#32;be&#32;&#32;mod&#32;total&#32;positions&#32;equal&#32;to&#32;0,&#32;indicating&#32;2kPi&#32;multiple&quot;</emphasis>);
<anchor xml:id="_angle_construction_8hpp_source_1l00232"/>00232 
<anchor xml:id="_angle_construction_8hpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;qreal&#32;finalAngle&#32;=&#32;(1.0)*(remainingPositions/piDenominator)*M_PI&#32;+&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;qubitAngles[numQubits-1]&#32;=&#32;finalAngle;
<anchor xml:id="_angle_construction_8hpp_source_1l00235"/>00235 
<anchor xml:id="_angle_construction_8hpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00241"/>00241 }
<anchor xml:id="_angle_construction_8hpp_source_1l00242"/>00242 
<anchor xml:id="_angle_construction_8hpp_source_1l00243"/>00243 
</programlisting></section>
