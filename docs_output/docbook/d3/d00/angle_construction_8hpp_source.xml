<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_angle_construction_8hpp_source" xml:lang="en-US">
<title>angleConstruction.hpp</title>
<indexterm><primary>src/quantumGraphs/angleConstruction.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_angle_construction_8hpp_source_1l00001"/>00001 
<anchor xml:id="_angle_construction_8hpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;Title&#32;&#32;:&#32;angleConstruction.hpp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;Author&#32;:&#32;Jonathan&#32;Miller&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;Date&#32;&#32;&#32;:&#32;20230425&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00005"/>00005 <emphasis role="comment">//&#32;Aim&#32;&#32;&#32;&#32;:&#32;Construct&#32;angles&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00007"/>00007 <emphasis role="comment"></emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00008"/>00008 
<anchor xml:id="_angle_construction_8hpp_source_1l00009"/>00009 
<anchor xml:id="_angle_construction_8hpp_source_1l00010"/>00010 
<anchor xml:id="_angle_construction_8hpp_source_1l00020"/><link linkend="_angle_construction_8hpp_1aabc90c9d60fe6133e0143eda8db51906">00020</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1aabc90c9d60fe6133e0143eda8db51906">initAllAnglesZero</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits)&#32;{
<anchor xml:id="_angle_construction_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits,&#32;0.0);
<anchor xml:id="_angle_construction_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00023"/>00023 }
<anchor xml:id="_angle_construction_8hpp_source_1l00024"/>00024 
<anchor xml:id="_angle_construction_8hpp_source_1l00025"/>00025 
<anchor xml:id="_angle_construction_8hpp_source_1l00026"/>00026 
<anchor xml:id="_angle_construction_8hpp_source_1l00037"/><link linkend="_angle_construction_8hpp_1ac940c0b993f5f0e21dc74a2ac2f3fc7a">00037</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1ac940c0b993f5f0e21dc74a2ac2f3fc7a">initAllAnglesSame</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits,&#32;qreal&#32;angle)&#32;{
<anchor xml:id="_angle_construction_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits,&#32;angle);
<anchor xml:id="_angle_construction_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00040"/>00040 }
<anchor xml:id="_angle_construction_8hpp_source_1l00041"/>00041 
<anchor xml:id="_angle_construction_8hpp_source_1l00042"/>00042 
<anchor xml:id="_angle_construction_8hpp_source_1l00043"/>00043 
<anchor xml:id="_angle_construction_8hpp_source_1l00055"/><link linkend="_angle_construction_8hpp_1aad84f8117e971acc869f15e6a616f195">00055</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1aad84f8117e971acc869f15e6a616f195">initRandomPiOnNAngles</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits,&#32;<emphasis role="keywordtype">int</emphasis>&#32;piDenominator)&#32;{
<anchor xml:id="_angle_construction_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;uniform&#32;distribution&#32;for&#32;the&#32;range</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min&#32;=&#32;0;
<anchor xml:id="_angle_construction_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max&#32;=&#32;2&#32;*&#32;piDenominator&#32;-&#32;1;
<anchor xml:id="_angle_construction_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Populate&#32;angle&#32;vector</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numQubits;&#32;i++)&#32;{
<anchor xml:id="_angle_construction_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;numer&#32;=&#32;1.0&#32;*&#32;<link linkend="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46">drawRandomUniformInteger</link>(min,&#32;max);
<anchor xml:id="_angle_construction_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;angle&#32;=&#32;(double)(numer&#32;/&#32;piDenominator)&#32;*&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;angle;
<anchor xml:id="_angle_construction_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;}
<anchor xml:id="_angle_construction_8hpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00069"/>00069 }
<anchor xml:id="_angle_construction_8hpp_source_1l00070"/>00070 
<anchor xml:id="_angle_construction_8hpp_source_1l00071"/>00071 
<anchor xml:id="_angle_construction_8hpp_source_1l00072"/>00072 
<anchor xml:id="_angle_construction_8hpp_source_1l00073"/>00073 
<anchor xml:id="_angle_construction_8hpp_source_1l00074"/>00074 
<anchor xml:id="_angle_construction_8hpp_source_1l00089"/><link linkend="_angle_construction_8hpp_1a4711c7e692e9e1c3dd07c4e5255b41d1">00089</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1a4711c7e692e9e1c3dd07c4e5255b41d1">initRandomPiOnNAnglesMod2kPi</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits,&#32;<emphasis role="keywordtype">int</emphasis>&#32;piDenominator)&#32;{
<anchor xml:id="_angle_construction_8hpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;uniform&#32;distribution&#32;for&#32;the&#32;range</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min&#32;=&#32;0;
<anchor xml:id="_angle_construction_8hpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max&#32;=&#32;2&#32;*&#32;piDenominator&#32;-&#32;1;
<anchor xml:id="_angle_construction_8hpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalPositions&#32;=&#32;2&#32;*&#32;piDenominator;
<anchor xml:id="_angle_construction_8hpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Populate&#32;angle&#32;vector</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;numeratorVector(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numQubits&#32;-&#32;1;&#32;i++)&#32;{
<anchor xml:id="_angle_construction_8hpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;numer&#32;=&#32;1.0&#32;*&#32;<link linkend="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46">drawRandomUniformInteger</link>(min,&#32;max);
<anchor xml:id="_angle_construction_8hpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numeratorVector[i]&#32;=&#32;numer;
<anchor xml:id="_angle_construction_8hpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;angle&#32;=&#32;(double)(numer&#32;/&#32;piDenominator)&#32;*&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;angle;
<anchor xml:id="_angle_construction_8hpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;}
<anchor xml:id="_angle_construction_8hpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;sum&#32;of&#32;random&#32;numerators</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumerator&#32;=&#32;std::accumulate(numeratorVector.begin(),&#32;numeratorVector.end(),&#32;0);
<anchor xml:id="_angle_construction_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;remaining&#32;positions</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;remainingPositions&#32;=&#32;totalPositions&#32;-&#32;(totalNumerator&#32;%&#32;totalPositions);
<anchor xml:id="_angle_construction_8hpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumeratorAndRemainingModPositions&#32;=&#32;(remainingPositions&#32;+&#32;totalNumerator)&#32;%&#32;totalPositions;
<anchor xml:id="_angle_construction_8hpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;assert((totalNumeratorAndRemainingModPositions&#32;==&#32;0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Total&#32;numerator&#32;values&#32;should&#32;be&#32;mod&#32;total&#32;positions&#32;equal&#32;to&#32;0,&#32;indicating&#32;a&#32;2kPi&#32;multiple&quot;</emphasis>);
<anchor xml:id="_angle_construction_8hpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;qreal&#32;finalAngle&#32;=&#32;(1.0)&#32;*&#32;(remainingPositions&#32;/&#32;piDenominator)&#32;*&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;qubitAngles[numQubits&#32;-&#32;1]&#32;=&#32;finalAngle;
<anchor xml:id="_angle_construction_8hpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00118"/>00118 }
<anchor xml:id="_angle_construction_8hpp_source_1l00119"/>00119 
<anchor xml:id="_angle_construction_8hpp_source_1l00120"/>00120 
<anchor xml:id="_angle_construction_8hpp_source_1l00121"/>00121 
<anchor xml:id="_angle_construction_8hpp_source_1l00122"/>00122 
<anchor xml:id="_angle_construction_8hpp_source_1l00123"/>00123 
<anchor xml:id="_angle_construction_8hpp_source_1l00138"/><link linkend="_angle_construction_8hpp_1adde2e56cefa79b49346bc9e560b4430b">00138</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1adde2e56cefa79b49346bc9e560b4430b">initRandomPiOnNAnglesMod2kPiPlusPi</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits,&#32;<emphasis role="keywordtype">int</emphasis>&#32;piDenominator)&#32;{
<anchor xml:id="_angle_construction_8hpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;uniform&#32;distribution&#32;for&#32;the&#32;range</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min&#32;=&#32;0;
<anchor xml:id="_angle_construction_8hpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max&#32;=&#32;2&#32;*&#32;piDenominator&#32;-&#32;1;
<anchor xml:id="_angle_construction_8hpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalPositions&#32;=&#32;2&#32;*&#32;piDenominator;
<anchor xml:id="_angle_construction_8hpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Populate&#32;angle&#32;vector</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;numeratorVector(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numQubits&#32;-&#32;1;&#32;i++)&#32;{
<anchor xml:id="_angle_construction_8hpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;numer&#32;=&#32;1.0&#32;*&#32;<link linkend="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46">drawRandomUniformInteger</link>(min,&#32;max);
<anchor xml:id="_angle_construction_8hpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numeratorVector[i]&#32;=&#32;numer;
<anchor xml:id="_angle_construction_8hpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;angle&#32;=&#32;(double)(numer&#32;/&#32;piDenominator)&#32;*&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;angle;
<anchor xml:id="_angle_construction_8hpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;}
<anchor xml:id="_angle_construction_8hpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;sum&#32;of&#32;random&#32;numerators</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumerator&#32;=&#32;std::accumulate(numeratorVector.begin(),&#32;numeratorVector.end(),&#32;0);
<anchor xml:id="_angle_construction_8hpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;remaining&#32;positions</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;remainingPositions&#32;=&#32;totalPositions&#32;-&#32;(totalNumerator&#32;%&#32;totalPositions);
<anchor xml:id="_angle_construction_8hpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumeratorAndRemainingModPositions&#32;=&#32;(remainingPositions&#32;+&#32;totalNumerator)&#32;%&#32;totalPositions;
<anchor xml:id="_angle_construction_8hpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;assert((totalNumeratorAndRemainingModPositions&#32;==&#32;0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Total&#32;numerator&#32;values&#32;should&#32;be&#32;mod&#32;total&#32;positions&#32;equal&#32;to&#32;0,&#32;indicating&#32;a&#32;2kPi&#32;multiple&quot;</emphasis>);
<anchor xml:id="_angle_construction_8hpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;qreal&#32;finalAngle&#32;=&#32;(1.0)&#32;*&#32;(remainingPositions&#32;/&#32;piDenominator)&#32;*&#32;M_PI&#32;+&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;qubitAngles[numQubits&#32;-&#32;1]&#32;=&#32;finalAngle;
<anchor xml:id="_angle_construction_8hpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00167"/>00167 }
<anchor xml:id="_angle_construction_8hpp_source_1l00168"/>00168 
<anchor xml:id="_angle_construction_8hpp_source_1l00169"/>00169 
<anchor xml:id="_angle_construction_8hpp_source_1l00170"/>00170 
<anchor xml:id="_angle_construction_8hpp_source_1l00182"/><link linkend="_angle_construction_8hpp_1a6647ed996ec54a9137e68e6c6317e8ee">00182</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_angle_construction_8hpp_1a6647ed996ec54a9137e68e6c6317e8ee">addAngleRotateZgate</link>(Qureg&#32;qureg,&#32;std::vector&lt;qreal&gt;&#32;qubitAngles)&#32;{
<anchor xml:id="_angle_construction_8hpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00184"/>00184 <emphasis role="comment">&#32;&#32;&#32;&#32;Apply&#32;rotation&#32;of&#32;angle&#32;to&#32;qureg</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00185"/>00185 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;qureg.numQubitsRepresented;&#32;i++)&#32;{
<anchor xml:id="_angle_construction_8hpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotateZ(qureg,&#32;i,&#32;qubitAngles[i]);
<anchor xml:id="_angle_construction_8hpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;}
<anchor xml:id="_angle_construction_8hpp_source_1l00189"/>00189 }
<anchor xml:id="_angle_construction_8hpp_source_1l00190"/>00190 
<anchor xml:id="_angle_construction_8hpp_source_1l00191"/>00191 
<anchor xml:id="_angle_construction_8hpp_source_1l00192"/>00192 
<anchor xml:id="_angle_construction_8hpp_source_1l00205"/><link linkend="_angle_construction_8hpp_1a0804b07ffb2bea2c7ac8cba482a88d62">00205</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1a0804b07ffb2bea2c7ac8cba482a88d62">initRandomPiOnNEveryOtherAnglesMod2kPi</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits,&#32;<emphasis role="keywordtype">int</emphasis>&#32;piDenominator){
<anchor xml:id="_angle_construction_8hpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00208"/>00208 <emphasis role="comment">&#32;&#32;&#32;&#32;Every&#32;other&#32;angle&#32;is&#32;(elements:&#32;1,3,5,...)&#32;0</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00209"/>00209 <emphasis role="comment">&#32;&#32;&#32;&#32;Total&#32;sum&#32;of&#32;anlges&#32;is&#32;multiple&#32;of&#32;2pi</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00210"/>00210 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;uniform&#32;distribution&#32;for&#32;the&#32;range</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min&#32;=&#32;0;
<anchor xml:id="_angle_construction_8hpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max&#32;=&#32;2*piDenominator&#32;-&#32;1;
<anchor xml:id="_angle_construction_8hpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalPositions&#32;=&#32;2*piDenominator;
<anchor xml:id="_angle_construction_8hpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Populate&#32;angle&#32;vector</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;numeratorVector(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;numQubits-1;&#32;i++){
<anchor xml:id="_angle_construction_8hpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i%2==0){
<anchor xml:id="_angle_construction_8hpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;numer&#32;=&#32;1.0&#32;*&#32;<link linkend="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46">drawRandomUniformInteger</link>(min+1,max);&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numeratorVector[i]&#32;=&#32;numer;
<anchor xml:id="_angle_construction_8hpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;angle&#32;=&#32;(double)(numer/piDenominator)&#32;*&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;angle;
<anchor xml:id="_angle_construction_8hpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(i%2==1){
<anchor xml:id="_angle_construction_8hpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;0.0;
<anchor xml:id="_angle_construction_8hpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_angle_construction_8hpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//nothing</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_angle_construction_8hpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00232"/>00232 &#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;some&#32;of&#32;random&#32;numerators</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumerator&#32;=&#32;std::accumulate(numeratorVector.begin(),&#32;numeratorVector.end(),&#32;0);
<anchor xml:id="_angle_construction_8hpp_source_1l00235"/>00235 
<anchor xml:id="_angle_construction_8hpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;remainingPositions</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;remainingPositions&#32;=&#32;totalPositions&#32;-&#32;(totalNumerator&#32;%&#32;totalPositions);
<anchor xml:id="_angle_construction_8hpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumeratorAndRemainingModPositions&#32;=&#32;(remainingPositions&#32;+&#32;totalNumerator)&#32;%&#32;totalPositions;
<anchor xml:id="_angle_construction_8hpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;assert((totalNumeratorAndRemainingModPositions&#32;==&#32;0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Total&#32;numerator&#32;values&#32;should&#32;be&#32;&#32;mod&#32;total&#32;positions&#32;equal&#32;to&#32;0,&#32;indicating&#32;2kPi&#32;multiple&quot;</emphasis>);
<anchor xml:id="_angle_construction_8hpp_source_1l00241"/>00241 
<anchor xml:id="_angle_construction_8hpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;qreal&#32;finalAngle&#32;=&#32;(1.0)*(remainingPositions/piDenominator)*M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;qubitAngles[numQubits-1]&#32;=&#32;finalAngle;
<anchor xml:id="_angle_construction_8hpp_source_1l00244"/>00244 
<anchor xml:id="_angle_construction_8hpp_source_1l00245"/>00245 
<anchor xml:id="_angle_construction_8hpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00248"/>00248 }
<anchor xml:id="_angle_construction_8hpp_source_1l00249"/>00249 
<anchor xml:id="_angle_construction_8hpp_source_1l00250"/>00250 
<anchor xml:id="_angle_construction_8hpp_source_1l00251"/>00251 
<anchor xml:id="_angle_construction_8hpp_source_1l00264"/><link linkend="_angle_construction_8hpp_1ac35939429a8657a1f33dad419e7812c1">00264</link> std::vector&lt;qreal&gt;&#32;<link linkend="_angle_construction_8hpp_1ac35939429a8657a1f33dad419e7812c1">initRandomPiOnNEveryOtherAnglesMod2kPiPlusPi</link>(<emphasis role="keywordtype">int</emphasis>&#32;numQubits,&#32;<emphasis role="keywordtype">int</emphasis>&#32;piDenominator){
<anchor xml:id="_angle_construction_8hpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00266"/>00266 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Every&#32;other&#32;angle&#32;is&#32;(elements:&#32;1,3,5,...)&#32;0</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00267"/>00267 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Total&#32;sum&#32;of&#32;anlges&#32;is&#32;multiple&#32;of&#32;2pi&#32;+&#32;pi</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00268"/>00268 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>&#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;uniform&#32;distribution&#32;for&#32;the&#32;range</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min&#32;=&#32;0;
<anchor xml:id="_angle_construction_8hpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max&#32;=&#32;2*piDenominator&#32;-&#32;1;
<anchor xml:id="_angle_construction_8hpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalPositions&#32;=&#32;2*piDenominator;
<anchor xml:id="_angle_construction_8hpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Populate&#32;angle&#32;vector</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;numeratorVector(numQubits);
<anchor xml:id="_angle_construction_8hpp_source_1l00278"/>00278 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;numQubits-1;&#32;i++){
<anchor xml:id="_angle_construction_8hpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i%2==0){
<anchor xml:id="_angle_construction_8hpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;numer&#32;=&#32;1.0&#32;*&#32;<link linkend="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46">drawRandomUniformInteger</link>(min+1,max);&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numeratorVector[i]&#32;=&#32;numer;
<anchor xml:id="_angle_construction_8hpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;angle&#32;=&#32;(double)(numer/piDenominator)&#32;*&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;angle;
<anchor xml:id="_angle_construction_8hpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(i%2==1){
<anchor xml:id="_angle_construction_8hpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles[i]&#32;=&#32;0.0;
<anchor xml:id="_angle_construction_8hpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_angle_construction_8hpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//nothing</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_angle_construction_8hpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00290"/>00290 &#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;some&#32;of&#32;random&#32;numerators</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumerator&#32;=&#32;std::accumulate(numeratorVector.begin(),&#32;numeratorVector.end(),&#32;0);
<anchor xml:id="_angle_construction_8hpp_source_1l00293"/>00293 
<anchor xml:id="_angle_construction_8hpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;remainingPositions</emphasis>
<anchor xml:id="_angle_construction_8hpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;remainingPositions&#32;=&#32;totalPositions&#32;-&#32;(totalNumerator&#32;%&#32;totalPositions);
<anchor xml:id="_angle_construction_8hpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalNumeratorAndRemainingModPositions&#32;=&#32;(remainingPositions&#32;+&#32;totalNumerator)&#32;%&#32;totalPositions;
<anchor xml:id="_angle_construction_8hpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;assert((totalNumeratorAndRemainingModPositions&#32;==&#32;0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Total&#32;numerator&#32;values&#32;should&#32;be&#32;&#32;mod&#32;total&#32;positions&#32;equal&#32;to&#32;0,&#32;indicating&#32;2kPi&#32;multiple&quot;</emphasis>);
<anchor xml:id="_angle_construction_8hpp_source_1l00299"/>00299 
<anchor xml:id="_angle_construction_8hpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;qreal&#32;finalAngle&#32;=&#32;(1.0)*(remainingPositions/piDenominator)*M_PI&#32;+&#32;M_PI;
<anchor xml:id="_angle_construction_8hpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;qubitAngles[numQubits-1]&#32;=&#32;finalAngle;
<anchor xml:id="_angle_construction_8hpp_source_1l00302"/>00302 
<anchor xml:id="_angle_construction_8hpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubitAngles;
<anchor xml:id="_angle_construction_8hpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;
<anchor xml:id="_angle_construction_8hpp_source_1l00308"/>00308 }
<anchor xml:id="_angle_construction_8hpp_source_1l00309"/>00309 
<anchor xml:id="_angle_construction_8hpp_source_1l00310"/>00310 
</programlisting></section>
