<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_20230314___test_linear_cluster_state___v1_8cpp" xml:lang="en-US">
<title>src/archive/20230314_TestLinearClusterState_V1.cpp File Reference</title>
<indexterm><primary>src/archive/20230314_TestLinearClusterState_V1.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;QuEST.h&gt;<?linebreak?>#include &lt;vector&gt;<?linebreak?>#include &lt;iostream&gt;<?linebreak?>#include &lt;string&gt;<?linebreak?>#include &quot;20230314_Functions_V1.hpp&quot;<?linebreak?></programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_20230314___test_linear_cluster_state___v1_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_20230314___test_linear_cluster_state___v1_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4"/><section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>20230314_TestLinearClusterState_V1.cpp</secondary></indexterm>
<indexterm><primary>20230314_TestLinearClusterState_V1.cpp</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main ( )</computeroutput></para><para>
Definition at line <link linkend="_20230314___test_linear_cluster_state___v1_8cpp_source_1l00022">22</link> of file <link linkend="_20230314___test_linear_cluster_state___v1_8cpp_source">20230314_TestLinearClusterState_V1.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00023 &#32;&#32;&#32;&#32;
00024 &#32;&#32;
00025 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;parameters</emphasis>
00026 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numberQubits&#32;=&#32;5;
00027 &#32;&#32;&#32;&#32;
00028 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Select&#32;a&#32;qubit&#32;index</emphasis>
00029 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;currentQubit&#32;=&#32;3;
00030 
00031 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;vector&#32;representing&#32;a&#32;linear&#32;cluster&#32;graph</emphasis>
00032 &#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;pathGraph&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1aa6c7ea81b30e713a1f641e9a86e5f0a8">getPathGraph</link>(numberQubits);
00033 
00034 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;future&#32;qubit&#32;using&#32;pathGraph&#32;and&#32;current&#32;qubit</emphasis>
00035 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;future_qubit_linear_cluster&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1adf1055c60f73eb56e5e51d97b15feeaf">getFutureQubitPathGraph</link>(pathGraph&#32;,currentQubit);
00036 
00037 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;past&#32;qubit&#32;using&#32;pathGraph&#32;and&#32;current&#32;qubit</emphasis>
00038 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;qubitBefore_linear_cluster&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1a1be0a6fc146b59a21929f000546f57a4">getPastQubitPathGraph</link>(pathGraph&#32;,currentQubit);
00039 
00040 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;neighbourhood&#32;size</emphasis>
00041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size_neighbour_set&#32;=&#32;<link linkend="_20230313___m_b_q_c___v2_8c_1ab81ffa7099ed1d954baf7af535ab3143">getOpenNeighbourhoodSizePathGraph</link>(pathGraph&#32;,currentQubit);
00042 &#32;&#32;&#32;&#32;
00043 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ger&#32;neighbours</emphasis>
00044 &#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;neighbours&#32;=&#32;<link linkend="_20230313___m_b_q_c___v2_8c_1a5aa77a698227173b06b1c3d363215699">getOpenNeighbourhoodPathGraph</link>(pathGraph&#32;,currentQubit);
00045 
00046 
00047 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;The&#32;number&#32;of&#32;qubits&#32;is:&#32;%d\n&quot;</emphasis>,&#32;numberQubits);
00048 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;The&#32;current&#32;qubit&#32;is:&#32;%d\n&quot;</emphasis>,currentQubit);
00049 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;The&#32;Past&#32;qubit&#32;is:&#32;%d\n&quot;</emphasis>,qubitBefore_linear_cluster);
00050 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;The&#32;future&#32;qubit&#32;is:&#32;%d\n&quot;</emphasis>,future_qubit_linear_cluster);
00051 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Size&#32;of&#32;neighbour&#32;set:&#32;%d\n&quot;</emphasis>,size_neighbour_set);&#32;&#32;
00052 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;The&#32;neighbourhoods&#32;are:&#32;&quot;</emphasis>);
00053 &#32;&#32;&#32;&#32;
00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i:&#32;neighbours)
00055 &#32;&#32;&#32;&#32;{
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;i&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
00057 &#32;&#32;&#32;&#32;}
00058 &#32;&#32;&#32;&#32;
00059 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
00060 &#32;&#32;&#32;&#32;
00061 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;The&#32;linear&#32;cluster&#32;is&#32;written&#32;out&#32;as:&#32;\n&quot;</emphasis>);
00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i:&#32;pathGraph)
00063 &#32;&#32;&#32;&#32;{
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;i&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
00065 &#32;&#32;&#32;&#32;}
00066 
00067 
00068 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;that&#32;the&#32;future&#32;qubit&#32;is&#32;equivalent&#32;to&#32;the&#32;current&#32;qubit&#32;+1</emphasis>
00069 &#32;&#32;&#32;&#32;assert(future_qubit_linear_cluster&#32;==&#32;currentQubit&#32;+&#32;1&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Incorrect&#32;future&#32;qubit&quot;</emphasis>);
00070 
00071 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;that&#32;the&#32;future&#32;qubit&#32;is&#32;equivalent&#32;to&#32;the&#32;current&#32;qubit&#32;-1</emphasis>
00072 &#32;&#32;&#32;&#32;assert(qubitBefore_linear_cluster&#32;==&#32;currentQubit&#32;-&#32;1&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Incorrect&#32;past&#32;qubit&quot;</emphasis>);
00073 
00074 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;</emphasis>
00075 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert&#32;that&#32;the&#32;number&#32;of&#32;qubits&#32;initialised&#32;is&#32;equivalent&#32;to&#32;the&#32;</emphasis>
00076 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;of&#32;the&#32;linear&#32;cluster&#32;vector</emphasis>
00077 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
00078 &#32;&#32;&#32;&#32;assert(numberQubits&#32;==&#32;pathGraph.size()&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;The&#32;linear&#32;cluster&#32;is&#32;not&#32;the&#32;same&#32;size&#32;as&#32;the&#32;number&#32;of&#32;qubits&#32;initialised.&quot;</emphasis>);
00079 
00080 
00081 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
00082 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Test&#32;that&#32;the&#32;size&#32;of&#32;the&#32;neighbours&#32;is&#32;equivalent&#32;to&#32;the</emphasis>
00083 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;function&#32;output&#32;based&#32;on&#32;the&#32;qubit&#32;location&#32;in&#32;the&#32;vector</emphasis>
00084 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
00085 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentQubit&#32;==&#32;pathGraph[0])
00086 &#32;&#32;&#32;&#32;{
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(size_neighbour_set&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Neighbour&#32;set&#32;shoud&#32;be&#32;size&#32;1&quot;</emphasis>);
00088 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentQubit&#32;==&#32;pathGraph[pathGraph.size()-1]){
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(size_neighbour_set&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Neighbour&#32;set&#32;shoud&#32;be&#32;size&#32;1&quot;</emphasis>);
00090 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(size_neighbour_set&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Neighbour&#32;set&#32;shoud&#32;be&#32;size&#32;2&quot;</emphasis>);
00092 &#32;&#32;&#32;&#32;}
00093 
00094 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
00095 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Test&#32;that&#32;the&#32;size&#32;of&#32;the&#32;neighbours&#32;is&#32;equivalent&#32;to&#32;the</emphasis>
00096 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;function&#32;output&#32;based&#32;on&#32;the&#32;qubit&#32;location&#32;in&#32;the&#32;vector&#32;and</emphasis>
00097 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;size&#32;of&#32;the&#32;size&#32;of&#32;the&#32;neighbours&#32;vector.</emphasis>
00098 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
00099 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentQubit&#32;==&#32;pathGraph[0])
00100 &#32;&#32;&#32;&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(neighbours.size()&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Neighbour&#32;set&#32;shoud&#32;be&#32;size&#32;1&quot;</emphasis>);
00102 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentQubit&#32;==&#32;pathGraph[pathGraph.size()-1]){
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(neighbours.size()&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Neighbour&#32;set&#32;shoud&#32;be&#32;size&#32;1&quot;</emphasis>);
00104 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(neighbours.size()&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Neighbour&#32;set&#32;shoud&#32;be&#32;size&#32;2&quot;</emphasis>);
00106 &#32;&#32;&#32;&#32;}
00107 
00108 
00109 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
00110 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterate&#32;over&#32;path&#32;graph&#32;cluster&#32;p_10</emphasis>
00111 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;NewNumberQubits&#32;=&#32;10;
00112 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;vector&#32;representing&#32;a&#32;linear&#32;cluster&#32;graph</emphasis>
00113 &#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;NewLinearCluster&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1aa6c7ea81b30e713a1f641e9a86e5f0a8">getPathGraph</link>(NewNumberQubits);
00114 
00115 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterate&#32;over&#32;all&#32;vertices,&#32;return&#32;neighbours</emphasis>
00116 &#32;&#32;&#32;&#32;
00117 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterate&#32;over&#32;the&#32;path&#32;cluster</emphasis>
00118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;q:&#32;NewLinearCluster)
00119 &#32;&#32;&#32;&#32;{
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Qubit:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;q&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;neighbours&#32;=&#32;
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_20230313___m_b_q_c___v2_8c_1a5aa77a698227173b06b1c3d363215699">getOpenNeighbourhoodPathGraph</link>(
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NewLinearCluster&#32;,q);
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Neighbours:&#32;&quot;</emphasis>;
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;future&#32;qubit&#32;using&#32;pathGraph&#32;and&#32;current&#32;qubit</emphasis>
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;FutureQubit&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1adf1055c60f73eb56e5e51d97b15feeaf">getFutureQubitPathGraph</link>(NewLinearCluster&#32;,q);
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Current&#32;qubit:&#32;%d&#32;future&#32;qubit:&#32;%d\n&quot;</emphasis>,q,FutureQubit);
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;past&#32;qubit&#32;using&#32;pathGraph&#32;and&#32;current&#32;qubit</emphasis>
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pastQubit&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1a1be0a6fc146b59a21929f000546f57a4">getPastQubitPathGraph</link>(NewLinearCluster&#32;,q);
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Current&#32;qubit:&#32;%d&#32;past&#32;qubit:&#32;%d\n&quot;</emphasis>,q,FutureQubit);
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;n:&#32;neighbours)
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;n&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00137 &#32;&#32;&#32;&#32;}
00138 
00139 
00140 
00141 &#32;&#32;&#32;&#32;
00142 
00143 }
</programlisting></section>
</section>
</section>
