<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_20230322___test_path_cluster_m_b_q_c___v4_8cpp" xml:lang="en-US">
<title>src/archive/20230322_TestPathClusterMBQC_V4.cpp File Reference</title>
<indexterm><primary>src/archive/20230322_TestPathClusterMBQC_V4.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;QuEST.h&gt;<?linebreak?>#include &lt;vector&gt;<?linebreak?>#include &lt;iostream&gt;<?linebreak?>#include &lt;string&gt;<?linebreak?>#include &quot;20230314_Functions_V1.hpp&quot;<?linebreak?></programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_20230322___test_path_cluster_m_b_q_c___v4_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_20230322___test_path_cluster_m_b_q_c___v4_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4"/><section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>20230322_TestPathClusterMBQC_V4.cpp</secondary></indexterm>
<indexterm><primary>20230322_TestPathClusterMBQC_V4.cpp</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main ( )</computeroutput></para><para>
Definition at line <link linkend="_20230322___test_path_cluster_m_b_q_c___v4_8cpp_source_1l00011">11</link> of file <link linkend="_20230322___test_path_cluster_m_b_q_c___v4_8cpp_source">20230322_TestPathClusterMBQC_V4.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00012 &#32;&#32;&#32;&#32;&#32;
00013 &#32;&#32;&#32;&#32;QuESTEnv&#32;env&#32;=&#32;createQuESTEnv();
00014 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;parameters</emphasis>
00015 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numberQubits&#32;=&#32;5;
00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;prepare&#32;our&#32;register</emphasis>
00017 &#32;&#32;&#32;&#32;Qureg&#32;qureg&#32;=&#32;createQureg(numberQubits,&#32;env);
00018 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;qureg&#32;-&gt;&#32;|+&gt;&lt;+|</emphasis>
00019 &#32;&#32;&#32;&#32;initPlusState(qureg);&#32;&#32;
00020 
00021 
00022 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;vector&#32;representing&#32;a&#32;linear&#32;cluster&#32;graph</emphasis>
00023 &#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;pathGraph&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1aa6c7ea81b30e713a1f641e9a86e5f0a8">getPathGraph</link>(numberQubits);&#32;
00024 &#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;measuredQubitsOutcomes;
00025 &#32;&#32;&#32;&#32;vector&lt;qreal&gt;&#32;qubitAngles;
00026 &#32;&#32;&#32;&#32;vector&lt;qreal&gt;&#32;updatedQubitAngles;
00027 &#32;&#32;&#32;&#32;vector&lt;qreal&gt;&#32;XCorrectionAngle;
00028 &#32;&#32;&#32;&#32;vector&lt;qreal&gt;&#32;ZCorrectionAngle;
00029 
00030 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;apply&#32;CZ&#32;gate&#32;to&#32;entangle&#32;the&#32;circuit</emphasis>
00031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::vector&lt;int&gt;::size_type&#32;q&#32;=&#32;0;&#32;q&#32;!=&#32;pathGraph.size()-1;&#32;q++)&#32;
00032 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;controlledPhaseFlip(qureg,q,q+1);
00034 &#32;&#32;&#32;&#32;}
00035 
00036 &#32;&#32;&#32;&#32;
00037 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;initial&#32;angles</emphasis>
00038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;i&lt;numberQubits;i++)
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles.push_back(0.0);&#32;
00040 &#32;&#32;&#32;&#32;
00041 
00042 
00043 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;first&#32;updated&#32;angle&#32;to&#32;match&#32;first&#32;original&#32;angle</emphasis>
00044 &#32;&#32;&#32;&#32;
00045 
00046 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;measure&#32;first&#32;qubit</emphasis>
00047 &#32;&#32;&#32;&#32;qreal&#32;X0&#32;=&#32;0.0;
00048 &#32;&#32;&#32;&#32;qreal&#32;Z0&#32;=&#32;0.0;
00049 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;firstQubitIndex=0;
00050 &#32;&#32;&#32;&#32;updatedQubitAngles.push_back(qubitAngles[firstQubitIndex]);
00051 &#32;&#32;&#32;&#32;rotateZ(qureg,firstQubitIndex,&#32;(-1)*updatedQubitAngles[firstQubitIndex]);
00052 &#32;&#32;&#32;&#32;hadamard(qureg,firstQubitIndex);
00053 &#32;&#32;&#32;&#32;measuredQubitsOutcomes.push_back(measure(qureg,firstQubitIndex));
00054 &#32;&#32;&#32;&#32;XCorrectionAngle.push_back(X0);
00055 &#32;&#32;&#32;&#32;ZCorrectionAngle.push_back(Z0);
00056 &#32;&#32;&#32;&#32;
00057 &#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Qubit:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;firstQubitIndex&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Outcome:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;measuredQubitsOutcomes[firstQubitIndex]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Updated&#32;angle:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;updatedQubitAngles[firstQubitIndex]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;&#32;
00058 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;measure&#32;second&#32;qubit</emphasis>
00059 &#32;&#32;&#32;&#32;qreal&#32;X1;
00060 &#32;&#32;&#32;&#32;qreal&#32;Z1;
00061 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;secondQubitIndex=1;
00062 &#32;&#32;&#32;&#32;X1&#32;=&#32;pow((-1),measuredQubitsOutcomes[secondQubitIndex])*qubitAngles[secondQubitIndex];
00063 &#32;&#32;&#32;&#32;updatedQubitAngles[secondQubitIndex]&#32;=&#32;X1;
00064 &#32;&#32;&#32;&#32;rotateZ(qureg,secondQubitIndex,&#32;(-1)*updatedQubitAngles[secondQubitIndex]);
00065 &#32;&#32;&#32;&#32;hadamard(qureg,secondQubitIndex);
00066 &#32;&#32;&#32;&#32;measuredQubitsOutcomes.push_back(measure(qureg,secondQubitIndex));
00067 &#32;&#32;&#32;&#32;XCorrectionAngle.push_back(X1);
00068 &#32;&#32;&#32;&#32;ZCorrectionAngle.push_back(0.0);
00069 
00070 &#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Qubit:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;secondQubitIndex&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Outcome:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;measuredQubitsOutcomes[secondQubitIndex]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Updated&#32;angle:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;updatedQubitAngles[secondQubitIndex]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;&#32;
00071 &#32;&#32;&#32;&#32;
00072 
00073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;currentQubit=2;currentQubit&lt;numberQubits;currentQubit++)
00074 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;X;
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;Z;
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;phi;
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;phiPrime;
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;outcome;
00080 
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;X&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1a9c227d82e03f906a192a861db4ddf6ab">computeXCorrectionAnglePathGraph</link>(
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pathGraph,&#32;
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measuredQubitsOutcomes,
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles,
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentQubit);
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Z&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1acf8731fbf6fdc066d371b78a916dc431">computeZCorrectionAnglePathGraph</link>(
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pathGraph,&#32;
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measuredQubitsOutcomes,
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentQubit);
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;phiPrime&#32;=&#32;X+Z;
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotateZ(qureg,currentQubit,&#32;(-1)*phiPrime);
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hadamard(qureg,currentQubit);
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outcome&#32;=&#32;measure(qureg,currentQubit);
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XCorrectionAngle.push_back(X);
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ZCorrectionAngle.push_back(Z);
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updatedQubitAngles.push_back(phiPrime);
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measuredQubitsOutcomes.push_back(outcome);
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Qubit:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;currentQubit&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Outcome:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;outcome&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Updated&#32;angle:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;phiPrime&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;&#32;
00102 &#32;&#32;&#32;&#32;}
00103 
00104 }
</programlisting></section>
</section>
</section>
