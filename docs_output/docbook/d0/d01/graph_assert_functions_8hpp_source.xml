<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_graph_assert_functions_8hpp_source" xml:lang="en-US">
<title>graphAssertFunctions.hpp</title>
<indexterm><primary>src/testFunctions/graphAssertFunctions.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_graph_assert_functions_8hpp_source_1l00001"/>00001 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;Title&#32;&#32;:&#32;graphAssertFunctions.hpp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;Author&#32;:&#32;Jonathan&#32;Miller&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;Date&#32;&#32;&#32;:&#32;20230425&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00005"/>00005 <emphasis role="comment">//&#32;Aim&#32;&#32;&#32;&#32;:&#32;Construct&#32;assertion&#32;functions&#32;for&#32;graphs&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00007"/>00007 <emphasis role="comment"></emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00008"/>00008 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00009"/>00009 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00010"/>00010 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00011"/>00011 <emphasis role="comment">&#32;&#32;&#32;&#32;Functions&#32;to&#32;be&#32;used&#32;to&#32;test&#32;graph&#32;properties.&#32;</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00012"/>00012 <emphasis role="comment">&#32;&#32;&#32;&#32;List&#32;of&#32;functions&#32;used&#32;in&#32;general&#32;graph&#32;assertions</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00013"/>00013 <emphasis role="comment">&#32;&#32;&#32;&#32;1.&#32;assertHandShakeLemma</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00014"/>00014 <emphasis role="comment">&#32;&#32;&#32;&#32;2.&#32;assertPathGraphMinMaxDegrees</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00015"/>00015 <emphasis role="comment">&#32;&#32;&#32;&#32;3.&#32;assertDegreeSetLatticeGraph</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00016"/>00016 <emphasis role="comment"></emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00017"/>00017 <emphasis role="comment">&#32;&#32;&#32;&#32;assertHandShakeLemma</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00018"/>00018 <emphasis role="comment">&#32;&#32;&#32;&#32;The&#32;hand&#32;shake&#32;lemma&#32;states&#32;that&#32;the&#32;sum&#32;of&#32;degrees&#32;is&#32;equivalent&#32;to&#32;two&#32;times&#32;the&#32;number&#32;of&#32;edges</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00019"/>00019 <emphasis role="comment">&#32;&#32;&#32;&#32;sum(deg(v))&#32;=&#32;2|E|&#32;for&#32;v&#32;in&#32;V</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00020"/>00020 <emphasis role="comment"></emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00021"/>00021 <emphasis role="comment">&#32;&#32;&#32;&#32;assertPathGraphMinMaxDegrees</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00022"/>00022 <emphasis role="comment">&#32;&#32;&#32;&#32;A&#32;path&#32;graph&#32;will&#32;degrees&#32;1&#32;and&#32;2</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00023"/>00023 <emphasis role="comment"></emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00024"/>00024 <emphasis role="comment">&#32;&#32;&#32;&#32;assertDegreeSetLatticeGraph</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00025"/>00025 <emphasis role="comment">&#32;&#32;&#32;&#32;A&#32;lattice&#32;graph&#32;in&#32;2d&#32;will&#32;have&#32;degrees&#32;2,3&#32;and&#32;4</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00026"/>00026 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00027"/>00027 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00028"/>00028 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00029"/>00029 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00030"/>00030 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00039"/><link linkend="_graph_assert_functions_8hpp_1a60966966368ac25fe48dbccd70490e98">00039</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graph_assert_functions_8hpp_1a60966966368ac25fe48dbccd70490e98">assertHandShakeLemma</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;graph)&#32;{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_vertices&#32;=&#32;boost::num_vertices(graph);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;boost::container::vector&lt;int&gt;&#32;degree_vector;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00043"/>00043 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;the&#32;function&#32;and&#32;print&#32;the&#32;adjacent&#32;vertices&#32;of&#32;vertex&#32;0</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;num_vertices;&#32;i++)&#32;{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;undirectedGraph::vertex_descriptor&#32;v;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;boost::vertex(i,&#32;graph);&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;degree_vector.push_back(boost::degree(v,&#32;graph));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00050"/>00050 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_edge&#32;=&#32;boost::num_edges(graph);&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sum&#32;=&#32;std::accumulate(degree_vector.begin(),&#32;degree_vector.end(),&#32;0);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;total&#32;degree&#32;is&#32;two&#32;times&#32;the&#32;edge&#32;set&quot;</emphasis>&#32;&amp;&amp;&#32;sum&#32;==&#32;2&#32;*&#32;num_edge));
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00054"/>00054 }
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00055"/>00055 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00056"/>00056 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00057"/>00057 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00066"/><link linkend="_graph_assert_functions_8hpp_1a781ea29934c2f8c5c65a73075bc13da1">00066</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graph_assert_functions_8hpp_1a781ea29934c2f8c5c65a73075bc13da1">assertPathGraphMinMaxDegrees</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;graph)&#32;{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_vertices&#32;=&#32;boost::num_vertices(graph);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;boost::container::vector&lt;int&gt;&#32;degree_vector;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00069"/>00069 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;the&#32;degree&#32;of&#32;each&#32;vertex</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;num_vertices;&#32;i++)&#32;{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;undirectedGraph::vertex_descriptor&#32;v;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;boost::vertex(i,&#32;graph);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;degree_vector.push_back(boost::degree(v,&#32;graph));
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00076"/>00076 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min_degree&#32;=&#32;<link linkend="_general_assert_functions_8hpp_1aaa5eeda4e79aa986d57c3256556b6e6c">getMin</link>(degree_vector);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;minimum&#32;degree&#32;is&#32;1&quot;</emphasis>&#32;&amp;&amp;&#32;min_degree&#32;==&#32;1));
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max_degree&#32;=&#32;<link linkend="_general_assert_functions_8hpp_1af227e83a7360ec64f91773c37a905253">getMax</link>(degree_vector);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;maximum&#32;degree&#32;is&#32;2&quot;</emphasis>&#32;&amp;&amp;&#32;max_degree&#32;==&#32;2));
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00081"/>00081 }
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00082"/>00082 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00083"/>00083 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00084"/>00084 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00085"/>00085 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00094"/><link linkend="_graph_assert_functions_8hpp_1ab7b459ddc7c532fc5a37abb8760d7ca6">00094</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graph_assert_functions_8hpp_1ab7b459ddc7c532fc5a37abb8760d7ca6">assertDegreeSetLatticeGraph</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;graph)&#32;{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_vertices&#32;=&#32;boost::num_vertices(graph);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;degree_vector;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;required_deg_vector&#32;=&#32;{2,3,4};
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;the&#32;function&#32;and&#32;print&#32;the&#32;adjacent&#32;vertices&#32;of&#32;vertex&#32;0</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;num_vertices;&#32;i++)&#32;{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;undirectedGraph::vertex_descriptor&#32;v;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;boost::vertex(i,&#32;graph);&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;d&#32;=&#32;boost::degree(v,&#32;graph);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;degree_vector.push_back(d);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00106"/>00106 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;sort(&#32;degree_vector.begin(),&#32;degree_vector.end()&#32;);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;degree_vector.erase(std::unique(&#32;degree_vector.begin(),&#32;degree_vector.end()&#32;),&#32;degree_vector.end()&#32;);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00110"/>00110 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00111"/>00111 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;filt;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;std::copy_if(degree_vector.begin(),&#32;degree_vector.end(),&#32;std::back_inserter(filt),&#32;[](<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;i&#32;==&#32;2&#32;||&#32;i&#32;==&#32;3&#32;||&#32;i&#32;==&#32;4;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;});
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00116"/>00116 &#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;&amp;i:&#32;filt)&#32;{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(<emphasis role="stringliteral">&quot;Degree&#32;must&#32;be&#32;either&#32;2,3&#32;or&#32;4&quot;</emphasis>&#32;&amp;&amp;&#32;i&#32;==&#32;2&#32;||&#32;i&#32;==&#32;3&#32;||&#32;i&#32;==&#32;4);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00120"/>00120 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00121"/>00121 }
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00122"/>00122 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00123"/>00123 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00133"/><link linkend="_graph_assert_functions_8hpp_1a026973ba07ba80213ede65e64a3eb614">00133</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graph_assert_functions_8hpp_1a026973ba07ba80213ede65e64a3eb614">assertGraphNumVertices</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;graph,&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVertices){
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00134"/>00134 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_vertices&#32;=&#32;boost::num_vertices(graph);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00135"/>00135 &#32;&#32;assert(<emphasis role="stringliteral">&quot;Number&#32;of&#32;vertices&#32;in&#32;graph&#32;must&#32;equal&#32;input&quot;</emphasis>&#32;&amp;&amp;&#32;numVertices&#32;==&#32;num_vertices);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00136"/>00136 }
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00137"/>00137 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00138"/>00138 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00139"/>00139 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00149"/><link linkend="_graph_assert_functions_8hpp_1a3241060bf4552dac98da626843460bb3">00149</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graph_assert_functions_8hpp_1a3241060bf4552dac98da626843460bb3">assertFlowFunctionsPerformExpected</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;graph,&#32;<emphasis role="keywordtype">int</emphasis>&#32;numRows)&#32;{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;undirectedGraph::vertex_iterator&#32;vi,&#32;vi_end;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size_graph&#32;=&#32;boost::num_vertices(graph);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00152"/>00152 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(boost::tie(vi,&#32;vi_end)&#32;=&#32;boost::vertices(graph);&#32;vi&#32;!=&#32;vi_end;&#32;++vi)&#32;{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;vertices&#32;that&#32;are&#32;in&#32;the&#32;first&#32;column</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*vi&#32;&gt;=&#32;numRows)&#32;{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;computedVi&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a7b014587f20137aff522774eb1a05947">getLattice2DPastVertexGraph</link>(graph,&#32;*vi,&#32;numRows);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;expectedVi&#32;=&#32;*vi&#32;-&#32;numRows;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(((expectedVi&#32;==&#32;computedVi)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Expected&#32;vertex&#32;does&#32;not&#32;match&#32;computed&#32;vertex&#32;from&#32;getLattice2DPastVertexGraph&#32;function&quot;</emphasis>));
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(boost::tie(vi,&#32;vi_end)&#32;=&#32;boost::vertices(graph);&#32;vi&#32;!=&#32;vi_end;&#32;++vi)&#32;{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;vertices&#32;that&#32;are&#32;in&#32;the&#32;last&#32;column</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*vi&#32;&lt;&#32;(size_graph&#32;-&#32;numRows))&#32;{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;computedVi&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1aafe3849a9ad4cb18d843d73c89936bb3">getLattice2DFutureVertexGraph</link>(graph,&#32;*vi,&#32;numRows);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;expectedVi&#32;=&#32;*vi&#32;+&#32;numRows;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(((expectedVi&#32;==&#32;computedVi)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Expected&#32;vertex&#32;does&#32;not&#32;match&#32;computed&#32;vertex&#32;from&#32;getLattice2DPastVertexGraph&#32;function&quot;</emphasis>));
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00170"/>00170 }
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00171"/>00171 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00181"/><link linkend="_graph_assert_functions_8hpp_1a5c3f8d6a6068b10ca7ca8f2f4515cbcd">00181</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graph_assert_functions_8hpp_1a5c3f8d6a6068b10ca7ca8f2f4515cbcd">assertNieghbours</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;graph,std::vector&lt;std::vector&lt;int&gt;&gt;&#32;expectedNeighbourhood){&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size_graph&#32;=&#32;boost::num_vertices(graph);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;vertexIter&#32;=&#32;0;&#32;vertexIter&#32;&lt;&#32;size_graph;&#32;vertexIter++){
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;computedNeighbours&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a954183dad806b30b05e526c37284768b">getVertexNeighbours</link>(graph,vertexIter);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;expectedNeighbours;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expectedNeighbours&#32;=&#32;expectedNeighbourhood[vertexIter];
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(expectedNeighbours.begin(),&#32;expectedNeighbours.end());
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(computedNeighbours.begin(),&#32;computedNeighbours.end());
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(expectedNeighbours.size()&#32;==&#32;computedNeighbours.size()&#32;&amp;&amp;&#32;std::equal(expectedNeighbours.begin(),&#32;expectedNeighbours.end(),&#32;computedNeighbours.begin()));
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00193"/>00193 }
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00194"/>00194 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00195"/>00195 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00196"/>00196 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00210"/><link linkend="_graph_assert_functions_8hpp_1a67fc70f2265e3ca43a7871939ae44a95">00210</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graph_assert_functions_8hpp_1a67fc70f2265e3ca43a7871939ae44a95">assertCorrection</link>(
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;graph,
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;outcomeVector,&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertex,
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numRows,
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;qreal&#32;inputAngle,
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;qreal&#32;expectedCorrectedAngle){
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;computedCorrectedAngle&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a2b29f1efbcbccfbe77481e5b1a9647c8">computeCorrectedAngle</link>(
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;graph,
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outcomeVector,&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertex,
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numRows,
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputAngle);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;New&#32;angle&#32;and&#32;original&#32;angle&#32;do&#32;not&#32;match&quot;</emphasis>&#32;&amp;&amp;&#32;computedCorrectedAngle&#32;==&#32;expectedCorrectedAngle));
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00226"/>00226 }
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00227"/>00227 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00228"/>00228 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00229"/>00229 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00230"/>00230 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00240"/><link linkend="_graph_assert_functions_8hpp_1ab91620d08875164bce42bdc604224ed3">00240</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graph_assert_functions_8hpp_1ab91620d08875164bce42bdc604224ed3">testEveryOtherAnlgeZeroResults</link>(<emphasis role="keywordtype">int</emphasis>&#32;assertValue,<emphasis role="keywordtype">int</emphasis>&#32;piDenominator,<emphasis role="keywordtype">int</emphasis>&#32;numberCols){
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialise&#32;variable&#32;names&#32;and&#32;types</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numRows;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numCols;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;latticeGraph;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVertices;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;qubitAngles;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;measuredQubitsOutcomes;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00249"/>00249 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00250"/>00250 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;values&#32;to&#32;variables</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;numRows&#32;=&#32;1;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00253"/>00253 &#32;&#32;&#32;&#32;numCols&#32;=&#32;numberCols;&#32;<emphasis role="comment">//&#32;Test&#32;on&#32;an&#32;odd&#32;number&#32;of&#32;qubits</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;latticeGraph&#32;=&#32;<link linkend="_graph_constructions_8hpp_1a74f9014929a19ec558c3bc766754f1c3">createLatticeGraph</link>(numRows,numCols);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;numVertices&#32;=&#32;boost::num_vertices(latticeGraph);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00256"/>00256 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00257"/>00257 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;load&#32;QuEST&#32;environment</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;QuESTEnv&#32;env&#32;=&#32;createQuESTEnv();
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00260"/>00260 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00261"/>00261 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;create&#32;a&#32;quantum&#32;register</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;Qureg&#32;qureg&#32;=&#32;createQureg(numVertices,&#32;env);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00264"/>00264 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00266"/>00266 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;angles</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(assertValue&#32;==&#32;0){
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles&#32;=&#32;<link linkend="_angle_construction_8hpp_1a0804b07ffb2bea2c7ac8cba482a88d62">initRandomPiOnNEveryOtherAnglesMod2kPi</link>(numVertices,piDenominator);&#32;<emphasis role="comment">//&#32;end&#32;in&#32;0</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(assertValue&#32;==&#32;1){
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles&#32;=&#32;<link linkend="_angle_construction_8hpp_1ac35939429a8657a1f33dad419e7812c1">initRandomPiOnNEveryOtherAnglesMod2kPiPlusPi</link>(numVertices,piDenominator);&#32;&#32;<emphasis role="comment">//&#32;end&#32;in&#32;1</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Nothing</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00276"/>00276 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00278"/>00278 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;initialise&#32;in&#32;the&#32;plus&#32;state</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;initPlusState(qureg);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00280"/>00280 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;<emphasis role="comment">//Leave&#32;angle&#32;off&#32;qubits</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;angles&#32;to&#32;the&#32;qubits</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;<emphasis role="comment">//addAngleRotateZgate(qureg,qubitAngles);</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00284"/>00284 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00285"/>00285 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;entangle&#32;graph</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;<link linkend="_quantum_graph_cluster_states_8hpp_1a3f830234f9eb3a150a084b0f2b4aa056">entangleGraph</link>(qureg,latticeGraph);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00288"/>00288 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00289"/>00289 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;measure&#32;graph</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;measuredQubitsOutcomes&#32;=&#32;<link linkend="_flow_measurements_8hpp_1a7231be9a1c347894c1d01c349f4b41c7">measureGraph</link>(
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qureg,
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;latticeGraph,
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles,
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numRows);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00296"/>00296 
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unload&#32;QuEST</emphasis>
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;destroyQureg(qureg,&#32;env);&#32;
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;destroyQuESTEnv(env);
<anchor xml:id="_graph_assert_functions_8hpp_source_1l00301"/>00301 }
</programlisting></section>
