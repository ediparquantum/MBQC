<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_graph_traversal_flows_8hpp" xml:lang="en-US">
<title>src/graphs/graphTraversalFlows.hpp File Reference</title>
<indexterm><primary>src/graphs/graphTraversalFlows.hpp</primary></indexterm>
<para>

<para>Construct graphs and perform various graph traversal operations. </para>
 
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_graph_traversal_flows_8hpp_1a0f7ce92e965a947ec82300d194d76f4d">getLattice2DFutureVertex</link> (int presentVertex, int numRows)</para>

<para>Computes the future vertex in a 2D lattice graph based on a flow function. </para>
</listitem>
            <listitem><para>int <link linkend="_graph_traversal_flows_8hpp_1a626f9a06defdfeec52b82251cef22702">getLattice2DPastVertex</link> (int presentVertex, int numRows)</para>

<para>Computes the past vertex in a 2D lattice graph based on a flow function. </para>
</listitem>
            <listitem><para>std::vector&lt; int &gt; <link linkend="_graph_traversal_flows_8hpp_1a954183dad806b30b05e526c37284768b">getVertexNeighbours</link> (const <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp;graph, int vertex)</para>

<para>Retrieves the neighboring vertices of a given vertex in an undirected graph. </para>
</listitem>
            <listitem><para>int <link linkend="_graph_traversal_flows_8hpp_1aafe3849a9ad4cb18d843d73c89936bb3">getLattice2DFutureVertexGraph</link> (const <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp;graph, int vertex, int numRows)</para>

<para>Computes the future vertex in a 2D lattice graph based on a flow function for a given vertex in the graph. </para>
</listitem>
            <listitem><para>int <link linkend="_graph_traversal_flows_8hpp_1a7b014587f20137aff522774eb1a05947">getLattice2DPastVertexGraph</link> (const <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp;graph, int vertex, int numRows)</para>

<para>Computes the past vertex in a 2D lattice graph based on a flow function for a given vertex in the graph. </para>
</listitem>
            <listitem><para>qreal <link linkend="_graph_traversal_flows_8hpp_1a2b29f1efbcbccfbe77481e5b1a9647c8">computeCorrectedAngle</link> (const <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp;graph, std::vector&lt; int &gt; measuredOutcomes, int vertex, int numRows, qreal angle)</para>

<para>Computes the corrected angle based on measured outcomes and flow functions in an undirected graph. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Construct graphs and perform various graph traversal operations. </para>

<para><formalpara><title>Author</title>

<para>Jonathan Miller </para>
</formalpara>
<formalpara><title>Date</title>

<para>20230425 </para>
</formalpara>
</para>
<para>
Definition in file <link linkend="_graph_traversal_flows_8hpp_source">graphTraversalFlows.hpp</link>.</para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_graph_traversal_flows_8hpp_1a2b29f1efbcbccfbe77481e5b1a9647c8"/><section>
    <title>computeCorrectedAngle()</title>
<indexterm><primary>computeCorrectedAngle</primary><secondary>graphTraversalFlows.hpp</secondary></indexterm>
<indexterm><primary>graphTraversalFlows.hpp</primary><secondary>computeCorrectedAngle</secondary></indexterm>
<para><computeroutput>qreal computeCorrectedAngle (const <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp; graph, std::vector&lt; int &gt; measuredOutcomes, int vertex, int numRows, qreal angle)</computeroutput></para><para>

<para>Computes the corrected angle based on measured outcomes and flow functions in an undirected graph. </para>
</para>

<para>This function computes the corrected angle by considering the measured outcomes and flow functions of vertices in an undirected graph. It takes into account the neighboring vertices, past vertices, and various correction factors to calculate the updated angle.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>graph</entry><entry>
<para>The undirected graph. </para>
</entry>
                            </row>
                            <row>
<entry>measuredOutcomes</entry><entry>
<para>The vector of measured outcomes. </para>
</entry>
                            </row>
                            <row>
<entry>vertex</entry><entry>
<para>The vertex for which the corrected angle is computed. </para>
</entry>
                            </row>
                            <row>
<entry>numRows</entry><entry>
<para>The number of rows in the 2D lattice graph. </para>
</entry>
                            </row>
                            <row>
<entry>angle</entry><entry>
<para>The initial angle. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The corrected angle. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_graph_traversal_flows_8hpp_source_1l00153">153</link> of file <link linkend="_graph_traversal_flows_8hpp_source">graphTraversalFlows.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00159 
00160 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;neighbourhood&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a954183dad806b30b05e526c37284768b">getVertexNeighbours</link>(graph,vertex);
00161 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;xCorrectionVertex;
00162 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;zCorrectionVertices;
00163 &#32;&#32;&#32;&#32;qreal&#32;updatedAngle;
00164 
00165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vertex&#32;&lt;&#32;numRows){&#32;<emphasis role="comment">//&#32;First&#32;column&#32;-&#32;no&#32;x&#32;correction&#32;no&#32;z&#32;correction</emphasis>
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updatedAngle&#32;=&#32;angle;
00167 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vertex&#32;&gt;=&#32;numRows){&#32;<emphasis role="comment">//&#32;ensure&#32;we&#32;are&#32;in&#32;second&#32;column</emphasis>
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xCorrectionVertex&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a7b014587f20137aff522774eb1a05947">getLattice2DPastVertexGraph</link>(graph,vertex,numRows);
00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i:&#32;neighbourhood){
00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;past;
00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i&#32;&gt;=&#32;numRows){
00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;past&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a7b014587f20137aff522774eb1a05947">getLattice2DPastVertexGraph</link>(graph,i,numRows);
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>{
00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zCorrectionVertices.push_back(past);
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00178 
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;vertex&#32;in&#32;neigbourhood&#32;if&#32;it&#32;is&#32;the&#32;vertrex</emphasis>
00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;want&#32;to&#32;measure</emphasis>
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zCorrectionVertices.erase(
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::remove(
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zCorrectionVertices.begin(),&#32;
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zCorrectionVertices.end(),&#32;vertex),&#32;
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zCorrectionVertices.end());
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;exponent&#32;=&#32;measuredOutcomes[xCorrectionVertex];
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//std::cout&#32;&lt;&lt;&#32;&quot;f-1(j):&#32;&quot;&#32;&lt;&lt;&#32;xCorrectionVertex&#32;&lt;&lt;&#32;std::endl;</emphasis>
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//std::cout&#32;&lt;&lt;&#32;&quot;s_f-1(j):&#32;&quot;&#32;&lt;&lt;&#32;exponent&#32;&lt;&lt;&#32;std::endl;</emphasis>
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;xAngle&#32;=&#32;std::pow((-1),&#32;exponent)*angle;
00192 
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;outcomesForZ;
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i:zCorrectionVertices){
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outcomesForZ.push_back(measuredOutcomes[i]);
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00197 
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sum&#32;=&#32;std::accumulate(outcomesForZ.begin(),&#32;outcomesForZ.end(),&#32;0);
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;zAngle&#32;=&#32;M_PI*sum;
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updatedAngle&#32;=&#32;xAngle&#32;+&#32;zAngle;
00201 
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00203 
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;updatedAngle;
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00206 }
</programlisting></section>
<anchor xml:id="_graph_traversal_flows_8hpp_1a0f7ce92e965a947ec82300d194d76f4d"/><section>
    <title>getLattice2DFutureVertex()</title>
<indexterm><primary>getLattice2DFutureVertex</primary><secondary>graphTraversalFlows.hpp</secondary></indexterm>
<indexterm><primary>graphTraversalFlows.hpp</primary><secondary>getLattice2DFutureVertex</secondary></indexterm>
<para><computeroutput>int getLattice2DFutureVertex (int presentVertex, int numRows)</computeroutput></para><para>

<para>Computes the future vertex in a 2D lattice graph based on a flow function. </para>
</para>

<para>For a 2D lattice graph, the flow function for a vertex returns the future vertex. The future vertex is calculated as presentVertex + numRows, where numRows is the number of rows in the lattice.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>presentVertex</entry><entry>
<para>The present vertex for which the future vertex is computed. </para>
</entry>
                            </row>
                            <row>
<entry>numRows</entry><entry>
<para>The number of rows in the 2D lattice graph. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The future vertex. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_graph_traversal_flows_8hpp_source_1l00031">31</link> of file <link linkend="_graph_traversal_flows_8hpp_source">graphTraversalFlows.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00032 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;a&#32;2D&#32;lattice&#32;graph&#32;</emphasis>
00033 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(1)-(4)-(7)</emphasis>
00034 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(2)-(5)-(8)</emphasis>
00035 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(3)-(6)-(9)</emphasis>
00036 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;flow&#32;function&#32;for&#32;vertex&#32;5</emphasis>
00037 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;has&#32;future&#32;vertex&#32;8</emphasis>
00038 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;f(i)&#32;=&#32;i&#32;+&#32;r,&#32;r&#32;is&#32;numRows</emphasis>
00039 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;futureVertex&#32;=&#32;presentVertex&#32;+&#32;numRows;
00040 &#32;&#32;&#32;&#32;
00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;futureVertex;
00042 }
</programlisting></section>
<anchor xml:id="_graph_traversal_flows_8hpp_1aafe3849a9ad4cb18d843d73c89936bb3"/><section>
    <title>getLattice2DFutureVertexGraph()</title>
<indexterm><primary>getLattice2DFutureVertexGraph</primary><secondary>graphTraversalFlows.hpp</secondary></indexterm>
<indexterm><primary>graphTraversalFlows.hpp</primary><secondary>getLattice2DFutureVertexGraph</secondary></indexterm>
<para><computeroutput>int getLattice2DFutureVertexGraph (const <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp; graph, int vertex, int numRows)</computeroutput></para><para>

<para>Computes the future vertex in a 2D lattice graph based on a flow function for a given vertex in the graph. </para>
</para>

<para>This function calculates the future vertex for a given vertex in a 2D lattice graph based on a flow function. It performs validation checks to ensure the input vertex and the computed future vertex satisfy certain conditions.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>graph</entry><entry>
<para>The 2D lattice graph. </para>
</entry>
                            </row>
                            <row>
<entry>vertex</entry><entry>
<para>The vertex for which the future vertex is computed. </para>
</entry>
                            </row>
                            <row>
<entry>numRows</entry><entry>
<para>The number of rows in the 2D lattice graph. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The future vertex. </para>
</formalpara>
<formalpara><title>Precondition</title>

<para>The vertex inputted needs to be less than the number of vertices minus the number of rows. </para>

<para>The flow function produced a vertex that is in the input vertex neighborhood. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_graph_traversal_flows_8hpp_source_1l00105">105</link> of file <link linkend="_graph_traversal_flows_8hpp_source">graphTraversalFlows.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00106 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size_graph&#32;=&#32;boost::num_vertices(graph);
00107 &#32;&#32;&#32;&#32;assert(<emphasis role="stringliteral">&quot;The&#32;vertex&#32;inputted&#32;needs&#32;to&#32;be&#32;less&#32;than&#32;the&#32;number&#32;of&#32;vertices&#32;-&#32;the&#32;number&#32;of&#32;the&#32;rows,&#32;but&#32;it&#32;is&#32;not&quot;</emphasis>&#32;&amp;&amp;&#32;vertex&#32;&lt;&#32;(size_graph&#32;-&#32;numRows));
00108 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;vertexNeighbours&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a954183dad806b30b05e526c37284768b">getVertexNeighbours</link>(graph,vertex);
00109 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;futureVertex&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a0f7ce92e965a947ec82300d194d76f4d">getLattice2DFutureVertex</link>(vertex,numRows);
00110 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;std::find(vertexNeighbours.begin(),&#32;vertexNeighbours.end(),&#32;futureVertex);
00111 &#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;flow&#32;function&#32;produced&#32;a&#32;vertex&#32;not&#32;in&#32;the&#32;input&#32;v&#32;neighbourhodd&quot;</emphasis>&#32;&amp;&amp;&#32;it&#32;!=&#32;vertexNeighbours.end()));
00112 &#32;&#32;&#32;&#32;
00113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;futureVertex;
00114 }
</programlisting></section>
<anchor xml:id="_graph_traversal_flows_8hpp_1a626f9a06defdfeec52b82251cef22702"/><section>
    <title>getLattice2DPastVertex()</title>
<indexterm><primary>getLattice2DPastVertex</primary><secondary>graphTraversalFlows.hpp</secondary></indexterm>
<indexterm><primary>graphTraversalFlows.hpp</primary><secondary>getLattice2DPastVertex</secondary></indexterm>
<para><computeroutput>int getLattice2DPastVertex (int presentVertex, int numRows)</computeroutput></para><para>

<para>Computes the past vertex in a 2D lattice graph based on a flow function. </para>
</para>

<para>For a 2D lattice graph, the flow function for a vertex returns the past vertex. The past vertex is calculated as presentVertex - numRows, where numRows is the number of rows in the lattice.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>presentVertex</entry><entry>
<para>The present vertex for which the past vertex is computed. </para>
</entry>
                            </row>
                            <row>
<entry>numRows</entry><entry>
<para>The number of rows in the 2D lattice graph. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The past vertex. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_graph_traversal_flows_8hpp_source_1l00054">54</link> of file <link linkend="_graph_traversal_flows_8hpp_source">graphTraversalFlows.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00055 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;a&#32;2D&#32;lattice&#32;graph&#32;</emphasis>
00056 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(1)-(4)-(7)</emphasis>
00057 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(2)-(5)-(8)</emphasis>
00058 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(3)-(6)-(9)</emphasis>
00059 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;flow&#32;function&#32;for&#32;vertex&#32;5</emphasis>
00060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;has&#32;past&#32;vertex&#32;2</emphasis>
00061 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;f(i)&#32;=&#32;i&#32;-&#32;r,&#32;r&#32;is&#32;numRows</emphasis>
00062 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pastVertex&#32;=&#32;presentVertex&#32;-&#32;numRows;
00063 &#32;&#32;&#32;&#32;
00064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pastVertex;
00065 }
</programlisting></section>
<anchor xml:id="_graph_traversal_flows_8hpp_1a7b014587f20137aff522774eb1a05947"/><section>
    <title>getLattice2DPastVertexGraph()</title>
<indexterm><primary>getLattice2DPastVertexGraph</primary><secondary>graphTraversalFlows.hpp</secondary></indexterm>
<indexterm><primary>graphTraversalFlows.hpp</primary><secondary>getLattice2DPastVertexGraph</secondary></indexterm>
<para><computeroutput>int getLattice2DPastVertexGraph (const <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp; graph, int vertex, int numRows)</computeroutput></para><para>

<para>Computes the past vertex in a 2D lattice graph based on a flow function for a given vertex in the graph. </para>
</para>

<para>This function calculates the past vertex for a given vertex in a 2D lattice graph based on a flow function. It performs validation checks to ensure the input vertex and the computed past vertex satisfy certain conditions.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>graph</entry><entry>
<para>The 2D lattice graph. </para>
</entry>
                            </row>
                            <row>
<entry>vertex</entry><entry>
<para>The vertex for which the past vertex is computed. </para>
</entry>
                            </row>
                            <row>
<entry>numRows</entry><entry>
<para>The number of rows in the 2D lattice graph. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The past vertex. </para>
</formalpara>
<formalpara><title>Precondition</title>

<para>The inputted vertex needs to be greater than or equal to the number of rows. </para>

<para>The flow function produced a vertex that is in the input vertex neighborhood. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_graph_traversal_flows_8hpp_source_1l00130">130</link> of file <link linkend="_graph_traversal_flows_8hpp_source">graphTraversalFlows.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00131 &#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;The&#32;inputted&#32;vertex&#32;needs&#32;to&#32;be&#32;greater&#32;than&#32;or&#32;equal&#32;to&#32;the&#32;number&#32;of&#32;rows.&quot;</emphasis>&#32;&amp;&amp;&#32;vertex&#32;&gt;=&#32;numRows));
00132 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;vertexNeighbours&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a954183dad806b30b05e526c37284768b">getVertexNeighbours</link>(graph,vertex);
00133 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pastVertex&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a626f9a06defdfeec52b82251cef22702">getLattice2DPastVertex</link>(vertex,numRows);
00134 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;::iterator&#32;it&#32;=&#32;std::find(vertexNeighbours.begin(),&#32;vertexNeighbours.end(),&#32;pastVertex);
00135 &#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;flow&#32;function&#32;produced&#32;a&#32;vertex&#32;not&#32;in&#32;the&#32;input&#32;vertex&#32;neighbourhodd&quot;</emphasis>&#32;&amp;&amp;&#32;it&#32;!=&#32;vertexNeighbours.end()));
00136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pastVertex;
00137 }
</programlisting></section>
<anchor xml:id="_graph_traversal_flows_8hpp_1a954183dad806b30b05e526c37284768b"/><section>
    <title>getVertexNeighbours()</title>
<indexterm><primary>getVertexNeighbours</primary><secondary>graphTraversalFlows.hpp</secondary></indexterm>
<indexterm><primary>graphTraversalFlows.hpp</primary><secondary>getVertexNeighbours</secondary></indexterm>
<para><computeroutput>std::vector&lt; int &gt; getVertexNeighbours (const <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp; graph, int vertex)</computeroutput></para><para>

<para>Retrieves the neighboring vertices of a given vertex in an undirected graph. </para>
</para>

<para>Given an undirected graph and a vertex, this function returns a vector containing the neighboring vertices of the given vertex.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>graph</entry><entry>
<para>The undirected graph. </para>
</entry>
                            </row>
                            <row>
<entry>vertex</entry><entry>
<para>The vertex for which the neighboring vertices are retrieved. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A vector containing the neighboring vertices. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_graph_traversal_flows_8hpp_source_1l00077">77</link> of file <link linkend="_graph_traversal_flows_8hpp_source">graphTraversalFlows.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00078 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Choose&#32;a&#32;vertex&#32;to&#32;find&#32;its&#32;adjacent&#32;vertices</emphasis>
00079 &#32;&#32;&#32;&#32;undirectedGraph::vertex_descriptor&#32;v&#32;=&#32;vertex;
00080 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;range&#32;of&#32;adjacent&#32;vertices</emphasis>
00081 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;boost::graph_traits&lt;undirectedGraph&gt;::adjacency_iterator&#32;adjacency_iterator;
00082 &#32;&#32;&#32;&#32;std::pair&lt;adjacency_iterator,&#32;adjacency_iterator&gt;&#32;neighbors&#32;=&#32;adjacent_vertices(v,&#32;graph);
00083 
00084 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;neighbourVector;
00085 &#32;&#32;&#32;&#32;
00086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(adjacency_iterator&#32;it&#32;=&#32;neighbors.first;&#32;it&#32;!=&#32;neighbors.second;&#32;++it)&#32;{
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;neighbourVector.push_back(*it);
00088 &#32;&#32;&#32;&#32;}
00089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;neighbourVector;
00090 }
</programlisting></section>
</section>
</section>
