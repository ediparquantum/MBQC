<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_graph_traversal_flows_8hpp_source" xml:lang="en-US">
<title>graphTraversalFlows.hpp</title>
<indexterm><primary>src/graphs/graphTraversalFlows.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_graph_traversal_flows_8hpp_source_1l00001"/>00001 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;Title&#32;&#32;:&#32;graphTraversalFlows.hpp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;Author&#32;:&#32;Jonathan&#32;Miller&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;Date&#32;&#32;&#32;:&#32;20230425&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00005"/>00005 <emphasis role="comment">//&#32;Aim&#32;&#32;&#32;&#32;:&#32;Construct&#32;graphs&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00006"/>00006 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;As&#32;graph&#32;types&#32;grow&#32;in&#32;number,&#32;separate&#32;tests&#32;&#32;//</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00007"/>00007 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;across&#32;multiple&#32;files&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00009"/>00009 <emphasis role="comment"></emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00010"/>00010 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00011"/>00011 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00012"/>00012 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00013"/>00013 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00031"/><link linkend="_graph_traversal_flows_8hpp_1a0f7ce92e965a947ec82300d194d76f4d">00031</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_graph_traversal_flows_8hpp_1a0f7ce92e965a947ec82300d194d76f4d">getLattice2DFutureVertex</link>(<emphasis role="keywordtype">int</emphasis>&#32;presentVertex,&#32;<emphasis role="keywordtype">int</emphasis>&#32;numRows){
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;a&#32;2D&#32;lattice&#32;graph&#32;</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(1)-(4)-(7)</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(2)-(5)-(8)</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(3)-(6)-(9)</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;flow&#32;function&#32;for&#32;vertex&#32;5</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;has&#32;future&#32;vertex&#32;8</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;f(i)&#32;=&#32;i&#32;+&#32;r,&#32;r&#32;is&#32;numRows</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;futureVertex&#32;=&#32;presentVertex&#32;+&#32;numRows;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;futureVertex;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00042"/>00042 }
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00043"/>00043 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00054"/><link linkend="_graph_traversal_flows_8hpp_1a626f9a06defdfeec52b82251cef22702">00054</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_graph_traversal_flows_8hpp_1a626f9a06defdfeec52b82251cef22702">getLattice2DPastVertex</link>(<emphasis role="keywordtype">int</emphasis>&#32;presentVertex,&#32;<emphasis role="keywordtype">int</emphasis>&#32;numRows){
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;a&#32;2D&#32;lattice&#32;graph&#32;</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(1)-(4)-(7)</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(2)-(5)-(8)</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(3)-(6)-(9)</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;flow&#32;function&#32;for&#32;vertex&#32;5</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;has&#32;past&#32;vertex&#32;2</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;f(i)&#32;=&#32;i&#32;-&#32;r,&#32;r&#32;is&#32;numRows</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pastVertex&#32;=&#32;presentVertex&#32;-&#32;numRows;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pastVertex;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00065"/>00065 }
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00066"/>00066 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00067"/>00067 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00077"/><link linkend="_graph_traversal_flows_8hpp_1a954183dad806b30b05e526c37284768b">00077</link> std::vector&lt;int&gt;&#32;<link linkend="_graph_traversal_flows_8hpp_1a954183dad806b30b05e526c37284768b">getVertexNeighbours</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;graph,<emphasis role="keywordtype">int</emphasis>&#32;vertex){
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Choose&#32;a&#32;vertex&#32;to&#32;find&#32;its&#32;adjacent&#32;vertices</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;undirectedGraph::vertex_descriptor&#32;v&#32;=&#32;vertex;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;range&#32;of&#32;adjacent&#32;vertices</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;boost::graph_traits&lt;undirectedGraph&gt;::adjacency_iterator&#32;adjacency_iterator;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;std::pair&lt;adjacency_iterator,&#32;adjacency_iterator&gt;&#32;neighbors&#32;=&#32;adjacent_vertices(v,&#32;graph);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00083"/>00083 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;neighbourVector;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(adjacency_iterator&#32;it&#32;=&#32;neighbors.first;&#32;it&#32;!=&#32;neighbors.second;&#32;++it)&#32;{
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;neighbourVector.push_back(*it);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;neighbourVector;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00090"/>00090 }
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00091"/>00091 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00105"/><link linkend="_graph_traversal_flows_8hpp_1aafe3849a9ad4cb18d843d73c89936bb3">00105</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_graph_traversal_flows_8hpp_1aafe3849a9ad4cb18d843d73c89936bb3">getLattice2DFutureVertexGraph</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;graph,<emphasis role="keywordtype">int</emphasis>&#32;vertex,<emphasis role="keywordtype">int</emphasis>&#32;numRows){
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size_graph&#32;=&#32;boost::num_vertices(graph);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;assert(<emphasis role="stringliteral">&quot;The&#32;vertex&#32;inputted&#32;needs&#32;to&#32;be&#32;less&#32;than&#32;the&#32;number&#32;of&#32;vertices&#32;-&#32;the&#32;number&#32;of&#32;the&#32;rows,&#32;but&#32;it&#32;is&#32;not&quot;</emphasis>&#32;&amp;&amp;&#32;vertex&#32;&lt;&#32;(size_graph&#32;-&#32;numRows));
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;vertexNeighbours&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a954183dad806b30b05e526c37284768b">getVertexNeighbours</link>(graph,vertex);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;futureVertex&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a0f7ce92e965a947ec82300d194d76f4d">getLattice2DFutureVertex</link>(vertex,numRows);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;std::find(vertexNeighbours.begin(),&#32;vertexNeighbours.end(),&#32;futureVertex);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;flow&#32;function&#32;produced&#32;a&#32;vertex&#32;not&#32;in&#32;the&#32;input&#32;v&#32;neighbourhodd&quot;</emphasis>&#32;&amp;&amp;&#32;it&#32;!=&#32;vertexNeighbours.end()));
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;futureVertex;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00114"/>00114 }
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00115"/>00115 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00116"/>00116 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00130"/><link linkend="_graph_traversal_flows_8hpp_1a7b014587f20137aff522774eb1a05947">00130</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_graph_traversal_flows_8hpp_1a7b014587f20137aff522774eb1a05947">getLattice2DPastVertexGraph</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;graph,<emphasis role="keywordtype">int</emphasis>&#32;vertex,<emphasis role="keywordtype">int</emphasis>&#32;numRows){
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;The&#32;inputted&#32;vertex&#32;needs&#32;to&#32;be&#32;greater&#32;than&#32;or&#32;equal&#32;to&#32;the&#32;number&#32;of&#32;rows.&quot;</emphasis>&#32;&amp;&amp;&#32;vertex&#32;&gt;=&#32;numRows));
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;vertexNeighbours&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a954183dad806b30b05e526c37284768b">getVertexNeighbours</link>(graph,vertex);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pastVertex&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a626f9a06defdfeec52b82251cef22702">getLattice2DPastVertex</link>(vertex,numRows);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;::iterator&#32;it&#32;=&#32;std::find(vertexNeighbours.begin(),&#32;vertexNeighbours.end(),&#32;pastVertex);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;flow&#32;function&#32;produced&#32;a&#32;vertex&#32;not&#32;in&#32;the&#32;input&#32;vertex&#32;neighbourhodd&quot;</emphasis>&#32;&amp;&amp;&#32;it&#32;!=&#32;vertexNeighbours.end()));
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pastVertex;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00137"/>00137 }
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00138"/>00138 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00139"/>00139 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00153"/><link linkend="_graph_traversal_flows_8hpp_1a2b29f1efbcbccfbe77481e5b1a9647c8">00153</link> qreal&#32;<link linkend="_graph_traversal_flows_8hpp_1a2b29f1efbcbccfbe77481e5b1a9647c8">computeCorrectedAngle</link>(
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;graph,
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;measuredOutcomes,&#32;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertex,
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numRows,&#32;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;qreal&#32;angle){
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00159"/>00159 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;neighbourhood&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a954183dad806b30b05e526c37284768b">getVertexNeighbours</link>(graph,vertex);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;xCorrectionVertex;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;zCorrectionVertices;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;qreal&#32;updatedAngle;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00164"/>00164 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vertex&#32;&lt;&#32;numRows){&#32;<emphasis role="comment">//&#32;First&#32;column&#32;-&#32;no&#32;x&#32;correction&#32;no&#32;z&#32;correction</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updatedAngle&#32;=&#32;angle;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vertex&#32;&gt;=&#32;numRows){&#32;<emphasis role="comment">//&#32;ensure&#32;we&#32;are&#32;in&#32;second&#32;column</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xCorrectionVertex&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a7b014587f20137aff522774eb1a05947">getLattice2DPastVertexGraph</link>(graph,vertex,numRows);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i:&#32;neighbourhood){
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;past;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i&#32;&gt;=&#32;numRows){
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;past&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a7b014587f20137aff522774eb1a05947">getLattice2DPastVertexGraph</link>(graph,i,numRows);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zCorrectionVertices.push_back(past);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00178"/>00178 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;vertex&#32;in&#32;neigbourhood&#32;if&#32;it&#32;is&#32;the&#32;vertrex</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;want&#32;to&#32;measure</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zCorrectionVertices.erase(
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::remove(
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zCorrectionVertices.begin(),&#32;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zCorrectionVertices.end(),&#32;vertex),&#32;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zCorrectionVertices.end());
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;exponent&#32;=&#32;measuredOutcomes[xCorrectionVertex];
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//std::cout&#32;&lt;&lt;&#32;&quot;f-1(j):&#32;&quot;&#32;&lt;&lt;&#32;xCorrectionVertex&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//std::cout&#32;&lt;&lt;&#32;&quot;s_f-1(j):&#32;&quot;&#32;&lt;&lt;&#32;exponent&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;xAngle&#32;=&#32;std::pow((-1),&#32;exponent)*angle;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00192"/>00192 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;outcomesForZ;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i:zCorrectionVertices){
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outcomesForZ.push_back(measuredOutcomes[i]);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00197"/>00197 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sum&#32;=&#32;std::accumulate(outcomesForZ.begin(),&#32;outcomesForZ.end(),&#32;0);
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;zAngle&#32;=&#32;M_PI*sum;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updatedAngle&#32;=&#32;xAngle&#32;+&#32;zAngle;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00201"/>00201 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00203"/>00203 
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;updatedAngle;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_graph_traversal_flows_8hpp_source_1l00206"/>00206 }
</programlisting></section>
