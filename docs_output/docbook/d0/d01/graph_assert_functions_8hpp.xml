<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_graph_assert_functions_8hpp" xml:lang="en-US">
<title>src/testFunctions/graphAssertFunctions.hpp File Reference</title>
<indexterm><primary>src/testFunctions/graphAssertFunctions.hpp</primary></indexterm>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_graph_assert_functions_8hpp_1a60966966368ac25fe48dbccd70490e98">assertHandShakeLemma</link> (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp;graph)</para>

<para>Asserts the Handshake Lemma for an undirected graph. </para>
</listitem>
            <listitem><para>void <link linkend="_graph_assert_functions_8hpp_1a781ea29934c2f8c5c65a73075bc13da1">assertPathGraphMinMaxDegrees</link> (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp;graph)</para>

<para>Asserts the minimum and maximum degrees for a path graph. </para>
</listitem>
            <listitem><para>void <link linkend="_graph_assert_functions_8hpp_1ab7b459ddc7c532fc5a37abb8760d7ca6">assertDegreeSetLatticeGraph</link> (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp;graph)</para>

<para>Asserts the degree set for a lattice graph. </para>
</listitem>
            <listitem><para>void <link linkend="_graph_assert_functions_8hpp_1a026973ba07ba80213ede65e64a3eb614">assertGraphNumVertices</link> (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp;graph, int numVertices)</para>

<para>Asserts the number of vertices in a graph. </para>
</listitem>
            <listitem><para>void <link linkend="_graph_assert_functions_8hpp_1a3241060bf4552dac98da626843460bb3">assertFlowFunctionsPerformExpected</link> (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp;graph, int numRows)</para>

<para>Asserts that flow functions perform as expected in a graph. </para>
</listitem>
            <listitem><para>void <link linkend="_graph_assert_functions_8hpp_1a5c3f8d6a6068b10ca7ca8f2f4515cbcd">assertNieghbours</link> (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp;graph, std::vector&lt; std::vector&lt; int &gt; &gt; expectedNeighbourhood)</para>

<para>Asserts that the computed neighborhood of each vertex in the graph matches the expected neighborhood. </para>
</listitem>
            <listitem><para>void <link linkend="_graph_assert_functions_8hpp_1a67fc70f2265e3ca43a7871939ae44a95">assertCorrection</link> (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp;graph, std::vector&lt; int &gt; outcomeVector, int vertex, int numRows, qreal inputAngle, qreal expectedCorrectedAngle)</para>

<para>Asserts that the computed corrected angle matches the expected corrected angle. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_graph_assert_functions_8hpp_1a67fc70f2265e3ca43a7871939ae44a95"/><section>
    <title>assertCorrection()</title>
<indexterm><primary>assertCorrection</primary><secondary>graphAssertFunctions.hpp</secondary></indexterm>
<indexterm><primary>graphAssertFunctions.hpp</primary><secondary>assertCorrection</secondary></indexterm>
<para><computeroutput>void assertCorrection (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp; graph, std::vector&lt; int &gt; outcomeVector, int vertex, int numRows, qreal inputAngle, qreal expectedCorrectedAngle)</computeroutput></para><para>

<para>Asserts that the computed corrected angle matches the expected corrected angle. </para>
</para>

<para>The function computes the corrected angle using the <computeroutput>computeCorrectedAngle</computeroutput> function and compares it with the expected corrected angle. It throws an assertion error if the computed corrected angle does not match the expected corrected angle.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>graph</entry><entry>
<para>The graph representing the lattice. </para>
</entry>
                            </row>
                            <row>
<entry>outcomeVector</entry><entry>
<para>The vector of measured outcomes. </para>
</entry>
                            </row>
                            <row>
<entry>vertex</entry><entry>
<para>The vertex for which the corrected angle is computed. </para>
</entry>
                            </row>
                            <row>
<entry>numRows</entry><entry>
<para>The number of rows in the lattice. </para>
</entry>
                            </row>
                            <row>
<entry>inputAngle</entry><entry>
<para>The input angle for the vertex. </para>
</entry>
                            </row>
                            <row>
<entry>expectedCorrectedAngle</entry><entry>
<para>The expected corrected angle. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::runtime_error</entry><entry>
<para>if the computed corrected angle does not match the expected corrected angle. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_graph_assert_functions_8hpp_source_1l00210">210</link> of file <link linkend="_graph_assert_functions_8hpp_source">graphAssertFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;computedCorrectedAngle&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a2b29f1efbcbccfbe77481e5b1a9647c8">computeCorrectedAngle</link>(
00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;graph,
00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outcomeVector,&#32;
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertex,
00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numRows,
00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputAngle);
00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;New&#32;angle&#32;and&#32;original&#32;angle&#32;do&#32;not&#32;match&quot;</emphasis>&#32;&amp;&amp;&#32;computedCorrectedAngle&#32;==&#32;expectedCorrectedAngle));
00226 }
</programlisting></section>
<anchor xml:id="_graph_assert_functions_8hpp_1ab7b459ddc7c532fc5a37abb8760d7ca6"/><section>
    <title>assertDegreeSetLatticeGraph()</title>
<indexterm><primary>assertDegreeSetLatticeGraph</primary><secondary>graphAssertFunctions.hpp</secondary></indexterm>
<indexterm><primary>graphAssertFunctions.hpp</primary><secondary>assertDegreeSetLatticeGraph</secondary></indexterm>
<para><computeroutput>void assertDegreeSetLatticeGraph (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp; graph)</computeroutput></para><para>

<para>Asserts the degree set for a lattice graph. </para>
</para>

<para>The function checks whether the degrees of all vertices in the provided lattice graph belong to the set {2, 3, 4}. It calculates the degrees of all vertices in the graph and filters out degrees that are not in the required set. It then asserts that all remaining degrees are either 2, 3, or 4.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>graph</entry><entry>
<para>The lattice graph to check. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::runtime_error</entry><entry>
<para>if a degree outside the set {2, 3, 4} is found. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_graph_assert_functions_8hpp_source_1l00094">94</link> of file <link linkend="_graph_assert_functions_8hpp_source">graphAssertFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00095 &#32;&#32;&#32;&#32;
00096 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_vertices&#32;=&#32;boost::num_vertices(graph);
00097 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;degree_vector;
00098 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;required_deg_vector&#32;=&#32;{2,3,4};
00099 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;the&#32;function&#32;and&#32;print&#32;the&#32;adjacent&#32;vertices&#32;of&#32;vertex&#32;0</emphasis>
00100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;num_vertices;&#32;i++)&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;undirectedGraph::vertex_descriptor&#32;v;
00102 &#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;boost::vertex(i,&#32;graph);&#32;
00103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;d&#32;=&#32;boost::degree(v,&#32;graph);
00104 &#32;&#32;&#32;&#32;&#32;&#32;degree_vector.push_back(d);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00105 &#32;&#32;&#32;&#32;}
00106 
00107 &#32;&#32;&#32;&#32;sort(&#32;degree_vector.begin(),&#32;degree_vector.end()&#32;);
00108 &#32;&#32;&#32;&#32;
00109 &#32;&#32;&#32;&#32;degree_vector.erase(std::unique(&#32;degree_vector.begin(),&#32;degree_vector.end()&#32;),&#32;degree_vector.end()&#32;);
00110 
00111 
00112 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;filt;
00113 &#32;&#32;&#32;&#32;std::copy_if(degree_vector.begin(),&#32;degree_vector.end(),&#32;std::back_inserter(filt),&#32;[](<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;{
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;i&#32;==&#32;2&#32;||&#32;i&#32;==&#32;3&#32;||&#32;i&#32;==&#32;4;
00115 &#32;&#32;&#32;&#32;});
00116 &#32;
00117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;&amp;i:&#32;filt)&#32;{
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(<emphasis role="stringliteral">&quot;Degree&#32;must&#32;be&#32;either&#32;2,3&#32;or&#32;4&quot;</emphasis>&#32;&amp;&amp;&#32;i&#32;==&#32;2&#32;||&#32;i&#32;==&#32;3&#32;||&#32;i&#32;==&#32;4);
00119 &#32;&#32;&#32;&#32;}
00120 
00121 }
</programlisting></section>
<anchor xml:id="_graph_assert_functions_8hpp_1a3241060bf4552dac98da626843460bb3"/><section>
    <title>assertFlowFunctionsPerformExpected()</title>
<indexterm><primary>assertFlowFunctionsPerformExpected</primary><secondary>graphAssertFunctions.hpp</secondary></indexterm>
<indexterm><primary>graphAssertFunctions.hpp</primary><secondary>assertFlowFunctionsPerformExpected</secondary></indexterm>
<para><computeroutput>void assertFlowFunctionsPerformExpected (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp; graph, int numRows)</computeroutput></para><para>

<para>Asserts that flow functions perform as expected in a graph. </para>
</para>

<para>The function checks whether the flow functions in the provided graph produce the expected results. It verifies that the computed vertices from the flow functions match the expected vertices based on the graph structure and the specified number of rows. It throws an assertion error if any mismatch is found.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>graph</entry><entry>
<para>The graph to check. </para>
</entry>
                            </row>
                            <row>
<entry>numRows</entry><entry>
<para>The number of rows in the graph. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::runtime_error</entry><entry>
<para>if any computed vertex does not match the expected vertex. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_graph_assert_functions_8hpp_source_1l00149">149</link> of file <link linkend="_graph_assert_functions_8hpp_source">graphAssertFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00150 &#32;&#32;&#32;&#32;undirectedGraph::vertex_iterator&#32;vi,&#32;vi_end;
00151 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size_graph&#32;=&#32;boost::num_vertices(graph);
00152 
00153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(boost::tie(vi,&#32;vi_end)&#32;=&#32;boost::vertices(graph);&#32;vi&#32;!=&#32;vi_end;&#32;++vi)&#32;{
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;vertices&#32;that&#32;are&#32;in&#32;the&#32;first&#32;column</emphasis>
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*vi&#32;&gt;=&#32;numRows)&#32;{
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;computedVi&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a7b014587f20137aff522774eb1a05947">getLattice2DPastVertexGraph</link>(graph,&#32;*vi,&#32;numRows);
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;expectedVi&#32;=&#32;*vi&#32;-&#32;numRows;
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(((expectedVi&#32;==&#32;computedVi)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Expected&#32;vertex&#32;does&#32;not&#32;match&#32;computed&#32;vertex&#32;from&#32;getLattice2DPastVertexGraph&#32;function&quot;</emphasis>));
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00160 &#32;&#32;&#32;&#32;}
00161 &#32;&#32;&#32;&#32;
00162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(boost::tie(vi,&#32;vi_end)&#32;=&#32;boost::vertices(graph);&#32;vi&#32;!=&#32;vi_end;&#32;++vi)&#32;{
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;vertices&#32;that&#32;are&#32;in&#32;the&#32;last&#32;column</emphasis>
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*vi&#32;&lt;&#32;(size_graph&#32;-&#32;numRows))&#32;{
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;computedVi&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1aafe3849a9ad4cb18d843d73c89936bb3">getLattice2DFutureVertexGraph</link>(graph,&#32;*vi,&#32;numRows);
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;expectedVi&#32;=&#32;*vi&#32;+&#32;numRows;
00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(((expectedVi&#32;==&#32;computedVi)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Expected&#32;vertex&#32;does&#32;not&#32;match&#32;computed&#32;vertex&#32;from&#32;getLattice2DPastVertexGraph&#32;function&quot;</emphasis>));
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00169 &#32;&#32;&#32;&#32;}
00170 }
</programlisting></section>
<anchor xml:id="_graph_assert_functions_8hpp_1a026973ba07ba80213ede65e64a3eb614"/><section>
    <title>assertGraphNumVertices()</title>
<indexterm><primary>assertGraphNumVertices</primary><secondary>graphAssertFunctions.hpp</secondary></indexterm>
<indexterm><primary>graphAssertFunctions.hpp</primary><secondary>assertGraphNumVertices</secondary></indexterm>
<para><computeroutput>void assertGraphNumVertices (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp; graph, int numVertices)</computeroutput></para><para>

<para>Asserts the number of vertices in a graph. </para>
</para>

<para>The function checks whether the number of vertices in the provided graph matches the expected number of vertices. It compares the actual number of vertices in the graph with the expected number and throws an assertion error if they do not match.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>graph</entry><entry>
<para>The graph to check. </para>
</entry>
                            </row>
                            <row>
<entry>numVertices</entry><entry>
<para>The expected number of vertices. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::runtime_error</entry><entry>
<para>if the number of vertices does not match the expected number. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_graph_assert_functions_8hpp_source_1l00133">133</link> of file <link linkend="_graph_assert_functions_8hpp_source">graphAssertFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00134 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_vertices&#32;=&#32;boost::num_vertices(graph);
00135 &#32;&#32;assert(<emphasis role="stringliteral">&quot;Number&#32;of&#32;vertices&#32;in&#32;graph&#32;must&#32;equal&#32;input&quot;</emphasis>&#32;&amp;&amp;&#32;numVertices&#32;==&#32;num_vertices);
00136 }
</programlisting></section>
<anchor xml:id="_graph_assert_functions_8hpp_1a60966966368ac25fe48dbccd70490e98"/><section>
    <title>assertHandShakeLemma()</title>
<indexterm><primary>assertHandShakeLemma</primary><secondary>graphAssertFunctions.hpp</secondary></indexterm>
<indexterm><primary>graphAssertFunctions.hpp</primary><secondary>assertHandShakeLemma</secondary></indexterm>
<para><computeroutput>void assertHandShakeLemma (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp; graph)</computeroutput></para><para>

<para>Asserts the Handshake Lemma for an undirected graph. </para>
</para>

<para>This function asserts the Handshake Lemma for an undirected graph. The Handshake Lemma states that the sum of the degrees of all vertices in an undirected graph is equal to twice the number of edges in the graph.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>graph</entry><entry>
<para>The undirected graph to check. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::runtime_error</entry><entry>
<para>if the Handshake Lemma is violated. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_graph_assert_functions_8hpp_source_1l00039">39</link> of file <link linkend="_graph_assert_functions_8hpp_source">graphAssertFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00040 &#32;&#32;&#32;&#32;
00041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_vertices&#32;=&#32;boost::num_vertices(graph);
00042 &#32;&#32;&#32;&#32;boost::container::vector&lt;int&gt;&#32;degree_vector;
00043 
00044 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;the&#32;function&#32;and&#32;print&#32;the&#32;adjacent&#32;vertices&#32;of&#32;vertex&#32;0</emphasis>
00045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;num_vertices;&#32;i++)&#32;{
00046 &#32;&#32;&#32;&#32;&#32;&#32;undirectedGraph::vertex_descriptor&#32;v;
00047 &#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;boost::vertex(i,&#32;graph);&#32;
00048 &#32;&#32;&#32;&#32;&#32;&#32;degree_vector.push_back(boost::degree(v,&#32;graph));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00049 &#32;&#32;&#32;&#32;}
00050 
00051 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_edge&#32;=&#32;boost::num_edges(graph);&#32;&#32;&#32;
00052 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sum&#32;=&#32;std::accumulate(degree_vector.begin(),&#32;degree_vector.end(),&#32;0);
00053 &#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;total&#32;degree&#32;is&#32;two&#32;times&#32;the&#32;edge&#32;set&quot;</emphasis>&#32;&amp;&amp;&#32;sum&#32;==&#32;2&#32;*&#32;num_edge));
00054 }
</programlisting></section>
<anchor xml:id="_graph_assert_functions_8hpp_1a5c3f8d6a6068b10ca7ca8f2f4515cbcd"/><section>
    <title>assertNieghbours()</title>
<indexterm><primary>assertNieghbours</primary><secondary>graphAssertFunctions.hpp</secondary></indexterm>
<indexterm><primary>graphAssertFunctions.hpp</primary><secondary>assertNieghbours</secondary></indexterm>
<para><computeroutput>void assertNieghbours (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp; graph, std::vector&lt; std::vector&lt; int &gt; &gt; expectedNeighbourhood)</computeroutput></para><para>

<para>Asserts that the computed neighborhood of each vertex in the graph matches the expected neighborhood. </para>
</para>

<para>The function checks whether the computed neighborhood of each vertex in the provided graph matches the expected neighborhood specified in <computeroutput>expectedNeighbourhood</computeroutput>. It throws an assertion error if any mismatch is found.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>graph</entry><entry>
<para>The graph to check. </para>
</entry>
                            </row>
                            <row>
<entry>expectedNeighbourhood</entry><entry>
<para>The expected neighborhood for each vertex. The outer vector represents vertices, and the inner vectors represent their respective neighborhoods. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::runtime_error</entry><entry>
<para>if any computed neighborhood does not match the expected neighborhood. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_graph_assert_functions_8hpp_source_1l00181">181</link> of file <link linkend="_graph_assert_functions_8hpp_source">graphAssertFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00182 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size_graph&#32;=&#32;boost::num_vertices(graph);
00183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;vertexIter&#32;=&#32;0;&#32;vertexIter&#32;&lt;&#32;size_graph;&#32;vertexIter++){
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;computedNeighbours&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a954183dad806b30b05e526c37284768b">getVertexNeighbours</link>(graph,vertexIter);
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;expectedNeighbours;
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expectedNeighbours&#32;=&#32;expectedNeighbourhood[vertexIter];
00187 &#32;&#32;&#32;&#32;
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(expectedNeighbours.begin(),&#32;expectedNeighbours.end());
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(computedNeighbours.begin(),&#32;computedNeighbours.end());
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(expectedNeighbours.size()&#32;==&#32;computedNeighbours.size()&#32;&amp;&amp;&#32;std::equal(expectedNeighbours.begin(),&#32;expectedNeighbours.end(),&#32;computedNeighbours.begin()));
00191 &#32;&#32;&#32;&#32;}
00192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00193 }
</programlisting></section>
<anchor xml:id="_graph_assert_functions_8hpp_1a781ea29934c2f8c5c65a73075bc13da1"/><section>
    <title>assertPathGraphMinMaxDegrees()</title>
<indexterm><primary>assertPathGraphMinMaxDegrees</primary><secondary>graphAssertFunctions.hpp</secondary></indexterm>
<indexterm><primary>graphAssertFunctions.hpp</primary><secondary>assertPathGraphMinMaxDegrees</secondary></indexterm>
<para><computeroutput>void assertPathGraphMinMaxDegrees (const <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp; graph)</computeroutput></para><para>

<para>Asserts the minimum and maximum degrees for a path graph. </para>
</para>

<para>This function asserts that the minimum degree of a path graph is 1 and the maximum degree is 2. It calculates the degrees of all vertices in the provided graph and checks if the minimum degree is 1 and the maximum degree is 2.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>graph</entry><entry>
<para>The path graph to check. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::runtime_error</entry><entry>
<para>if the minimum or maximum degree is violated. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_graph_assert_functions_8hpp_source_1l00066">66</link> of file <link linkend="_graph_assert_functions_8hpp_source">graphAssertFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00067 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_vertices&#32;=&#32;boost::num_vertices(graph);
00068 &#32;&#32;&#32;&#32;boost::container::vector&lt;int&gt;&#32;degree_vector;
00069 
00070 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;the&#32;degree&#32;of&#32;each&#32;vertex</emphasis>
00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;num_vertices;&#32;i++)&#32;{
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;undirectedGraph::vertex_descriptor&#32;v;
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;boost::vertex(i,&#32;graph);
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;degree_vector.push_back(boost::degree(v,&#32;graph));
00075 &#32;&#32;&#32;&#32;}
00076 
00077 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min_degree&#32;=&#32;<link linkend="_general_assert_functions_8hpp_1aaa5eeda4e79aa986d57c3256556b6e6c">getMin</link>(degree_vector);
00078 &#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;minimum&#32;degree&#32;is&#32;1&quot;</emphasis>&#32;&amp;&amp;&#32;min_degree&#32;==&#32;1));
00079 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max_degree&#32;=&#32;<link linkend="_general_assert_functions_8hpp_1af227e83a7360ec64f91773c37a905253">getMax</link>(degree_vector);
00080 &#32;&#32;&#32;&#32;assert((<emphasis role="stringliteral">&quot;maximum&#32;degree&#32;is&#32;2&quot;</emphasis>&#32;&amp;&amp;&#32;max_degree&#32;==&#32;2));
00081 }
</programlisting></section>
</section>
</section>
