<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_flow_measurements_8hpp" xml:lang="en-US">
<title>src/quantumGraphs/flowMeasurements.hpp File Reference</title>
<indexterm><primary>src/quantumGraphs/flowMeasurements.hpp</primary></indexterm>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; std::vector&lt; int &gt; &gt; <link linkend="_flow_measurements_8hpp_1a794636e4b832401d96581e54141cbcba">returnMeasQubitOutcomesLattice</link> (std::vector&lt; int &gt; measOutcomes, int numRows, int numCols)</para>

<para>Constructs a lattice representation of qubit measurement outcomes. </para>
</listitem>
            <listitem><para>std::vector&lt; int &gt; <link linkend="_flow_measurements_8hpp_1a7231be9a1c347894c1d01c349f4b41c7">measureGraph</link> (Qureg qureg, const <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp;graph, std::vector&lt; qreal &gt; qubitAngles, int numRows)</para>

<para>Measures qubits in a graph-based quantum state. </para>
</listitem>
            <listitem><para>void <link linkend="_flow_measurements_8hpp_1a202e2cd0edb82aacb879f3ad4360dc36">printResultsToScreen</link> (std::vector&lt; int &gt; measuredQubitsOutcomes, int numRows, int numCols)</para>

<para>Prints the measurement results to the screen. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_flow_measurements_8hpp_1a7231be9a1c347894c1d01c349f4b41c7"/><section>
    <title>measureGraph()</title>
<indexterm><primary>measureGraph</primary><secondary>flowMeasurements.hpp</secondary></indexterm>
<indexterm><primary>flowMeasurements.hpp</primary><secondary>measureGraph</secondary></indexterm>
<para><computeroutput>std::vector&lt; int &gt; measureGraph (Qureg qureg, const <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> &amp; graph, std::vector&lt; qreal &gt; qubitAngles, int numRows)</computeroutput></para><para>

<para>Measures qubits in a graph-based quantum state. </para>
</para>

<para>This function measures qubits in a graph-based quantum state represented by the provided <computeroutput>qureg</computeroutput> and <computeroutput>graph</computeroutput>. The qubit measurement outcomes are stored in the <computeroutput>measuredQubitsOutcomes</computeroutput> vector.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>qureg</entry><entry>
<para>The quantum register representing the quantum state. </para>
</entry>
                            </row>
                            <row>
<entry>graph</entry><entry>
<para>The undirected graph representing the connectivity of qubits. </para>
</entry>
                            </row>
                            <row>
<entry>qubitAngles</entry><entry>
<para>A vector containing the angles for qubit rotations. </para>
</entry>
                            </row>
                            <row>
<entry>numRows</entry><entry>
<para>The number of rows in the graph layout. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A vector containing the outcomes of qubit measurements. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_flow_measurements_8hpp_source_1l00057">57</link> of file <link linkend="_flow_measurements_8hpp_source">flowMeasurements.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00062 
00063 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;measuredQubitsOutcomes;
00064 &#32;&#32;&#32;&#32;undirectedGraph::vertex_iterator&#32;vi,&#32;vi_end;
00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(boost::tie(vi,&#32;vi_end)&#32;=&#32;boost::vertices(graph);&#32;vi&#32;!=&#32;vi_end;&#32;vi++)&#32;{
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;vertices&#32;that&#32;are&#32;in&#32;the&#32;first&#32;column</emphasis>
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(*vi&#32;&lt;&#32;numRows){
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotateZ(qureg,*vi,&#32;(-1)*qubitAngles[*vi]);
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hadamard(qureg,*vi);
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m&#32;=&#32;measure(qureg,*vi);
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measuredQubitsOutcomes.push_back(m);
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(*vi&#32;&gt;=&#32;numRows){
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;correctedAngle;
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;correctedAngle&#32;=&#32;<link linkend="_graph_traversal_flows_8hpp_1a2b29f1efbcbccfbe77481e5b1a9647c8">computeCorrectedAngle</link>(graph,measuredQubitsOutcomes,*vi,numRows,qubitAngles[*vi]);
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotateZ(qureg,*vi,&#32;(-1)*correctedAngle);
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hadamard(qureg,*vi);
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m&#32;=&#32;measure(qureg,*vi);
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measuredQubitsOutcomes.push_back(m);
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;attempting&#32;to&#32;measure&#32;nothing?&quot;</emphasis>;
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00082 &#32;&#32;&#32;&#32;}
00083 
00084 
00085 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;measuredQubitsOutcomes;
00086 }
</programlisting></section>
<anchor xml:id="_flow_measurements_8hpp_1a202e2cd0edb82aacb879f3ad4360dc36"/><section>
    <title>printResultsToScreen()</title>
<indexterm><primary>printResultsToScreen</primary><secondary>flowMeasurements.hpp</secondary></indexterm>
<indexterm><primary>flowMeasurements.hpp</primary><secondary>printResultsToScreen</secondary></indexterm>
<para><computeroutput>void printResultsToScreen (std::vector&lt; int &gt; measuredQubitsOutcomes, int numRows, int numCols)</computeroutput></para><para>

<para>Prints the measurement results to the screen. </para>
</para>

<para>This function prints the measurement results to the screen, including the measured qubit outcomes and the outcome lattice.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>measuredQubitsOutcomes</entry><entry>
<para>A vector containing the outcomes of qubit measurements. </para>
</entry>
                            </row>
                            <row>
<entry>numRows</entry><entry>
<para>The number of rows in the outcome lattice. </para>
</entry>
                            </row>
                            <row>
<entry>numCols</entry><entry>
<para>The number of columns in the outcome lattice. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_flow_measurements_8hpp_source_1l00099">99</link> of file <link linkend="_flow_measurements_8hpp_source">flowMeasurements.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00103 &#32;&#32;<emphasis role="comment">/*</emphasis>
00104 <emphasis role="comment">&#32;&#32;Print&#32;results&#32;to&#32;scree</emphasis>
00105 <emphasis role="comment">&#32;&#32;*/</emphasis>
00106 
00107 &#32;&#32;<emphasis role="comment">//&#32;Print&#32;results&#32;to&#32;screen</emphasis>
00108 &#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
00109 &#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
00110 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Measured&#32;outcome&#32;vector&#32;has&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;measuredQubitsOutcomes.size()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;qubits.&quot;</emphasis>&#32;&#32;&lt;&lt;&#32;std::endl;&#32;
00111 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;The&#32;measurements&#32;are:&#32;&quot;</emphasis>;
00112 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i:measuredQubitsOutcomes){
00113 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;i&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
00114 &#32;&#32;}
00115 &#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
00116 &#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
00117 
00118 
00119 std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Measured&#32;outcome&#32;lattice:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00120 &#32;&#32;std::vector&lt;std::vector&lt;int&gt;&gt;&#32;latticeOutcomes&#32;=&#32;
00121 &#32;&#32;&#32;&#32;<link linkend="_flow_measurements_8hpp_1a794636e4b832401d96581e54141cbcba">returnMeasQubitOutcomesLattice</link>(measuredQubitsOutcomes,numRows,numCols);
00122 
00123 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;row&#32;:&#32;latticeOutcomes)&#32;{
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;number&#32;:&#32;row)&#32;{
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;number&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00129 
00130 }
</programlisting></section>
<anchor xml:id="_flow_measurements_8hpp_1a794636e4b832401d96581e54141cbcba"/><section>
    <title>returnMeasQubitOutcomesLattice()</title>
<indexterm><primary>returnMeasQubitOutcomesLattice</primary><secondary>flowMeasurements.hpp</secondary></indexterm>
<indexterm><primary>flowMeasurements.hpp</primary><secondary>returnMeasQubitOutcomesLattice</secondary></indexterm>
<para><computeroutput>std::vector&lt; std::vector&lt; int &gt; &gt; returnMeasQubitOutcomesLattice (std::vector&lt; int &gt; measOutcomes, int numRows, int numCols)</computeroutput></para><para>

<para>Constructs a lattice representation of qubit measurement outcomes. </para>
</para>

<para>This function constructs a lattice representation of qubit measurement outcomes based on the provided <computeroutput>measOutcomes</computeroutput> vector, number of rows (<computeroutput>numRows</computeroutput>), and number of columns (<computeroutput>numCols</computeroutput>).</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>measOutcomes</entry><entry>
<para>A vector containing the outcomes of qubit measurements. </para>
</entry>
                            </row>
                            <row>
<entry>numRows</entry><entry>
<para>The number of rows in the lattice. </para>
</entry>
                            </row>
                            <row>
<entry>numCols</entry><entry>
<para>The number of columns in the lattice. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A two-dimensional vector representing the lattice with qubit measurement outcomes. </para>
</formalpara>
<formalpara><title>Precondition</title>

<para><computeroutput>measOutcomes</computeroutput> must contain <computeroutput>numRows * numCols</computeroutput> elements. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_flow_measurements_8hpp_source_1l00024">24</link> of file <link linkend="_flow_measurements_8hpp_source">flowMeasurements.hpp</link>.</para>
<programlisting linenumbering="unnumbered{
00025 &#32;&#32;<emphasis role="comment">/*</emphasis>
00026 <emphasis role="comment">&#32;&#32;&#32;&#32;Fill&#32;lattice&#32;with&#32;qubit&#32;measurements</emphasis>
00027 <emphasis role="comment">&#32;&#32;*/</emphasis>
00028 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVertices&#32;=&#32;numRows&#32;*&#32;numCols;
00029 &#32;&#32;&#32;&#32;std::vector&lt;std::vector&lt;int&gt;&gt;&#32;lattice(numRows,&#32;std::vector&lt;int&gt;(numCols,&#32;-1));
00030 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;numbers(numVertices);
00031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numVertices;&#32;i++)&#32;{
00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numbers[i]&#32;=&#32;i;
00033 &#32;&#32;&#32;&#32;}
00034 
00035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;number&#32;:&#32;numbers)&#32;{
00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;row&#32;=&#32;number&#32;%&#32;numRows;
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;col&#32;=&#32;number&#32;/&#32;numRows;
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lattice[row][col]&#32;=&#32;measOutcomes[number];
00039 &#32;&#32;&#32;&#32;}
00040 
00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lattice;
00042 }
</programlisting></section>
</section>
</section>
