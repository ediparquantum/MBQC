<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_20230314___functions___v1_8hpp_source" xml:lang="en-US">
<title>20230314_Functions_V1.hpp</title>
<indexterm><primary>src/archive/filesToGoThrough/20230314_Functions_V1.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_20230314___functions___v1_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;QuEST.h&gt;</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00002"/>00002 <emphasis role="comment">//#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00006"/>00006 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00007"/>00007 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00008"/>00008 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00009"/>00009 <emphasis role="comment">/*&#32;</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00010"/>00010 <emphasis role="comment">&#32;&#32;Create&#32;vector&#32;of&#32;digits&#32;from&#32;0&#32;to&#32;N,&#32;separated&#32;by&#32;1</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00011"/>00011 <emphasis role="comment">&#32;&#32;To&#32;represent&#32;the&#32;a&#32;line&#32;of&#32;nodes&#32;connected&#32;by&#32;one&#32;</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00012"/>00012 <emphasis role="comment">&#32;&#32;edge&#32;()-()-()-&#32;-&#32;-&#32;-()&#32;(1,2,3,...,N)</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00013"/>00013 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00014"/><link linkend="_20230314___functions___v1_8hpp_1aa6c7ea81b30e713a1f641e9a86e5f0a8">00014</link> vector&lt;int&gt;&#32;<link linkend="_20230314___functions___v1_8hpp_1aa6c7ea81b30e713a1f641e9a86e5f0a8">getPathGraph</link>(<emphasis role="keywordtype">int</emphasis>&#32;numberQubits)
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00015"/>00015 {
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00016"/>00016 &#32;&#32;vector&lt;int&gt;&#32;pathGraph;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00017"/>00017 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numberQubits;&#32;i++&#32;)
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00018"/>00018 &#32;&#32;{
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;pathGraph.push_back(i);&#32;&#32;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00020"/>00020 &#32;&#32;}
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00021"/>00021 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pathGraph;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00022"/>00022 }
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00023"/>00023 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00024"/>00024 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00025"/>00025 <emphasis role="comment">&#32;&#32;Linear&#32;flow,&#32;f(i)&#32;=&#32;i&#32;+&#32;1</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00026"/>00026 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00027"/><link linkend="_20230314___functions___v1_8hpp_1a89ebfc1e65a5c1ee3c420843c016be0e">00027</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_20230314___functions___v1_8hpp_1a89ebfc1e65a5c1ee3c420843c016be0e">getFutureQubit</link>(<emphasis role="keywordtype">int</emphasis>&#32;currentQubit){
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00028"/>00028 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;futureQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00029"/>00029 &#32;&#32;futureQubit&#32;=&#32;currentQubit&#32;+&#32;1;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00030"/>00030 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00031"/>00031 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;futureQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00032"/>00032 }
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00033"/>00033 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00034"/>00034 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00035"/>00035 <emphasis role="comment">&#32;&#32;Linear&#32;flow,&#32;f^{-1}(i)&#32;=&#32;i&#32;-&#32;1</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00036"/>00036 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00037"/><link linkend="_20230314___functions___v1_8hpp_1af44420884b989805a33b6b4cb35fb2e1">00037</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_20230314___functions___v1_8hpp_1af44420884b989805a33b6b4cb35fb2e1">getPastQubit</link>(<emphasis role="keywordtype">int</emphasis>&#32;currentQubit){
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00038"/>00038 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pastQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00039"/>00039 &#32;&#32;pastQubit&#32;=&#32;currentQubit&#32;-&#32;1;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00040"/>00040 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00041"/>00041 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pastQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00042"/>00042 }
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00043"/>00043 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00044"/>00044 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00045"/>00045 <emphasis role="comment">&#32;&#32;Linear&#32;cluster&#32;vector&#32;with&#32;the&#32;flow,&#32;f.</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00046"/>00046 <emphasis role="comment">&#32;&#32;f(i)&#32;=&#32;i&#32;+&#32;1,&#32;if&#32;i&#32;is&#32;last&#32;element&#32;of&#32;vector,&#32;then</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00047"/>00047 <emphasis role="comment">&#32;&#32;throw&#32;error.</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00048"/>00048 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00049"/><link linkend="_20230314___functions___v1_8hpp_1adf1055c60f73eb56e5e51d97b15feeaf">00049</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_20230314___functions___v1_8hpp_1adf1055c60f73eb56e5e51d97b15feeaf">getFutureQubitPathGraph</link>(vector&lt;int&gt;&#32;pathGraph&#32;,<emphasis role="keywordtype">int</emphasis>&#32;currentQubit)
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00050"/>00050 {
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00051"/>00051 <emphasis role="keywordtype">int</emphasis>&#32;futureQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00052"/>00052 <emphasis role="keyword">auto</emphasis>&#32;graphSize&#32;=&#32;pathGraph.size();
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00053"/>00053 <emphasis role="keywordflow">if</emphasis>&#32;(currentQubit&#32;==&#32;pathGraph[graphSize-1])&#32;{
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;futureQubit&#32;=&#32;currentQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00055"/>00055 }&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00056"/>00056 &#32;&#32;futureQubit&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1a89ebfc1e65a5c1ee3c420843c016be0e">getFutureQubit</link>(currentQubit);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00057"/>00057 }
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00058"/>00058 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;futureQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00059"/>00059 }
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00060"/>00060 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00061"/>00061 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00062"/>00062 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00063"/>00063 <emphasis role="comment">&#32;&#32;Linear&#32;cluster&#32;vector&#32;with&#32;the&#32;flow,&#32;f.</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00064"/>00064 <emphasis role="comment">&#32;&#32;f^{-1}(i)&#32;=&#32;i&#32;-&#32;1,&#32;if&#32;i&#32;is&#32;first&#32;element&#32;of&#32;vector,&#32;then</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00065"/>00065 <emphasis role="comment">&#32;&#32;throw&#32;error.</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00066"/>00066 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00067"/><link linkend="_20230314___functions___v1_8hpp_1a1be0a6fc146b59a21929f000546f57a4">00067</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_20230314___functions___v1_8hpp_1a1be0a6fc146b59a21929f000546f57a4">getPastQubitPathGraph</link>(vector&lt;int&gt;&#32;pathGraph&#32;,<emphasis role="keywordtype">int</emphasis>&#32;currentQubit)
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00068"/>00068 {
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00069"/>00069 <emphasis role="keywordtype">int</emphasis>&#32;pastQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00070"/>00070 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00071"/>00071 <emphasis role="keywordflow">if</emphasis>&#32;(currentQubit&#32;==&#32;pathGraph[0])&#32;{
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00072"/>00072 &#32;&#32;pastQubit&#32;=&#32;currentQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00073"/>00073 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00074"/>00074 }&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00075"/>00075 &#32;&#32;pastQubit&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1af44420884b989805a33b6b4cb35fb2e1">getPastQubit</link>(currentQubit);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00076"/>00076 }
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00077"/>00077 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pastQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00078"/>00078 }
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00079"/>00079 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00080"/>00080 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00081"/>00081 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00082"/>00082 <emphasis role="comment">&#32;&#32;Get&#32;the&#32;neighbourhood&#32;size</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00083"/>00083 <emphasis role="comment">&#32;&#32;Look&#32;at&#32;the&#32;linear&#32;cluster&#32;and&#32;the&#32;current&#32;qubit</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00084"/>00084 <emphasis role="comment">&#32;&#32;Determine&#32;if&#32;there&#32;are&#32;one&#32;or&#32;two&#32;neighbours&#32;to&#32;the&#32;</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00085"/>00085 <emphasis role="comment">&#32;&#32;current&#32;qubit&#32;based&#32;on&#32;the&#32;qubit&#32;position&#32;in&#32;the</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00086"/>00086 <emphasis role="comment">&#32;&#32;linear&#32;cluster</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00087"/>00087 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00088"/><link linkend="_20230314___functions___v1_8hpp_1aebc14db121869c416ee59e033335ad63">00088</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_20230314___functions___v1_8hpp_1aebc14db121869c416ee59e033335ad63">getOpenNeighbourhoodSizePathGraph</link>(vector&lt;int&gt;&#32;pathGraph&#32;,<emphasis role="keywordtype">int</emphasis>&#32;currentQubit){
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00089"/>00089 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;graphSize&#32;=&#32;pathGraph.size();
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00090"/>00090 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;neighbourhoodSize;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00091"/>00091 &#32;&#32;<emphasis role="comment">//&#32;Logic&#32;for&#32;getting&#32;nieghbors</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00092"/>00092 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentQubit&#32;==&#32;0)&#32;{&#32;<emphasis role="comment">//&#32;qubit&#32;is&#32;first</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;neighbourhoodSize&#32;=&#32;1;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00094"/>00094 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentQubit&#32;==&#32;pathGraph[graphSize-1])&#32;{&#32;<emphasis role="comment">//&#32;qubit&#32;is&#32;last</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;neighbourhoodSize&#32;=&#32;1;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00096"/>00096 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="comment">//&#32;all&#32;else</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;neighbourhoodSize&#32;=&#32;2;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00098"/>00098 &#32;&#32;}
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00099"/>00099 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00100"/>00100 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;neighbourhoodSize;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00101"/>00101 }
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00102"/>00102 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00103"/>00103 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00104"/>00104 <emphasis role="comment">&#32;&#32;Get&#32;the&#32;neighbourhood&#32;of&#32;the&#32;qubit&#32;based&#32;on&#32;the&#32;linear&#32;cluster&#32;and&#32;the&#32;</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00105"/>00105 <emphasis role="comment">&#32;&#32;qubits</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00106"/>00106 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00107"/><link linkend="_20230314___functions___v1_8hpp_1a1a2f9b091ffe6a2814a21e720faafbe7">00107</link> vector&lt;int&gt;&#32;<link linkend="_20230314___functions___v1_8hpp_1a1a2f9b091ffe6a2814a21e720faafbe7">getOpenNeighbourhoodPathGraph</link>(vector&lt;int&gt;&#32;pathGraph&#32;,<emphasis role="keywordtype">int</emphasis>&#32;currentQubit){
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00108"/>00108 &#32;&#32;vector&lt;int&gt;&#32;neighbours;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00109"/>00109 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;graphSize&#32;=&#32;pathGraph.size();
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00110"/>00110 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;firstQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00111"/>00111 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pastQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00112"/>00112 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;futureQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00113"/>00113 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00114"/>00114 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentQubit&#32;==&#32;pathGraph[0])&#32;{&#32;<emphasis role="comment">//&#32;qubit&#32;is&#32;first&#32;in&#32;graph</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;firstQubit&#32;=&#32;currentQubit&#32;+&#32;1;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;neighbours.push_back(firstQubit);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00117"/>00117 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentQubit&#32;==&#32;pathGraph[graphSize-1])&#32;{&#32;<emphasis role="comment">//&#32;qubit&#32;is&#32;last&#32;in&#32;graph</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;firstQubit&#32;=&#32;currentQubit&#32;-&#32;1;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;neighbours.push_back(firstQubit);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00120"/>00120 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="comment">//&#32;all&#32;else</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;pastQubit&#32;=&#32;currentQubit&#32;-&#32;1;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;futureQubit&#32;=&#32;currentQubit&#32;+&#32;1;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;neighbours.push_back(pastQubit);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;neighbours.push_back(futureQubit);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00125"/>00125 &#32;&#32;}
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00126"/>00126 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00127"/>00127 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;neighbours;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00128"/>00128 }
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00129"/>00129 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00130"/>00130 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00131"/><link linkend="_20230314___functions___v1_8hpp_1a9c227d82e03f906a192a861db4ddf6ab">00131</link> &#32;&#32;qreal&#32;<link linkend="_20230314___functions___v1_8hpp_1a9c227d82e03f906a192a861db4ddf6ab">computeXCorrectionAnglePathGraph</link>(
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;pathGraph,&#32;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;measuredQubitsOutcomes,
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;vector&lt;qreal&gt;&#32;qubitAngles,
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;currentQubit)
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00136"/>00136 &#32;&#32;{
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;xCorrectionAngle;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pastQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;pastQubit&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1a1be0a6fc146b59a21929f000546f57a4">getPastQubitPathGraph</link>(pathGraph,currentQubit);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;inverseFlowQubitOutcome&#32;=&#32;measuredQubitsOutcomes[pastQubit];
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;xCorrectionAngle&#32;=&#32;pow(-1,&#32;inverseFlowQubitOutcome)*qubitAngles[currentQubit];
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00142"/>00142 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xCorrectionAngle;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00144"/>00144 &#32;&#32;}
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00145"/>00145 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00146"/>00146 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00147"/>00147 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00148"/><link linkend="_20230314___functions___v1_8hpp_1acf8731fbf6fdc066d371b78a916dc431">00148</link> &#32;&#32;qreal&#32;<link linkend="_20230314___functions___v1_8hpp_1acf8731fbf6fdc066d371b78a916dc431">computeZCorrectionAnglePathGraph</link>(
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;pathGraph,&#32;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;measuredQubitsOutcomes,
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;currentQubit)
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00152"/>00152 &#32;&#32;{&#32;&#32;&#32;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;zCorrectionAngle;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pastQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pastPastQubit;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;inverseFlowQubitOutcome;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;pastQubit&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1a1be0a6fc146b59a21929f000546f57a4">getPastQubitPathGraph</link>(pathGraph,currentQubit);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;pastPastQubit&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1a1be0a6fc146b59a21929f000546f57a4">getPastQubitPathGraph</link>(pathGraph,pastQubit);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;inverseFlowQubitOutcome&#32;=&#32;measuredQubitsOutcomes[pastPastQubit];
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;zCorrectionAngle&#32;=&#32;M_PI*inverseFlowQubitOutcome;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zCorrectionAngle;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00164"/>00164 &#32;&#32;}
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00165"/>00165 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00166"/><link linkend="_20230314___functions___v1_8hpp_1a93cdcf18ac63c09cd8354e765238386a">00166</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_20230314___functions___v1_8hpp_1a93cdcf18ac63c09cd8354e765238386a">countElements</link>(vector&lt;int&gt;&#32;v,&#32;<emphasis role="keywordtype">int</emphasis>&#32;element)&#32;{
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;v.begin();&#32;it&#32;!=&#32;v.end();&#32;++it)&#32;{
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*it&#32;==&#32;element)&#32;{
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++count;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;}
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00174"/>00174 }
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00175"/>00175 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00176"/><link linkend="_20230314___functions___v1_8hpp_1acdb0932776bd659eddba9f2942af2c15">00176</link> vector&lt;int&gt;&#32;<link linkend="_20230314___functions___v1_8hpp_1acdb0932776bd659eddba9f2942af2c15">runMbqcPathGraph</link>(
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Qureg&#32;qureg,
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;pathGraph,
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;qreal&gt;&#32;qubitAngles){
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00180"/>00180 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00181"/>00181 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;vector&lt;qreal&gt;&#32;updatedQubitAngles;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;vector&lt;int&gt;&#32;measuredQubitsOutcomes;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numberQubits&#32;=&#32;pathGraph.size();
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;qreal&#32;X1;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;firstQubitIndex=0;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;secondQubitIndex=1;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00189"/>00189 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Measure&#32;first&#32;qubit&#32;and&#32;update&#32;angle</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;updatedQubitAngles.push_back(qubitAngles[firstQubitIndex]);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;rotateZ(qureg,firstQubitIndex,&#32;(-1)*updatedQubitAngles[firstQubitIndex]);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;hadamard(qureg,firstQubitIndex);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;measuredQubitsOutcomes.push_back(measure(qureg,firstQubitIndex));
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00195"/>00195 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;measure&#32;second&#32;qubit</emphasis>
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;X1&#32;=&#32;pow((-1),measuredQubitsOutcomes[firstQubitIndex])*qubitAngles[secondQubitIndex];
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;updatedQubitAngles[secondQubitIndex]&#32;=&#32;X1;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;rotateZ(qureg,secondQubitIndex,&#32;(-1)*updatedQubitAngles[secondQubitIndex]);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;hadamard(qureg,secondQubitIndex);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;measuredQubitsOutcomes.push_back(measure(qureg,secondQubitIndex));
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00203"/>00203 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;currentQubit=2;currentQubit&lt;numberQubits;currentQubit++)
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;X;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;Z;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qreal&#32;phiPrime;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;outcome;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00210"/>00210 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;X&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1a9c227d82e03f906a192a861db4ddf6ab">computeXCorrectionAnglePathGraph</link>(
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pathGraph,&#32;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measuredQubitsOutcomes,
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubitAngles,
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentQubit);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Z&#32;=&#32;<link linkend="_20230314___functions___v1_8hpp_1acf8731fbf6fdc066d371b78a916dc431">computeZCorrectionAnglePathGraph</link>(
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pathGraph,&#32;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measuredQubitsOutcomes,
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentQubit);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;phiPrime&#32;=&#32;X+Z;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotateZ(qureg,currentQubit,&#32;(-1)*phiPrime);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hadamard(qureg,currentQubit);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outcome&#32;=&#32;measure(qureg,currentQubit);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measuredQubitsOutcomes.push_back(outcome);
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00228"/>00228 
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;measuredQubitsOutcomes;
<anchor xml:id="_20230314___functions___v1_8hpp_source_1l00230"/>00230 }
</programlisting></section>
