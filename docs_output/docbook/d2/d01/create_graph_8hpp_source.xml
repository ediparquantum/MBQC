<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_create_graph_8hpp_source" xml:lang="en-US">
<title>createGraph.hpp</title>
<indexterm><primary>src/archive/filesToGoThrough/createGraph.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_create_graph_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_create_graph_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;boost/graph/adjacency_list.hpp&gt;</emphasis>
<anchor xml:id="_create_graph_8hpp_source_1l00003"/>00003 
<anchor xml:id="_create_graph_8hpp_source_1l00004"/>00004 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>boost;
<anchor xml:id="_create_graph_8hpp_source_1l00005"/>00005 
<anchor xml:id="_create_graph_8hpp_source_1l00006"/><link linkend="_create_graph_8hpp_1ad531f0530c52e2baed8840517b52b457">00006</link> <emphasis role="keyword">typedef</emphasis>&#32;boost::property&lt;boost::edge_weight_t,&#32;int&gt;&#32;<link linkend="_create_graph_8hpp_1ad531f0530c52e2baed8840517b52b457">EdgeWeightProperty</link>;
<anchor xml:id="_create_graph_8hpp_source_1l00007"/><link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">00007</link> <emphasis role="keyword">typedef</emphasis>&#32;boost::adjacency_list&lt;boost::listS,&#32;boost::vecS,boost::undirectedS,boost::no_property,EdgeWeightProperty&gt;&#32;<link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>;
<anchor xml:id="_create_graph_8hpp_source_1l00008"/><link linkend="_create_graph_8hpp_1af04c50f717d4bda41f0c58fe0eece059">00008</link> <emphasis role="keyword">typedef</emphasis>&#32;boost::graph_traits&lt;undirectedGraph&gt;::edge_iterator&#32;<link linkend="_create_graph_8hpp_1af04c50f717d4bda41f0c58fe0eece059">edge_iterator</link>;
<anchor xml:id="_create_graph_8hpp_source_1l00009"/><link linkend="_create_graph_8hpp_1a9451df0dac964b257bedb5e60547824e">00009</link> <emphasis role="keyword">typedef</emphasis>&#32;boost::graph_traits&lt;undirectedGraph&gt;::vertex_iterator&#32;<link linkend="_create_graph_8hpp_1a9451df0dac964b257bedb5e60547824e">vertex_iterator</link>;
<anchor xml:id="_create_graph_8hpp_source_1l00010"/>00010 
<anchor xml:id="_create_graph_8hpp_source_1l00011"/>00011 
<anchor xml:id="_create_graph_8hpp_source_1l00012"/>00012 
<anchor xml:id="_create_graph_8hpp_source_1l00013"/>00013 <emphasis role="comment">//&#32;create&#32;a&#32;1D&#32;path&#32;graph&#32;on&#32;1xn&#32;vertices</emphasis>
<anchor xml:id="_create_graph_8hpp_source_1l00014"/><link linkend="_create_graph_8hpp_1abe67d4f4ed1169c1376d3a14fd9d144d">00014</link> <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;<link linkend="_create_graph_8hpp_1abe67d4f4ed1169c1376d3a14fd9d144d">createPathGraph</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{&#32;
<anchor xml:id="_create_graph_8hpp_source_1l00015"/>00015 &#32;&#32;<link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;g(n);
<anchor xml:id="_create_graph_8hpp_source_1l00016"/>00016 
<anchor xml:id="_create_graph_8hpp_source_1l00017"/>00017 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;n-1;&#32;i++)&#32;{&#32;&#32;<emphasis role="comment">//&#32;add&#32;edges&#32;to&#32;create&#32;a&#32;path&#32;graph</emphasis>
<anchor xml:id="_create_graph_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;add_edge(i,&#32;i+1,&#32;g);
<anchor xml:id="_create_graph_8hpp_source_1l00019"/>00019 &#32;&#32;}
<anchor xml:id="_create_graph_8hpp_source_1l00020"/>00020 
<anchor xml:id="_create_graph_8hpp_source_1l00021"/>00021 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;g;
<anchor xml:id="_create_graph_8hpp_source_1l00022"/>00022 }
<anchor xml:id="_create_graph_8hpp_source_1l00023"/>00023 
<anchor xml:id="_create_graph_8hpp_source_1l00024"/>00024 <emphasis role="comment">//&#32;create&#32;a&#32;2D&#32;lattice&#32;graph&#32;with&#32;n&#32;x&#32;m&#32;vertices</emphasis>
<anchor xml:id="_create_graph_8hpp_source_1l00025"/><link linkend="_create_graph_8hpp_1aabb013bb6de93b1ca2ff83e1d7d200c7">00025</link> <link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;<link linkend="_create_graph_8hpp_1aabb013bb6de93b1ca2ff83e1d7d200c7">createLatticeGraph</link>(<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">int</emphasis>&#32;m)&#32;{&#32;
<anchor xml:id="_create_graph_8hpp_source_1l00026"/>00026 &#32;&#32;<link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;g(n&#32;*&#32;m);
<anchor xml:id="_create_graph_8hpp_source_1l00027"/>00027 
<anchor xml:id="_create_graph_8hpp_source_1l00028"/>00028 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;n;&#32;i++)&#32;{
<anchor xml:id="_create_graph_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;m;&#32;j++)&#32;{
<anchor xml:id="_create_graph_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j&#32;&lt;&#32;m-1)&#32;add_edge(i*m+j,&#32;i*m+j+1,&#32;g);&#32;<emphasis role="comment">//&#32;add&#32;horizontal&#32;edges</emphasis>
<anchor xml:id="_create_graph_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;n-1)&#32;add_edge(i*m+j,&#32;(i+1)*m+j,&#32;g);&#32;<emphasis role="comment">//&#32;add&#32;vertical&#32;edges</emphasis>
<anchor xml:id="_create_graph_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;}
<anchor xml:id="_create_graph_8hpp_source_1l00033"/>00033 &#32;&#32;}
<anchor xml:id="_create_graph_8hpp_source_1l00034"/>00034 
<anchor xml:id="_create_graph_8hpp_source_1l00035"/>00035 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;g;
<anchor xml:id="_create_graph_8hpp_source_1l00036"/>00036 }
<anchor xml:id="_create_graph_8hpp_source_1l00037"/>00037 
<anchor xml:id="_create_graph_8hpp_source_1l00038"/>00038 
<anchor xml:id="_create_graph_8hpp_source_1l00039"/>00039 
<anchor xml:id="_create_graph_8hpp_source_1l00040"/><link linkend="_create_graph_8hpp_1a95616ef95512e388dddbc756c8644c4d">00040</link> std::vector&lt;undirectedGraph::vertex_descriptor&gt;&#32;<link linkend="_create_graph_8hpp_1a95616ef95512e388dddbc756c8644c4d">get_adjacent_vertices</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&amp;&#32;g,&#32;<emphasis role="keyword">const</emphasis>&#32;undirectedGraph::vertex_descriptor&#32;v)
<anchor xml:id="_create_graph_8hpp_source_1l00041"/>00041 {
<anchor xml:id="_create_graph_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;std::vector&lt;undirectedGraph::vertex_descriptor&gt;&#32;adjacent_vertices;
<anchor xml:id="_create_graph_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;undirectedGraph::adjacency_iterator&#32;ai,&#32;ai_end;
<anchor xml:id="_create_graph_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(boost::tie(ai,&#32;ai_end)&#32;=&#32;boost::adjacent_vertices(v,&#32;g);&#32;ai&#32;!=&#32;ai_end;&#32;++ai)
<anchor xml:id="_create_graph_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;{
<anchor xml:id="_create_graph_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;adjacent_vertices.push_back(*ai);
<anchor xml:id="_create_graph_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;}
<anchor xml:id="_create_graph_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;adjacent_vertices;
<anchor xml:id="_create_graph_8hpp_source_1l00049"/>00049 }
</programlisting></section>
