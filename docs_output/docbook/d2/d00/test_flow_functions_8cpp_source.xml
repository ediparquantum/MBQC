<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test_flow_functions_8cpp_source" xml:lang="en-US">
<title>testFlowFunctions.cpp</title>
<indexterm><primary>tests/testFlowFunctions.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_test_flow_functions_8cpp_source_1l00001"/>00001 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;Title&#32;&#32;:&#32;testGraphProperties.cpp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;Author&#32;:&#32;Jonathan&#32;Miller&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;Date&#32;&#32;&#32;:&#32;20230425&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00005"/>00005 <emphasis role="comment">//&#32;Aim&#32;&#32;&#32;&#32;:&#32;Build&#32;graphs&#32;and&#32;test&#32;properties&#32;of&#32;graphs.&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00006"/>00006 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;As&#32;graph&#32;types&#32;grow&#32;in&#32;number,&#32;separate&#32;tests&#32;&#32;//</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00007"/>00007 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;across&#32;multiple&#32;files&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00009"/>00009 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00012"/>00012 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00013"/>00013 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00014"/>00014 <emphasis role="preprocessor">#include&#32;&lt;set&gt;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00015"/>00015 <emphasis role="preprocessor">#include&#32;&lt;numeric&gt;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00016"/>00016 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00017"/>00017 <emphasis role="preprocessor">#include&#32;&lt;QuEST.h&gt;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00018"/>00018 <emphasis role="preprocessor">#include&#32;&lt;boost/graph/adjacency_list.hpp&gt;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00019"/>00019 <emphasis role="preprocessor">#include&#32;&lt;boost/graph/graph_utility.hpp&gt;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00020"/>00020 <emphasis role="preprocessor">#include&#32;&lt;boost/container/vector.hpp&gt;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00021"/>00021 <emphasis role="preprocessor">#include&#32;&quot;/Users/jmille15/Projects/QuEST/QuEST/projects/MBQC/src/graphs/graphConstructions.hpp&quot;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00022"/>00022 <emphasis role="preprocessor">#include&#32;&quot;/Users/jmille15/Projects/QuEST/QuEST/projects/MBQC/src/graphs/graphTraversalFlows.hpp&quot;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00023"/>00023 <emphasis role="preprocessor">#include&#32;&quot;/Users/jmille15/Projects/QuEST/QuEST/projects/MBQC/src/genericHelperFunctions/generalAssertFunctions.hpp&quot;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00024"/>00024 <emphasis role="preprocessor">#include&#32;&quot;/Users/jmille15/Projects/QuEST/QuEST/projects/MBQC/src/testFunctions/graphAssertFunctions.hpp&quot;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00025"/>00025 <emphasis role="preprocessor">#include&#32;&quot;/Users/jmille15/Projects/QuEST/QuEST/projects/MBQC/src/genericHelperFunctions/writeGraphGraphVizDotFile.hpp&quot;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00026"/>00026 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00027"/>00027 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>boost;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00028"/>00028 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00029"/><link linkend="_test_flow_functions_8cpp_1af845bf432b56cdda82dbde8011882168">00029</link> <emphasis role="keyword">typedef</emphasis>&#32;boost::adjacency_list&lt;boost::vecS,&#32;boost::vecS,boost::undirectedS&gt;&#32;<link linkend="_test_flow_functions_8cpp_1af845bf432b56cdda82dbde8011882168">undirectedGraph</link>;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00030"/><link linkend="_test_flow_functions_8cpp_1af04c50f717d4bda41f0c58fe0eece059">00030</link> <emphasis role="keyword">typedef</emphasis>&#32;boost::graph_traits&lt;undirectedGraph&gt;::edge_iterator&#32;<link linkend="_test_flow_functions_8cpp_1af04c50f717d4bda41f0c58fe0eece059">edge_iterator</link>;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00031"/><link linkend="_test_flow_functions_8cpp_1a9451df0dac964b257bedb5e60547824e">00031</link> <emphasis role="keyword">typedef</emphasis>&#32;boost::graph_traits&lt;undirectedGraph&gt;::vertex_iterator&#32;<link linkend="_test_flow_functions_8cpp_1a9451df0dac964b257bedb5e60547824e">vertex_iterator</link>;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00032"/>00032 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00033"/>00033 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00034"/>00034 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00035"/>00035 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00036"/>00036 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00037"/>00037 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00038"/>00038 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00039"/>00039 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00040"/>00040 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00041"/>00041 <emphasis role="comment">//&#32;Quick&#32;and&#32;dirty&#32;angle&#32;computation&#32;in&#32;2D&#32;lattice&#32;when&#32;using&#32;all&#32;possible&#32;values</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00042"/>00042 <emphasis role="comment">//&#32;on&#32;the&#32;Z&#32;correction</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00043"/><link linkend="_test_flow_functions_8cpp_1a36b23c23da3c64cf899626c72b8a0a81">00043</link> qreal&#32;<link linkend="_test_flow_functions_8cpp_1a36b23c23da3c64cf899626c72b8a0a81">correctionOutcomesForExampleNotPerm</link>(std::vector&lt;int&gt;&#32;outcomeVector,qreal&#32;inputAngle){
<anchor xml:id="_test_flow_functions_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;qreal&#32;expectedCorrectedAngle;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;expectedCorrectedAngle&#32;=&#32;(pow((-1),outcomeVector[6])*inputAngle)&#32;+&#32;M_PI*(outcomeVector[1]+outcomeVector[5]+outcomeVector[7]);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00046"/>00046 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;expectedCorrectedAngle;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00048"/>00048 }
<anchor xml:id="_test_flow_functions_8cpp_source_1l00049"/>00049 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00050"/>00050 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00051"/><link linkend="_test_flow_functions_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">00051</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_test_flow_functions_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link>(){
<anchor xml:id="_test_flow_functions_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numRows&#32;=&#32;5;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numCols&#32;=&#32;5;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;expectedTotalVertices;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;boostCallTotalVertices;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00057"/>00057 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<link linkend="_create_graph_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;latticeGraph;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00061"/>00061 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;latticeGraph&#32;=&#32;<link linkend="_create_graph_8hpp_1aabb013bb6de93b1ca2ff83e1d7d200c7">createLatticeGraph</link>(numRows,&#32;numCols);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;expectedTotalVertices&#32;=&#32;numRows*numCols;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;boostCallTotalVertices&#32;=&#32;boost::num_vertices(latticeGraph);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00065"/>00065 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;graph&#32;to&#32;file</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;std::string&#32;fileDir&#32;=&#32;<emphasis role="stringliteral">&quot;/Users/jmille15/Projects/QuEST/QuEST/projects/MBQC/figs&quot;</emphasis>;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;std::string&#32;graphName&#32;=&#32;<emphasis role="stringliteral">&quot;lattice2DGraph&quot;</emphasis>;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;std::string&#32;format&#32;=&#32;<emphasis role="stringliteral">&quot;png&quot;</emphasis>;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<link linkend="_write_graph_graph_viz_dot_file_8hpp_1a3d553b54b16922ee146bfb33201a3993">printGraphToFile</link>(latticeGraph,fileDir,graphName,format);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00072"/>00072 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00073"/>00073 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;each&#32;vertex&#32;(forward&#32;and&#32;backward&#32;flow)&#32;give&#32;</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;as&#32;expectd&#32;by&#32;internal&#32;computation&#32;of&#32;function</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a3241060bf4552dac98da626843460bb3">assertFlowFunctionsPerformExpected</link>(latticeGraph,numRows);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00077"/>00077 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00078"/>00078 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00079"/>00079 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;to&#32;confirm&#32;neighbours&#32;are&#32;correct</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;asserting&#32;for&#32;a&#32;5x5&#32;graph</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;std::vector&lt;std::vector&lt;int&gt;&gt;&#32;expectedNeighbourhood&#32;=&#32;{{1,5},{0,6,2},{1,7,3},{2,8,4},{3,9},{0,6,10},{1,5,7,11},{2,6,8,12},{3,7,9,13},{4,8,14},{5,11,15},{6,10,12,16},{7,11,13,17},{8,12,14,18},{9,13,19},{10,16,20},{11,15,17,21},{12,16,18,22},{13,17,19,23},{14,18,24},{15,21},{16,20,22},{17,21,23},{18,22,24},{19,23}};
<anchor xml:id="_test_flow_functions_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a5c3f8d6a6068b10ca7ca8f2f4515cbcd">assertNieghbours</link>(latticeGraph,expectedNeighbourhood);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00086"/>00086 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00087"/>00087 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Need&#32;to&#32;write&#32;tests&#32;that&#32;comfirm&#32;the&#32;angle&#32;updates</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Select&#32;some&#32;corner&#32;vertices,edge&#32;vertices&#32;and&#32;middle&#32;vertices.</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00090"/>00090 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;outcomeVectorZeros(10,0);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;outcomeVectorOnes(10,1);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;outcomeVectorOnesAndZeros&#32;=&#32;{0,1,0,0,0,0,1,0,0,0};
<anchor xml:id="_test_flow_functions_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;qreal&#32;expectedCorrectedAngleZeros;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;qreal&#32;expectedCorrectedAngleOnes;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;qreal&#32;expectedCorrectedAngleOnesAndZeros;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertex&#32;=&#32;11;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;qreal&#32;inputAngle&#32;=&#32;M_PI&#32;/&#32;4.0;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;All&#32;zero&#32;measurement&#32;outcomes</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;expectedCorrectedAngleZeros&#32;=&#32;<link linkend="_test_flow_functions_8cpp_1a36b23c23da3c64cf899626c72b8a0a81">correctionOutcomesForExampleNotPerm</link>(outcomeVectorZeros,inputAngle);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a67fc70f2265e3ca43a7871939ae44a95">assertCorrection</link>(latticeGraph,outcomeVectorZeros,vertex,numRows,inputAngle,expectedCorrectedAngleZeros);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00104"/>00104 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;All&#32;one&#32;measurement&#32;outcomes</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;expectedCorrectedAngleOnes&#32;=&#32;<link linkend="_test_flow_functions_8cpp_1a36b23c23da3c64cf899626c72b8a0a81">correctionOutcomesForExampleNotPerm</link>(outcomeVectorOnes,inputAngle);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a67fc70f2265e3ca43a7871939ae44a95">assertCorrection</link>(latticeGraph,outcomeVectorOnes,vertex,numRows,inputAngle,expectedCorrectedAngleOnes);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00108"/>00108 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Some&#32;ones&#32;and&#32;zeros&#32;outcomes</emphasis>
<anchor xml:id="_test_flow_functions_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;expectedCorrectedAngleOnesAndZeros&#32;=&#32;<link linkend="_test_flow_functions_8cpp_1a36b23c23da3c64cf899626c72b8a0a81">correctionOutcomesForExampleNotPerm</link>(outcomeVectorOnesAndZeros,inputAngle);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<link linkend="_graph_assert_functions_8hpp_1a67fc70f2265e3ca43a7871939ae44a95">assertCorrection</link>(latticeGraph,outcomeVectorOnesAndZeros,vertex,numRows,inputAngle,expectedCorrectedAngleOnesAndZeros);
<anchor xml:id="_test_flow_functions_8cpp_source_1l00112"/>00112 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00113"/>00113 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00114"/>00114 
<anchor xml:id="_test_flow_functions_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_test_flow_functions_8cpp_source_1l00117"/>00117 }
<anchor xml:id="_test_flow_functions_8cpp_source_1l00118"/>00118 
</programlisting></section>
