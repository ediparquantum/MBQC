<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_general_helper_functions_8hpp_source" xml:lang="en-US">
<title>generalHelperFunctions.hpp</title>
<indexterm><primary>src/genericHelperFunctions/generalHelperFunctions.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_general_helper_functions_8hpp_source_1l00001"/>00001 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;Title&#32;&#32;:&#32;generalHelperFunctions.hpp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;Author&#32;:&#32;Jonathan&#32;Miller&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;Date&#32;&#32;&#32;:&#32;20230517&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00005"/>00005 <emphasis role="comment">//&#32;Aim&#32;&#32;&#32;&#32;:&#32;Utility&#32;functions&#32;to&#32;be&#32;ord&apos;d&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00006"/>00006 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;The&#32;functions:</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00007"/>00007 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;&#32;+&#32;markPosition</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00008"/>00008 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;&#32;+&#32;drawRandomUniformInteger</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00009"/>00009 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;&#32;+&#32;calculateColumnRatios</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00010"/>00010 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;&#32;+&#32;getPaths</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00011"/>00011 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;&#32;+&#32;printVector</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00012"/>00012 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;&#32;+&#32;writeVectorToFile</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00013"/>00013 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;&#32;+&#32;writeArrayToFile</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00014"/>00014 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;&#32;+&#32;writeStateToFile</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00015"/>00015 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;They&#32;perform&#32;various&#32;tasks&#32;such&#32;as&#32;printing&#32;</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00016"/>00016 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;values,&#32;calculating&#32;ratios,&#32;writing&#32;data&#32;to&#32;files,&#32;</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00017"/>00017 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;and&#32;obtaining&#32;paths.</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00019"/>00019 <emphasis role="comment"></emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00020"/>00020 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00021"/>00021 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00022"/>00022 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00023"/>00023 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00024"/>00024 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00025"/>00025 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00026"/>00026 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00032"/><link linkend="_general_helper_functions_8hpp_1ac42846f45bd917af1aef32178df53bbf">00032</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_general_helper_functions_8hpp_1ac42846f45bd917af1aef32178df53bbf">markPosition</link>()&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Here&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00034"/>00034 }
<anchor xml:id="_general_helper_functions_8hpp_source_1l00035"/>00035 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00036"/>00036 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00037"/>00037 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00038"/>00038 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00039"/>00039 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00040"/>00040 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00053"/><link linkend="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46">00053</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46">drawRandomUniformInteger</link>(<emphasis role="keywordtype">int</emphasis>&#32;min,&#32;<emphasis role="keywordtype">int</emphasis>&#32;max)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;std::random_device&#32;rd;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;std::mt19937&#32;generator(rd());
<anchor xml:id="_general_helper_functions_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;std::uniform_int_distribution&lt;int&gt;&#32;distribution(min,&#32;max);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;randomInt&#32;=&#32;distribution(generator);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;randomInt;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00059"/>00059 }
<anchor xml:id="_general_helper_functions_8hpp_source_1l00060"/>00060 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00061"/>00061 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00062"/>00062 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00063"/>00063 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00064"/>00064 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00065"/>00065 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00091"/><link linkend="_general_helper_functions_8hpp_1a7162e6559cb0f6cd2c76ebee85fe113d">00091</link> std::vector&lt;double&gt;&#32;<link linkend="_general_helper_functions_8hpp_1a7162e6559cb0f6cd2c76ebee85fe113d">calculateColumnRatios</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;std::vector&lt;int&gt;&gt;&amp;&#32;matrix)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;ratios;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00093"/>00093 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(matrix.empty()&#32;||&#32;matrix[0].empty())&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ratios;&#32;&#32;<emphasis role="comment">//&#32;Empty&#32;matrix,&#32;return&#32;empty&#32;ratios&#32;vector</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00097"/>00097 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;numRows&#32;=&#32;matrix.size();
<anchor xml:id="_general_helper_functions_8hpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;numCols&#32;=&#32;matrix[0].size();
<anchor xml:id="_general_helper_functions_8hpp_source_1l00100"/>00100 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;col&#32;=&#32;0;&#32;col&#32;&lt;&#32;numCols;&#32;col++)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;row&#32;=&#32;0;&#32;row&#32;&lt;&#32;numRows;&#32;row++)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(matrix[row][col]&#32;==&#32;1)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;ratio&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(count)&#32;/&#32;numRows;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ratios.push_back(ratio);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00111"/>00111 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ratios;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00113"/>00113 }
<anchor xml:id="_general_helper_functions_8hpp_source_1l00114"/>00114 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00115"/>00115 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00116"/>00116 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00124"/><link linkend="_general_helper_functions_8hpp_1a3239399f882d9ea643c7862d70807d5c">00124</link> std::vector&lt;qreal&gt;&#32;<link linkend="_general_helper_functions_8hpp_1a3239399f882d9ea643c7862d70807d5c">outcomeProbabilitiesSingleQubit</link>(Qureg&#32;qureg,<emphasis role="keywordtype">int</emphasis>&#32;qubit){
<anchor xml:id="_general_helper_functions_8hpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;qreal&#32;prob_0&#32;=&#32;calcProbOfOutcome(qureg,0,0);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;qreal&#32;prob_1&#32;=&#32;calcProbOfOutcome(qureg,0,1);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{prob_0,prob_1};
<anchor xml:id="_general_helper_functions_8hpp_source_1l00128"/>00128 &#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00129"/>00129 &#32;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00130"/>00130 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00131"/>00131 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00132"/>00132 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00144"/><link linkend="_general_helper_functions_8hpp_1a318982330941fb08021062d2593a62f9">00144</link> std::vector&lt;std::string&gt;&#32;<link linkend="_general_helper_functions_8hpp_1a318982330941fb08021062d2593a62f9">getPaths</link>(std::string&#32;dataPath,&#32;std::string&#32;outputDir,&#32;std::string&#32;qubitInfo,&#32;qreal&#32;probability)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;homeDir&#32;=&#32;std::getenv(<emphasis role="stringliteral">&quot;HOME&quot;</emphasis>);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;std::string&#32;fslash&#32;=&#32;<emphasis role="stringliteral">&quot;/&quot;</emphasis>;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;std::string&#32;uscore&#32;=&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;std::string&#32;root&#32;=&#32;homeDir;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;std::string&#32;amps&#32;=&#32;<emphasis role="stringliteral">&quot;amplitudes&quot;</emphasis>;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;std::string&#32;probs&#32;=&#32;<emphasis role="stringliteral">&quot;probabilities&quot;</emphasis>;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;std::string&#32;damps;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;std::string&#32;csv&#32;=&#32;<emphasis role="stringliteral">&quot;.csv&quot;</emphasis>;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(probability&#32;&lt;&#32;0){
<anchor xml:id="_general_helper_functions_8hpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;damps&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;precisionVal&#32;=&#32;2;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;prob_str&#32;=&#32;std::to_string(probability).substr(0,&#32;std::to_string(probability).find(<emphasis role="stringliteral">&quot;.&quot;</emphasis>)&#32;+&#32;precisionVal&#32;+&#32;1);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;damps&#32;=&#32;<emphasis role="stringliteral">&quot;mix_damping_prob-&quot;</emphasis>+prob_str;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;std::string&#32;dataDirPath&#32;=&#32;homeDir&#32;+&#32;fslash&#32;+&#32;dataPath&#32;+&#32;fslash&#32;+&#32;outputDir&#32;+&#32;fslash;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;std::string&#32;fileAmp&#32;=&#32;&#32;dataDirPath&#32;+&#32;amps&#32;+&#32;uscore&#32;+&#32;qubitInfo&#32;+&#32;uscore&#32;+&#32;damps&#32;+&#32;csv;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;std::string&#32;fileProb&#32;=&#32;dataDirPath&#32;+&#32;probs&#32;+&#32;uscore&#32;+&#32;qubitInfo&#32;+&#32;uscore&#32;+&#32;damps&#32;+&#32;csv;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00166"/>00166 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;paths&#32;=&#32;{fileAmp,&#32;fileProb};
<anchor xml:id="_general_helper_functions_8hpp_source_1l00168"/>00168 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;paths;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00170"/>00170 }
<anchor xml:id="_general_helper_functions_8hpp_source_1l00171"/>00171 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00172"/>00172 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00173"/>00173 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00174"/>00174 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00175"/>00175 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00176"/>00176 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00194"/>00194 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00195"/><link linkend="_general_helper_functions_8hpp_1a721cdbc6bd980bd328255feba8168f26">00195</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_general_helper_functions_8hpp_1a721cdbc6bd980bd328255feba8168f26">printVector</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;T&gt;&amp;&#32;vec)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;element&#32;:&#32;vec)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;element&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00200"/>00200 }
<anchor xml:id="_general_helper_functions_8hpp_source_1l00201"/>00201 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00202"/>00202 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00213"/><link linkend="_general_helper_functions_8hpp_1a304f0e44472d2c746e328e345fb73caf">00213</link> <emphasis role="keywordtype">int</emphasis>*&#32;<link linkend="_general_helper_functions_8hpp_1a304f0e44472d2c746e328e345fb73caf">createQubitsArray</link>(<emphasis role="keywordtype">int</emphasis>&#32;N)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>*&#32;qubits&#32;=&#32;(<emphasis role="keywordtype">int</emphasis>*)malloc(N&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">int</emphasis>));
<anchor xml:id="_general_helper_functions_8hpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(qubits&#32;==&#32;NULL)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;memory&#32;allocation&#32;error</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00219"/>00219 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;N;&#32;++i)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubits[i]&#32;=&#32;i;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00223"/>00223 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubits;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00225"/>00225 }
<anchor xml:id="_general_helper_functions_8hpp_source_1l00226"/>00226 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00227"/>00227 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00228"/>00228 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00229"/>00229 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00239"/><link linkend="_general_helper_functions_8hpp_1a559bcd228214af8de060c2eea98269b5">00239</link> std::vector&lt;qreal&gt;&#32;<link linkend="_general_helper_functions_8hpp_1a559bcd228214af8de060c2eea98269b5">computeAllProbabilityOutcomesToVector</link>(Qureg&#32;qureg)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numQubits&#32;=&#32;qureg.numQubitsRepresented;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numProbs&#32;=&#32;1&#32;&lt;&lt;&#32;numQubits;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;qreal&#32;outcomeProbs[numProbs];
<anchor xml:id="_general_helper_functions_8hpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>*&#32;qubits&#32;=&#32;<link linkend="_general_helper_functions_8hpp_1a304f0e44472d2c746e328e345fb73caf">createQubitsArray</link>(numQubits);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;calcProbOfAllOutcomes(outcomeProbs,&#32;qureg,&#32;qubits,&#32;numQubits);&#32;&#32;&#32;&#32;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;outcomeProbabilities;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(qreal&#32;i&#32;:&#32;outcomeProbs)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outcomeProbabilities.push_back(i);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00250"/>00250 &#32;&#32;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;outcomeProbabilities;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00252"/>00252 }
<anchor xml:id="_general_helper_functions_8hpp_source_1l00253"/>00253 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00254"/>00254 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00255"/>00255 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00256"/>00256 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00271"/>00271 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00272"/><link linkend="_general_helper_functions_8hpp_1ac0434b40f8b6ac7962d760550c133c8f">00272</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_general_helper_functions_8hpp_1ac0434b40f8b6ac7962d760550c133c8f">writeVectorToFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;T&gt;&amp;&#32;values,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;filename,<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;col_name)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;std::ofstream&#32;file(filename);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;col_name&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file.is_open())&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;value&#32;:&#32;values)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;value&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file.close();
<anchor xml:id="_general_helper_functions_8hpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Values&#32;written&#32;to&#32;file&#32;successfully.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;open&#32;the&#32;file.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00284"/>00284 }
<anchor xml:id="_general_helper_functions_8hpp_source_1l00285"/>00285 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00286"/>00286 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00287"/>00287 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00288"/>00288 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00289"/>00289 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00290"/>00290 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00306"/>00306 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00307"/><link linkend="_general_helper_functions_8hpp_1a41a7ac4a876af2866b1d6ab915ecdfb2">00307</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_general_helper_functions_8hpp_1a41a7ac4a876af2866b1d6ab915ecdfb2">writeArrayToFile</link>(<emphasis role="keyword">const</emphasis>&#32;T*&#32;values,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;filename,<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;col_name)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00308"/>00308 &#32;&#32;&#32;&#32;std::ofstream&#32;file(filename);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;col_name&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file.is_open())&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size;&#32;++i)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;values[i]&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file.close();
<anchor xml:id="_general_helper_functions_8hpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Values&#32;written&#32;to&#32;file&#32;successfully.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;open&#32;the&#32;file.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00319"/>00319 }
<anchor xml:id="_general_helper_functions_8hpp_source_1l00320"/>00320 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00321"/>00321 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00322"/>00322 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00323"/>00323 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00324"/>00324 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00325"/>00325 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00341"/><link linkend="_general_helper_functions_8hpp_1a7465cffdfd3bf3b9d59175e8194b4588">00341</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_general_helper_functions_8hpp_1a7465cffdfd3bf3b9d59175e8194b4588">writeStateToFile</link>(<emphasis role="keyword">const</emphasis>&#32;Qureg&amp;&#32;qureg,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;filepath)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;FILE*&#32;state&#32;=&#32;std::fopen(filepath.c_str(),&#32;<emphasis role="stringliteral">&quot;w&quot;</emphasis>);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(state&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::perror(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;open&#32;file&quot;</emphasis>);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00347"/>00347 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00348"/>00348 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00349"/>00349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(qureg.chunkId&#32;==&#32;0)&#32;{
<anchor xml:id="_general_helper_functions_8hpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(state,&#32;<emphasis role="stringliteral">&quot;real,&#32;imag\n&quot;</emphasis>);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00351"/>00351 &#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00352"/>00352 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(index=0;&#32;index&lt;qureg.numAmpsPerChunk;&#32;index++){
<anchor xml:id="_general_helper_functions_8hpp_source_1l00354"/>00354 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;if&#32;QuEST_PREC==1&#32;||&#32;QuEST_PREC==2</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(state,&#32;<emphasis role="stringliteral">&quot;%.12f,&#32;%.12f\n&quot;</emphasis>,&#32;qureg.stateVec.real[index],&#32;qureg.stateVec.imag[index]);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00356"/>00356 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;elif&#32;QuEST_PREC&#32;==&#32;4</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(state,&#32;<emphasis role="stringliteral">&quot;%.12Lf,&#32;%.12Lf\n&quot;</emphasis>,&#32;qureg.stateVec.real[index],&#32;qureg.stateVec.imag[index]);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00358"/>00358 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_general_helper_functions_8hpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_general_helper_functions_8hpp_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;fclose(state);
<anchor xml:id="_general_helper_functions_8hpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Values&#32;written&#32;to&#32;file&#32;successfully.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_general_helper_functions_8hpp_source_1l00362"/>00362 }
<anchor xml:id="_general_helper_functions_8hpp_source_1l00363"/>00363 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00364"/>00364 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00365"/>00365 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00366"/>00366 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00367"/>00367 
<anchor xml:id="_general_helper_functions_8hpp_source_1l00368"/>00368 
</programlisting></section>
