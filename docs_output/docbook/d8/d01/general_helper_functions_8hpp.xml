<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_general_helper_functions_8hpp" xml:lang="en-US">
<title>src/genericHelperFunctions/generalHelperFunctions.hpp File Reference</title>
<indexterm><primary>src/genericHelperFunctions/generalHelperFunctions.hpp</primary></indexterm>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_general_helper_functions_8hpp_1ac42846f45bd917af1aef32178df53bbf">markPosition</link> ()</para>

<para>Marks the current position. </para>
</listitem>
            <listitem><para>int <link linkend="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46">drawRandomUniformInteger</link> (int min, int max)</para>

<para>Draws a random integer from a uniform distribution within a specified range. </para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_general_helper_functions_8hpp_1a7162e6559cb0f6cd2c76ebee85fe113d">calculateColumnRatios</link> (const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;matrix)</para>

<para>Calculates the ratios of ones in each column of a matrix. </para>
</listitem>
            <listitem><para>std::vector&lt; qreal &gt; <link linkend="_general_helper_functions_8hpp_1a3239399f882d9ea643c7862d70807d5c">outcomeProbabilitiesSingleQubit</link> (Qureg qureg, int qubit)</para>

<para>Calculates the outcome probabilities of a single qubit in a quantum register. </para>
</listitem>
            <listitem><para>std::vector&lt; std::string &gt; <link linkend="_general_helper_functions_8hpp_1a318982330941fb08021062d2593a62f9">getPaths</link> (std::string dataPath, std::string outputDir, std::string qubitInfo, qreal probability)</para>

<para>Create probability and amplitude paths. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_general_helper_functions_8hpp_1a721cdbc6bd980bd328255feba8168f26">printVector</link> (const std::vector&lt; T &gt; &amp;vec)</para>

<para>Prints the elements of a vector. </para>
</listitem>
            <listitem><para>int * <link linkend="_general_helper_functions_8hpp_1a304f0e44472d2c746e328e345fb73caf">createQubitsArray</link> (int N)</para>

<para>Creates an array of integers representing qubits. </para>
</listitem>
            <listitem><para>std::vector&lt; qreal &gt; <link linkend="_general_helper_functions_8hpp_1a559bcd228214af8de060c2eea98269b5">computeAllProbabilityOutcomesToVector</link> (Qureg qureg)</para>

<para>Computes the probabilities of all outcomes and returns them as a vector. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_general_helper_functions_8hpp_1ac0434b40f8b6ac7962d760550c133c8f">writeVectorToFile</link> (const std::vector&lt; T &gt; &amp;values, const std::string &amp;filename, const std::string &amp;col_name)</para>

<para>Writes the elements of a vector to a file. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_general_helper_functions_8hpp_1a41a7ac4a876af2866b1d6ab915ecdfb2">writeArrayToFile</link> (const T *values, size_t size, const std::string &amp;filename, const std::string &amp;col_name)</para>

<para>Writes the elements of an array to a file. </para>
</listitem>
            <listitem><para>void <link linkend="_general_helper_functions_8hpp_1a7465cffdfd3bf3b9d59175e8194b4588">writeStateToFile</link> (const Qureg &amp;qureg, const std::string &amp;filepath)</para>

<para>Writes the state vector of a quantum register to a file. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_general_helper_functions_8hpp_1a7162e6559cb0f6cd2c76ebee85fe113d"/><section>
    <title>calculateColumnRatios()</title>
<indexterm><primary>calculateColumnRatios</primary><secondary>generalHelperFunctions.hpp</secondary></indexterm>
<indexterm><primary>generalHelperFunctions.hpp</primary><secondary>calculateColumnRatios</secondary></indexterm>
<para><computeroutput>std::vector&lt; double &gt; calculateColumnRatios (const std::vector&lt; std::vector&lt; int &gt; &gt; &amp; matrix)</computeroutput></para><para>

<para>Calculates the ratios of ones in each column of a matrix. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>matrix</entry><entry>
<para>The matrix for which to calculate the column ratios. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A vector containing the ratios of ones in each column of the matrix.</para>
</formalpara>
This function calculates the ratios of ones in each column of the given matrix. It takes a 2D matrix represented by a vector of vectors as input. If the matrix is empty or any of its rows is empty, an empty ratios vector is returned. The function iterates over each column and counts the number of ones in that column. The ratio of ones is calculated by dividing the count by the total number of rows in the matrix. The ratios are stored in a vector, which is then returned.</para>

<para>Example usage: <literallayout><computeroutput>std::vector&lt;std::vector&lt;int&gt;&gt;&#32;matrix&#32;=&#32;{
&#32;&#32;&#32;&#32;{1,&#32;0,&#32;1},
&#32;&#32;&#32;&#32;{0,&#32;1,&#32;0},
&#32;&#32;&#32;&#32;{1,&#32;1,&#32;1}
};
std::vector&lt;double&gt;&#32;ratios&#32;=&#32;<link linkend="_general_helper_functions_8hpp_1a7162e6559cb0f6cd2c76ebee85fe113d">calculateColumnRatios</link>(matrix);
ratios:&#32;[0.666667,&#32;0.333333,&#32;0.666667]
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>The type of elements stored in the matrix (should be convertible to int). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_general_helper_functions_8hpp_source_1l00091">91</link> of file <link linkend="_general_helper_functions_8hpp_source">generalHelperFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00092 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;ratios;
00093 
00094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(matrix.empty()&#32;||&#32;matrix[0].empty())&#32;{
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ratios;&#32;&#32;<emphasis role="comment">//&#32;Empty&#32;matrix,&#32;return&#32;empty&#32;ratios&#32;vector</emphasis>
00096 &#32;&#32;&#32;&#32;}
00097 
00098 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;numRows&#32;=&#32;matrix.size();
00099 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;numCols&#32;=&#32;matrix[0].size();
00100 
00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;col&#32;=&#32;0;&#32;col&#32;&lt;&#32;numCols;&#32;col++)&#32;{
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;row&#32;=&#32;0;&#32;row&#32;&lt;&#32;numRows;&#32;row++)&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(matrix[row][col]&#32;==&#32;1)&#32;{
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;ratio&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(count)&#32;/&#32;numRows;
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ratios.push_back(ratio);
00110 &#32;&#32;&#32;&#32;}
00111 
00112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ratios;
00113 }
</programlisting></section>
<anchor xml:id="_general_helper_functions_8hpp_1a559bcd228214af8de060c2eea98269b5"/><section>
    <title>computeAllProbabilityOutcomesToVector()</title>
<indexterm><primary>computeAllProbabilityOutcomesToVector</primary><secondary>generalHelperFunctions.hpp</secondary></indexterm>
<indexterm><primary>generalHelperFunctions.hpp</primary><secondary>computeAllProbabilityOutcomesToVector</secondary></indexterm>
<para><computeroutput>std::vector&lt; qreal &gt; computeAllProbabilityOutcomesToVector (Qureg qureg)</computeroutput></para><para>

<para>Computes the probabilities of all outcomes and returns them as a vector. </para>
</para>

<para>This function computes the probabilities of all possible outcomes for the given quantum register (<computeroutput>qureg</computeroutput>). The outcomes are represented as a vector of <computeroutput>qreal</computeroutput> values, where each element corresponds to the probability of a specific outcome.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>qureg</entry><entry>
<para>The quantum register. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A vector of <computeroutput>qreal</computeroutput> values representing the probabilities of all outcomes. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_general_helper_functions_8hpp_source_1l00239">239</link> of file <link linkend="_general_helper_functions_8hpp_source">generalHelperFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00240 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numQubits&#32;=&#32;qureg.numQubitsRepresented;
00241 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numProbs&#32;=&#32;1&#32;&lt;&lt;&#32;numQubits;
00242 &#32;&#32;&#32;&#32;qreal&#32;outcomeProbs[numProbs];
00243 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>*&#32;qubits&#32;=&#32;<link linkend="_general_helper_functions_8hpp_1a304f0e44472d2c746e328e345fb73caf">createQubitsArray</link>(numQubits);
00244 &#32;&#32;&#32;&#32;calcProbOfAllOutcomes(outcomeProbs,&#32;qureg,&#32;qubits,&#32;numQubits);&#32;&#32;&#32;&#32;
00245 &#32;&#32;&#32;&#32;
00246 &#32;&#32;&#32;&#32;std::vector&lt;qreal&gt;&#32;outcomeProbabilities;
00247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(qreal&#32;i&#32;:&#32;outcomeProbs)&#32;{
00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outcomeProbabilities.push_back(i);
00249 &#32;&#32;&#32;&#32;}
00250 &#32;&#32;
00251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;outcomeProbabilities;
00252 }
</programlisting></section>
<anchor xml:id="_general_helper_functions_8hpp_1a304f0e44472d2c746e328e345fb73caf"/><section>
    <title>createQubitsArray()</title>
<indexterm><primary>createQubitsArray</primary><secondary>generalHelperFunctions.hpp</secondary></indexterm>
<indexterm><primary>generalHelperFunctions.hpp</primary><secondary>createQubitsArray</secondary></indexterm>
<para><computeroutput>int * createQubitsArray (int N)</computeroutput></para><para>

<para>Creates an array of integers representing qubits. </para>
</para>

<para>This function dynamically allocates an array of integers, where each element represents a qubit. The elements of the array range from 0 to N-1.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>N</entry><entry>
<para>The number of qubits. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the dynamically allocated array of integers. Returns NULL if the memory allocation fails. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_general_helper_functions_8hpp_source_1l00213">213</link> of file <link linkend="_general_helper_functions_8hpp_source">generalHelperFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00214 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>*&#32;qubits&#32;=&#32;(<emphasis role="keywordtype">int</emphasis>*)malloc(N&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">int</emphasis>));
00215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(qubits&#32;==&#32;NULL)&#32;{
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;memory&#32;allocation&#32;error</emphasis>
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
00218 &#32;&#32;&#32;&#32;}
00219 
00220 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;N;&#32;++i)&#32;{
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qubits[i]&#32;=&#32;i;
00222 &#32;&#32;&#32;&#32;}
00223 
00224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qubits;
00225 }
</programlisting></section>
<anchor xml:id="_general_helper_functions_8hpp_1a4c07ccd9e75d9522fb31bd4155bc5c46"/><section>
    <title>drawRandomUniformInteger()</title>
<indexterm><primary>drawRandomUniformInteger</primary><secondary>generalHelperFunctions.hpp</secondary></indexterm>
<indexterm><primary>generalHelperFunctions.hpp</primary><secondary>drawRandomUniformInteger</secondary></indexterm>
<para><computeroutput>int drawRandomUniformInteger (int min, int max)</computeroutput></para><para>

<para>Draws a random integer from a uniform distribution within a specified range. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>min</entry><entry>
<para>The minimum value of the range (inclusive). </para>
</entry>
                            </row>
                            <row>
<entry>max</entry><entry>
<para>The maximum value of the range (inclusive). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A randomly generated integer within the specified range.</para>
</formalpara>
This function uses the Mersenne Twister pseudo-random number generator to draw a random integer from a uniform distribution within the specified range [min, max]. The minimum and maximum values are inclusive. The function initializes a random device, creates a Mersenne Twister generator, and uses a uniform integer distribution to generate the random number. The generated random integer is then returned. </para>
<para>
Definition at line <link linkend="_general_helper_functions_8hpp_source_1l00053">53</link> of file <link linkend="_general_helper_functions_8hpp_source">generalHelperFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00054 &#32;&#32;&#32;&#32;std::random_device&#32;rd;
00055 &#32;&#32;&#32;&#32;std::mt19937&#32;generator(rd());
00056 &#32;&#32;&#32;&#32;std::uniform_int_distribution&lt;int&gt;&#32;distribution(min,&#32;max);
00057 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;randomInt&#32;=&#32;distribution(generator);
00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;randomInt;
00059 }
</programlisting></section>
<anchor xml:id="_general_helper_functions_8hpp_1a318982330941fb08021062d2593a62f9"/><section>
    <title>getPaths()</title>
<indexterm><primary>getPaths</primary><secondary>generalHelperFunctions.hpp</secondary></indexterm>
<indexterm><primary>generalHelperFunctions.hpp</primary><secondary>getPaths</secondary></indexterm>
<para><computeroutput>std::vector&lt; std::string &gt; getPaths (std::string dataPath, std::string outputDir, std::string qubitInfo, qreal probability)</computeroutput></para><para>

<para>Create probability and amplitude paths. </para>
</para>

<para>This function creates the paths for probability and amplitude files based on the provided parameters.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dataPath</entry><entry>
<para>The data path. </para>
</entry>
                            </row>
                            <row>
<entry>outputDir</entry><entry>
<para>The output directory. </para>
</entry>
                            </row>
                            <row>
<entry>qubitInfo</entry><entry>
<para>The qubit information. </para>
</entry>
                            </row>
                            <row>
<entry>probability</entry><entry>
<para>The probability value. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A vector containing the generated paths for probability and amplitude files. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_general_helper_functions_8hpp_source_1l00144">144</link> of file <link linkend="_general_helper_functions_8hpp_source">generalHelperFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered{
00145 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;homeDir&#32;=&#32;std::getenv(<emphasis role="stringliteral">&quot;HOME&quot;</emphasis>);
00146 &#32;&#32;&#32;&#32;std::string&#32;fslash&#32;=&#32;<emphasis role="stringliteral">&quot;/&quot;</emphasis>;
00147 &#32;&#32;&#32;&#32;std::string&#32;uscore&#32;=&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
00148 &#32;&#32;&#32;&#32;std::string&#32;root&#32;=&#32;homeDir;
00149 &#32;&#32;&#32;&#32;std::string&#32;amps&#32;=&#32;<emphasis role="stringliteral">&quot;amplitudes&quot;</emphasis>;
00150 &#32;&#32;&#32;&#32;std::string&#32;probs&#32;=&#32;<emphasis role="stringliteral">&quot;probabilities&quot;</emphasis>;
00151 &#32;&#32;&#32;&#32;std::string&#32;damps;
00152 &#32;&#32;&#32;&#32;std::string&#32;csv&#32;=&#32;<emphasis role="stringliteral">&quot;.csv&quot;</emphasis>;
00153 &#32;&#32;&#32;&#32;
00154 &#32;&#32;&#32;&#32;
00155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(probability&#32;&lt;&#32;0){
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;damps&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
00157 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>{
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;precisionVal&#32;=&#32;2;
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;prob_str&#32;=&#32;std::to_string(probability).substr(0,&#32;std::to_string(probability).find(<emphasis role="stringliteral">&quot;.&quot;</emphasis>)&#32;+&#32;precisionVal&#32;+&#32;1);
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;damps&#32;=&#32;<emphasis role="stringliteral">&quot;mix_damping_prob-&quot;</emphasis>+prob_str;
00161 &#32;&#32;&#32;&#32;}
00162 &#32;&#32;&#32;&#32;
00163 &#32;&#32;&#32;&#32;std::string&#32;dataDirPath&#32;=&#32;homeDir&#32;+&#32;fslash&#32;+&#32;dataPath&#32;+&#32;fslash&#32;+&#32;outputDir&#32;+&#32;fslash;
00164 &#32;&#32;&#32;&#32;std::string&#32;fileAmp&#32;=&#32;&#32;dataDirPath&#32;+&#32;amps&#32;+&#32;uscore&#32;+&#32;qubitInfo&#32;+&#32;uscore&#32;+&#32;damps&#32;+&#32;csv;
00165 &#32;&#32;&#32;&#32;std::string&#32;fileProb&#32;=&#32;dataDirPath&#32;+&#32;probs&#32;+&#32;uscore&#32;+&#32;qubitInfo&#32;+&#32;uscore&#32;+&#32;damps&#32;+&#32;csv;
00166 
00167 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;paths&#32;=&#32;{fileAmp,&#32;fileProb};
00168 
00169 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;paths;
00170 }
</programlisting></section>
<anchor xml:id="_general_helper_functions_8hpp_1ac42846f45bd917af1aef32178df53bbf"/><section>
    <title>markPosition()</title>
<indexterm><primary>markPosition</primary><secondary>generalHelperFunctions.hpp</secondary></indexterm>
<indexterm><primary>generalHelperFunctions.hpp</primary><secondary>markPosition</secondary></indexterm>
<para><computeroutput>void markPosition ( )</computeroutput></para><para>

<para>Marks the current position. </para>
</para>

<para>This function marks the current position by printing &quot;Here&quot; to the standard output. </para>
<para>
Definition at line <link linkend="_general_helper_functions_8hpp_source_1l00032">32</link> of file <link linkend="_general_helper_functions_8hpp_source">generalHelperFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00033 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Here&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00034 }
</programlisting></section>
<anchor xml:id="_general_helper_functions_8hpp_1a3239399f882d9ea643c7862d70807d5c"/><section>
    <title>outcomeProbabilitiesSingleQubit()</title>
<indexterm><primary>outcomeProbabilitiesSingleQubit</primary><secondary>generalHelperFunctions.hpp</secondary></indexterm>
<indexterm><primary>generalHelperFunctions.hpp</primary><secondary>outcomeProbabilitiesSingleQubit</secondary></indexterm>
<para><computeroutput>std::vector&lt; qreal &gt; outcomeProbabilitiesSingleQubit (Qureg qureg, int qubit)</computeroutput></para><para>

<para>Calculates the outcome probabilities of a single qubit in a quantum register. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>qureg</entry><entry>
<para>The quantum register. </para>
</entry>
                            </row>
                            <row>
<entry>qubit</entry><entry>
<para>The index of the qubit for which to calculate the outcome probabilities. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A vector containing the outcome probabilities [prob_0, prob_1]. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_general_helper_functions_8hpp_source_1l00124">124</link> of file <link linkend="_general_helper_functions_8hpp_source">generalHelperFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00125 &#32;&#32;&#32;&#32;qreal&#32;prob_0&#32;=&#32;calcProbOfOutcome(qureg,0,0);
00126 &#32;&#32;&#32;&#32;qreal&#32;prob_1&#32;=&#32;calcProbOfOutcome(qureg,0,1);
00127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{prob_0,prob_1};
00128 &#32;}
</programlisting></section>
<anchor xml:id="_general_helper_functions_8hpp_1a721cdbc6bd980bd328255feba8168f26"/><section>
    <title>printVector()</title>
<indexterm><primary>printVector</primary><secondary>generalHelperFunctions.hpp</secondary></indexterm>
<indexterm><primary>generalHelperFunctions.hpp</primary><secondary>printVector</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void printVector (const std::vector&lt; T &gt; &amp; vec)</computeroutput></para><para>

<para>Prints the elements of a vector. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>vec</entry><entry>
<para>The vector to be printed.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function prints the elements of a given vector to the standard output, separated by spaces. It takes a vector as input and iterates over each element, printing it followed by a space. After printing all the elements, it outputs a newline character to create a new line.</para>

<para>Example usage: <literallayout><computeroutput>std::vector&lt;int&gt;&#32;numbers&#32;=&#32;{1,&#32;2,&#32;3,&#32;4,&#32;5};
<link linkend="_general_helper_functions_8hpp_1a721cdbc6bd980bd328255feba8168f26">printVector</link>(numbers);&#32;<emphasis role="comment">//&#32;Output:&#32;1&#32;2&#32;3&#32;4&#32;5</emphasis>
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>The type of elements stored in the vector. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_general_helper_functions_8hpp_source_1l00195">195</link> of file <link linkend="_general_helper_functions_8hpp_source">generalHelperFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00196 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;element&#32;:&#32;vec)&#32;{
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;element&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
00198 &#32;&#32;&#32;&#32;}
00199 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
00200 }
</programlisting></section>
<anchor xml:id="_general_helper_functions_8hpp_1a41a7ac4a876af2866b1d6ab915ecdfb2"/><section>
    <title>writeArrayToFile()</title>
<indexterm><primary>writeArrayToFile</primary><secondary>generalHelperFunctions.hpp</secondary></indexterm>
<indexterm><primary>generalHelperFunctions.hpp</primary><secondary>writeArrayToFile</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void writeArrayToFile (const T * values, size_t size, const std::string &amp; filename, const std::string &amp; col_name)</computeroutput></para><para>

<para>Writes the elements of an array to a file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>values</entry><entry>
<para>The array containing the values to be written. </para>
</entry>
                            </row>
                            <row>
<entry>size</entry><entry>
<para>The size of the array. </para>
</entry>
                            </row>
                            <row>
<entry>filename</entry><entry>
<para>The name of the file to write the values to. </para>
</entry>
                            </row>
                            <row>
<entry>col_name</entry><entry>
<para>The name of the column to be written as a header in the file.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function writes the elements of the given array to a file. It takes an array of values, the size of the array, a filename, and a column name as inputs. The function creates a file with the specified filename and writes the column name as a header. Then, it iterates over each element in the array and writes it to a new line in the file. If the file cannot be opened, an error message is displayed. After writing the values, the file is closed, and a success message is displayed on the standard output.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>The type of elements stored in the array. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_general_helper_functions_8hpp_source_1l00307">307</link> of file <link linkend="_general_helper_functions_8hpp_source">generalHelperFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered{
00308 &#32;&#32;&#32;&#32;std::ofstream&#32;file(filename);
00309 &#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;col_name&#32;&lt;&lt;&#32;std::endl;
00310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file.is_open())&#32;{
00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size;&#32;++i)&#32;{
00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;values[i]&#32;&lt;&lt;&#32;std::endl;
00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file.close();
00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Values&#32;written&#32;to&#32;file&#32;successfully.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00316 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;open&#32;the&#32;file.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00318 &#32;&#32;&#32;&#32;}
00319 }
</programlisting></section>
<anchor xml:id="_general_helper_functions_8hpp_1a7465cffdfd3bf3b9d59175e8194b4588"/><section>
    <title>writeStateToFile()</title>
<indexterm><primary>writeStateToFile</primary><secondary>generalHelperFunctions.hpp</secondary></indexterm>
<indexterm><primary>generalHelperFunctions.hpp</primary><secondary>writeStateToFile</secondary></indexterm>
<para><computeroutput>void writeStateToFile (const Qureg &amp; qureg, const std::string &amp; filepath)</computeroutput></para><para>

<para>Writes the state vector of a quantum register to a file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>qureg</entry><entry>
<para>The quantum register whose state vector to write. </para>
</entry>
                            </row>
                            <row>
<entry>filepath</entry><entry>
<para>The path of the file to write the state vector to.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function writes the state vector of the given quantum register to a file. It takes a quantum register and a filepath as inputs. The function opens the file in write mode and checks if it was opened successfully. If the file is opened successfully, it writes the real and imaginary parts of each amplitude of the quantum register&apos;s state vector to a new line in the file. The format used for writing depends on the precision defined by the <computeroutput>QuEST_PREC</computeroutput> preprocessor macro. After writing the state vector, the file is closed, and a success message is displayed on the standard output. If the file cannot be opened, an error message is displayed.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>qureg</entry><entry>
<para>The quantum register whose state vector to write. </para>
</entry>
                            </row>
                            <row>
<entry>filepath</entry><entry>
<para>The path of the file to write the state vector to. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_general_helper_functions_8hpp_source_1l00341">341</link> of file <link linkend="_general_helper_functions_8hpp_source">generalHelperFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00342 &#32;&#32;&#32;&#32;FILE*&#32;state&#32;=&#32;std::fopen(filepath.c_str(),&#32;<emphasis role="stringliteral">&quot;w&quot;</emphasis>);
00343 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index;
00344 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(state&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::perror(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;open&#32;file&quot;</emphasis>);
00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00347 &#32;&#32;&#32;&#32;}
00348 
00349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(qureg.chunkId&#32;==&#32;0)&#32;{
00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(state,&#32;<emphasis role="stringliteral">&quot;real,&#32;imag\n&quot;</emphasis>);
00351 &#32;&#32;&#32;&#32;}
00352 
00353 &#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(index=0;&#32;index&lt;qureg.numAmpsPerChunk;&#32;index++){
00354 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;if&#32;QuEST_PREC==1&#32;||&#32;QuEST_PREC==2</emphasis>
00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(state,&#32;<emphasis role="stringliteral">&quot;%.12f,&#32;%.12f\n&quot;</emphasis>,&#32;qureg.stateVec.real[index],&#32;qureg.stateVec.imag[index]);
00356 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;elif&#32;QuEST_PREC&#32;==&#32;4</emphasis>
00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(state,&#32;<emphasis role="stringliteral">&quot;%.12Lf,&#32;%.12Lf\n&quot;</emphasis>,&#32;qureg.stateVec.real[index],&#32;qureg.stateVec.imag[index]);
00358 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
00359 &#32;&#32;&#32;&#32;&#32;}
00360 &#32;&#32;&#32;&#32;&#32;fclose(state);
00361 &#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Values&#32;written&#32;to&#32;file&#32;successfully.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00362 }
</programlisting></section>
<anchor xml:id="_general_helper_functions_8hpp_1ac0434b40f8b6ac7962d760550c133c8f"/><section>
    <title>writeVectorToFile()</title>
<indexterm><primary>writeVectorToFile</primary><secondary>generalHelperFunctions.hpp</secondary></indexterm>
<indexterm><primary>generalHelperFunctions.hpp</primary><secondary>writeVectorToFile</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void writeVectorToFile (const std::vector&lt; T &gt; &amp; values, const std::string &amp; filename, const std::string &amp; col_name)</computeroutput></para><para>

<para>Writes the elements of a vector to a file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>values</entry><entry>
<para>The vector containing the values to be written. </para>
</entry>
                            </row>
                            <row>
<entry>filename</entry><entry>
<para>The name of the file to write the values to. </para>
</entry>
                            </row>
                            <row>
<entry>col_name</entry><entry>
<para>The name of the column to be written as a header in the file.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function writes the elements of the given vector to a file. It takes a vector of values, a filename, and a column name as inputs. The function creates a file with the specified filename and writes the column name as a header. Then, it iterates over each element in the vector and writes it to a new line in the file. If the file cannot be opened, an error message is displayed. After writing the values, the file is closed, and a success message is displayed on the standard output.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>The type of elements stored in the vector. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_general_helper_functions_8hpp_source_1l00272">272</link> of file <link linkend="_general_helper_functions_8hpp_source">generalHelperFunctions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00273 &#32;&#32;&#32;&#32;std::ofstream&#32;file(filename);
00274 &#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;col_name&#32;&lt;&lt;&#32;std::endl;
00275 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file.is_open())&#32;{
00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;value&#32;:&#32;values)&#32;{
00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;value&#32;&lt;&lt;&#32;std::endl;
00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file.close();
00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Values&#32;written&#32;to&#32;file&#32;successfully.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00281 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;open&#32;the&#32;file.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00283 &#32;&#32;&#32;&#32;}
00284 }
</programlisting></section>
</section>
</section>
