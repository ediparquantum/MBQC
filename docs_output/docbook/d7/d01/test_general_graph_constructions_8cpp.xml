<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test_general_graph_constructions_8cpp" xml:lang="en-US">
<title>tests/testGeneralGraphConstructions.cpp File Reference</title>
<indexterm><primary>tests/testGeneralGraphConstructions.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;packages.hpp&quot;<?linebreak?></programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_test_general_graph_constructions_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_test_general_graph_constructions_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4"/><section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>testGeneralGraphConstructions.cpp</secondary></indexterm>
<indexterm><primary>testGeneralGraphConstructions.cpp</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main ( )</computeroutput></para><para>
Definition at line <link linkend="_test_general_graph_constructions_8cpp_source_1l00016">16</link> of file <link linkend="_test_general_graph_constructions_8cpp_source">testGeneralGraphConstructions.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00017 &#32;&#32;&#32;&#32;
00018 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;From&#32;a&#32;file</emphasis>
00019 &#32;&#32;&#32;&#32;<emphasis role="comment">//std::string&#32;brickwork_graph&#32;=&#32;&quot;/Users/jmille15/Projects/MBQC/graphs_file_io/single_brick_work_state.txt&quot;;</emphasis>
00020 &#32;&#32;&#32;&#32;<emphasis role="comment">//undirectedGraph&#32;graph&#32;=&#32;createGraphFromFile(brickwork_graph);</emphasis>
00021 &#32;&#32;&#32;&#32;
00022 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Complete&#32;graph</emphasis>
00023 &#32;&#32;&#32;&#32;<emphasis role="comment">//int&#32;numVertices&#32;=&#32;4;</emphasis>
00024 &#32;&#32;&#32;&#32;<emphasis role="comment">//int&#32;numEdges&#32;=&#32;4;</emphasis>
00025 &#32;&#32;&#32;&#32;<emphasis role="comment">//undirectedGraph&#32;graph&#32;=&#32;createCompleteGraph(6);</emphasis>
00026 &#32;&#32;&#32;&#32;
00027 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Random&#32;graph</emphasis>
00028 &#32;&#32;&#32;&#32;<emphasis role="comment">//undirectedGraph&#32;graph&#32;=&#32;generateRandomGraph(numVertices,numEdges);</emphasis>
00029 
00030 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Bipartite&#32;graph</emphasis>
00031 &#32;&#32;&#32;&#32;<emphasis role="comment">//int&#32;n&#32;=&#32;2;</emphasis>
00032 &#32;&#32;&#32;&#32;<emphasis role="comment">//int&#32;m&#32;=&#32;3;</emphasis>
00033 &#32;&#32;&#32;&#32;<emphasis role="comment">//undirectedGraph&#32;graph&#32;=&#32;generateCompleteBipartiteGraph(n,&#32;m);</emphasis>
00034 
00035 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Multipartite&#32;graph</emphasis>
00036 &#32;&#32;&#32;&#32;<emphasis role="comment">//std::vector&lt;int&gt;&#32;partitions&#32;=&#32;{1,&#32;1,&#32;1};</emphasis>
00037 &#32;&#32;&#32;&#32;<emphasis role="comment">//undirectedGraph&#32;graph&#32;=&#32;createCompleteMultipartiteGraph(partitions);</emphasis>
00038 
00039 &#32;&#32;&#32;&#32;
00040 
00041 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;for&#32;Planarity</emphasis>
00042 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
00043 <emphasis role="comment">&#32;&#32;&#32;&#32;undirectedGraph&#32;graph&#32;=&#32;createCompleteGraph(6);</emphasis>
00044 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;(boyer_myrvold_planarity_test(graph))</emphasis>
00045 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;ERROR!&#32;K_6&#32;was&#32;recognized&#32;as&#32;planar!&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00046 <emphasis role="comment">&#32;&#32;&#32;&#32;else</emphasis>
00047 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;K_6&#32;is&#32;not&#32;planar.&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00048 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
00049 
00050 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
00051 <emphasis role="comment">&#32;&#32;&#32;&#32;Add&#32;edges&#32;set&#32;to&#32;a&#32;graph&#32;to&#32;make&#32;it&#32;connected</emphasis>
00052 <emphasis role="comment">&#32;&#32;&#32;&#32;undirectedGraph&#32;graph(11);</emphasis>
00053 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(0,1,graph);</emphasis>
00054 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(2,3,graph);</emphasis>
00055 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(3,4,graph);</emphasis>
00056 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(5,6,graph);</emphasis>
00057 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(6,7,graph);</emphasis>
00058 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(8,9,graph);</emphasis>
00059 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(9,10,graph);</emphasis>
00060 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(10,8,graph);</emphasis>
00061 <emphasis role="comment"></emphasis>
00062 <emphasis role="comment">&#32;&#32;&#32;&#32;std::vector&lt;&#32;graph_traits&lt;undirectedGraph&gt;::vertices_size_type&#32;&gt;&#32;</emphasis>
00063 <emphasis role="comment">&#32;&#32;&#32;&#32;component(num_vertices(graph));</emphasis>
00064 <emphasis role="comment"></emphasis>
00065 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Before&#32;calling&#32;make_connected,&#32;the&#32;graph&#32;has&#32;&quot;</emphasis>
00066 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;connected_components(graph,&#32;&amp;component[0])</emphasis>
00067 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;&#32;connected&#32;components&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00068 <emphasis role="comment"></emphasis>
00069 <emphasis role="comment">&#32;&#32;&#32;&#32;make_connected(graph);</emphasis>
00070 <emphasis role="comment"></emphasis>
00071 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;After&#32;calling&#32;make_connected,&#32;the&#32;graph&#32;has&#32;&quot;</emphasis>
00072 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;connected_components(graph,&#32;&amp;component[0])</emphasis>
00073 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;&#32;connected&#32;components&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00074 <emphasis role="comment"></emphasis>
00075 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
00076 
00077 &#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
00078 <emphasis role="comment">&#32;&#32;&#32;&#32;Making&#32;a&#32;graph&#32;maximally&#32;planar</emphasis>
00079 <emphasis role="comment">&#32;&#32;&#32;</emphasis>
00080 <emphasis role="comment">&#32;&#32;&#32;&#32;undirectedGraph&#32;graph(10);</emphasis>
00081 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(0,1,graph);</emphasis>
00082 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(1,2,graph);</emphasis>
00083 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(2,3,graph);</emphasis>
00084 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(3,4,graph);</emphasis>
00085 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(4,5,graph);</emphasis>
00086 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(5,6,graph);</emphasis>
00087 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(6,7,graph);</emphasis>
00088 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(7,8,graph);</emphasis>
00089 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(8,9,graph);</emphasis>
00090 <emphasis role="comment"></emphasis>
00091 <emphasis role="comment">&#32;&#32;&#32;&#32;//std::vector&lt;edgeDescriptor&gt;&#32;embedding(num_vertices(graph));</emphasis>
00092 <emphasis role="comment">&#32;&#32;&#32;//&#32;make_maximal_planar(graph,&#32;&amp;embedding[0]);</emphasis>
00093 <emphasis role="comment"></emphasis>
00094 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Since&#32;the&#32;input&#32;graph&#32;is&#32;planar&#32;with&#32;&quot;&#32;&lt;&lt;&#32;num_vertices(graph)&#32;</emphasis>
00095 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;&#32;vertices,&quot;&#32;&lt;&lt;&#32;std::endl</emphasis>
00096 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;The&#32;output&#32;graph&#32;should&#32;be&#32;planar&#32;with&#32;&quot;&#32;</emphasis>
00097 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;3*num_vertices(graph)&#32;-&#32;6&#32;&lt;&lt;&#32;&quot;&#32;edges&#32;and&#32;&quot;</emphasis>
00098 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;2*num_vertices(graph)&#32;-&#32;4&#32;&lt;&lt;&#32;&quot;&#32;faces.&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00099 <emphasis role="comment"></emphasis>
00100 <emphasis role="comment">&#32;&#32;&#32;&#32;//Initialize&#32;the&#32;interior&#32;edge&#32;index</emphasis>
00101 <emphasis role="comment">&#32;&#32;&#32;&#32;property_map&lt;undirectedGraph,&#32;edge_index_t&gt;::type&#32;e_index&#32;=&#32;get(edge_index,&#32;graph);</emphasis>
00102 <emphasis role="comment">&#32;&#32;&#32;&#32;graph_traits&lt;undirectedGraph&gt;::edges_size_type&#32;edge_count&#32;=&#32;0;</emphasis>
00103 <emphasis role="comment">&#32;&#32;&#32;&#32;graph_traits&lt;undirectedGraph&gt;::edge_iterator&#32;ei,&#32;ei_end;</emphasis>
00104 <emphasis role="comment">&#32;&#32;&#32;&#32;for(tie(ei,&#32;ei_end)&#32;=&#32;edges(graph);&#32;ei&#32;!=&#32;ei_end;&#32;++ei)</emphasis>
00105 <emphasis role="comment">&#32;&#32;&#32;&#32;put(e_index,&#32;*ei,&#32;edge_count++);</emphasis>
00106 <emphasis role="comment"></emphasis>
00107 <emphasis role="comment"></emphasis>
00108 <emphasis role="comment">&#32;&#32;&#32;&#32;//Test&#32;for&#32;planarity;&#32;compute&#32;the&#32;planar&#32;embedding&#32;as&#32;a&#32;side-effect</emphasis>
00109 <emphasis role="comment">&#32;&#32;&#32;&#32;std::vector&lt;edgeDescriptor&gt;&#32;embedding(num_vertices(graph));</emphasis>
00110 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;(boyer_myrvold_planarity_test(boyer_myrvold_params::graph&#32;=&#32;graph,</emphasis>
00111 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boyer_myrvold_params::embedding&#32;=&#32;</emphasis>
00112 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;embedding[0]</emphasis>
00113 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
00114 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
00115 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Input&#32;graph&#32;is&#32;planar&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00116 <emphasis role="comment">&#32;&#32;&#32;&#32;else</emphasis>
00117 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Input&#32;graph&#32;is&#32;not&#32;planar&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00118 <emphasis role="comment"></emphasis>
00119 <emphasis role="comment">&#32;&#32;&#32;&#32;make_biconnected_planar(graph,&#32;&amp;embedding[0]);</emphasis>
00120 <emphasis role="comment"></emphasis>
00121 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;Re-initialize&#32;the&#32;edge&#32;index,&#32;since&#32;we&#32;just&#32;added&#32;a&#32;few&#32;edges</emphasis>
00122 <emphasis role="comment">&#32;&#32;&#32;&#32;edge_count&#32;=&#32;0;</emphasis>
00123 <emphasis role="comment">&#32;&#32;&#32;&#32;for(tie(ei,&#32;ei_end)&#32;=&#32;edges(graph);&#32;ei&#32;!=&#32;ei_end;&#32;++ei)</emphasis>
00124 <emphasis role="comment">&#32;&#32;&#32;&#32;put(e_index,&#32;*ei,&#32;edge_count++);</emphasis>
00125 <emphasis role="comment"></emphasis>
00126 <emphasis role="comment"></emphasis>
00127 <emphasis role="comment">&#32;&#32;&#32;&#32;//Test&#32;for&#32;planarity&#32;again;&#32;compute&#32;the&#32;planar&#32;embedding&#32;as&#32;a&#32;side-effect</emphasis>
00128 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;(boyer_myrvold_planarity_test(boyer_myrvold_params::graph&#32;=&#32;graph,</emphasis>
00129 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boyer_myrvold_params::embedding&#32;=&#32;</emphasis>
00130 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;embedding[0]</emphasis>
00131 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
00132 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
00133 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;After&#32;calling&#32;make_biconnected,&#32;the&#32;graph&#32;is&#32;still&#32;planar&quot;&#32;</emphasis>
00134 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00135 <emphasis role="comment">&#32;&#32;&#32;&#32;else</emphasis>
00136 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;After&#32;calling&#32;make_biconnected,&#32;the&#32;graph&#32;is&#32;not&#32;planar&quot;&#32;</emphasis>
00137 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00138 <emphasis role="comment"></emphasis>
00139 <emphasis role="comment">&#32;&#32;&#32;&#32;make_maximal_planar(graph,&#32;&amp;embedding[0]);</emphasis>
00140 <emphasis role="comment"></emphasis>
00141 <emphasis role="comment"></emphasis>
00142 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;Re-initialize&#32;the&#32;edge&#32;index,&#32;since&#32;we&#32;just&#32;added&#32;a&#32;few&#32;edges</emphasis>
00143 <emphasis role="comment">&#32;&#32;&#32;&#32;edge_count&#32;=&#32;0;</emphasis>
00144 <emphasis role="comment">&#32;&#32;&#32;&#32;for(tie(ei,&#32;ei_end)&#32;=&#32;edges(graph);&#32;ei&#32;!=&#32;ei_end;&#32;++ei)</emphasis>
00145 <emphasis role="comment">&#32;&#32;&#32;&#32;put(e_index,&#32;*ei,&#32;edge_count++);</emphasis>
00146 <emphasis role="comment"></emphasis>
00147 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;Test&#32;for&#32;planarity&#32;one&#32;final&#32;time;&#32;compute&#32;the&#32;planar&#32;embedding&#32;as&#32;a&#32;</emphasis>
00148 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;side-effect</emphasis>
00149 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;After&#32;calling&#32;make_maximal_planar,&#32;the&#32;final&#32;graph&#32;&quot;;</emphasis>
00150 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;(boyer_myrvold_planarity_test(boyer_myrvold_params::graph&#32;=&#32;graph,</emphasis>
00151 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boyer_myrvold_params::embedding&#32;=&#32;</emphasis>
00152 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;embedding[0]</emphasis>
00153 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
00154 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
00155 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;is&#32;planar.&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00156 <emphasis role="comment">&#32;&#32;&#32;&#32;else</emphasis>
00157 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;is&#32;not&#32;planar.&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00158 <emphasis role="comment"></emphasis>
00159 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;The&#32;final&#32;graph&#32;has&#32;&quot;&#32;&lt;&lt;&#32;num_edges(graph)&#32;</emphasis>
00160 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;&#32;edges.&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00161 <emphasis role="comment"></emphasis>
00162 <emphasis role="comment">&#32;&#32;&#32;&#32;face_counter&#32;count_visitor;</emphasis>
00163 <emphasis role="comment">&#32;&#32;&#32;&#32;planar_face_traversal(graph,&#32;&amp;embedding[0],&#32;count_visitor);</emphasis>
00164 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;The&#32;final&#32;graph&#32;has&#32;&quot;&#32;&lt;&lt;&#32;count_visitor.count&#32;&lt;&lt;&#32;&quot;&#32;faces.&quot;&#32;</emphasis>
00165 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00166 <emphasis role="comment"></emphasis>
00167 <emphasis role="comment"></emphasis>
00168 <emphasis role="comment"></emphasis>
00169 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
00170 
00171 &#32;&#32;&#32;&#32;boost::print_graph(graph);
00172 
00173 
00174 
00175 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;graph&#32;to&#32;file</emphasis>
00176 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;with&#32;desired&#32;directory&#32;to&#32;view&#32;graph.</emphasis>
00177 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
00178 <emphasis role="comment">&#32;&#32;&#32;&#32;std::string&#32;figsDir&#32;=&#32;MBQC_FIGS_DIR;</emphasis>
00179 <emphasis role="comment">&#32;&#32;&#32;&#32;std::string&#32;graphName&#32;=&#32;&quot;CompleteMultiPartiteGraph&quot;;</emphasis>
00180 <emphasis role="comment">&#32;&#32;&#32;&#32;std::string&#32;format&#32;=&#32;PNG_FORMAT;</emphasis>
00181 <emphasis role="comment">&#32;&#32;&#32;&#32;printGraphToFile(graph,figsDir,graphName,format);</emphasis>
00182 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
00183 
00184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00185 }
</programlisting></section>
</section>
</section>
