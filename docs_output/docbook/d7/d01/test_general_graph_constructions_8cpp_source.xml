<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test_general_graph_constructions_8cpp_source" xml:lang="en-US">
<title>testGeneralGraphConstructions.cpp</title>
<indexterm><primary>tests/testGeneralGraphConstructions.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00001"/>00001 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;Filename&#32;&#32;:&#32;testGeneralGraphConstructions.cpp</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;Author&#32;&#32;&#32;&#32;:&#32;Jonathan&#32;Miller</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;Date&#32;&#32;&#32;&#32;&#32;&#32;:&#32;2023-06-29</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00005"/>00005 <emphasis role="comment">//&#32;Aim&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;Scripts&#32;and&#32;functioms&#32;to&#32;generate&#32;a</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00006"/>00006 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;variety&#32;of&#32;graph</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00007"/>00007 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;run&#32;tests&#32;on&#32;graph</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00009"/>00009 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00010"/>00010 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00011"/>00011 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00012"/>00012 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_packages_8hpp">packages.hpp</link>&quot;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00013"/>00013 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00014"/>00014 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00015"/>00015 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00016"/><link linkend="_test_general_graph_constructions_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">00016</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_test_general_graph_constructions_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link>()&#32;{
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;From&#32;a&#32;file</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="comment">//std::string&#32;brickwork_graph&#32;=&#32;&quot;/Users/jmille15/Projects/MBQC/graphs_file_io/single_brick_work_state.txt&quot;;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="comment">//undirectedGraph&#32;graph&#32;=&#32;createGraphFromFile(brickwork_graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Complete&#32;graph</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="comment">//int&#32;numVertices&#32;=&#32;4;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="comment">//int&#32;numEdges&#32;=&#32;4;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="comment">//undirectedGraph&#32;graph&#32;=&#32;createCompleteGraph(6);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Random&#32;graph</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="comment">//undirectedGraph&#32;graph&#32;=&#32;generateRandomGraph(numVertices,numEdges);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00029"/>00029 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Bipartite&#32;graph</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="comment">//int&#32;n&#32;=&#32;2;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="comment">//int&#32;m&#32;=&#32;3;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="comment">//undirectedGraph&#32;graph&#32;=&#32;generateCompleteBipartiteGraph(n,&#32;m);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00034"/>00034 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Multipartite&#32;graph</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="comment">//std::vector&lt;int&gt;&#32;partitions&#32;=&#32;{1,&#32;1,&#32;1};</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="comment">//undirectedGraph&#32;graph&#32;=&#32;createCompleteMultipartiteGraph(partitions);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00038"/>00038 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00040"/>00040 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;for&#32;Planarity</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00043"/>00043 <emphasis role="comment">&#32;&#32;&#32;&#32;undirectedGraph&#32;graph&#32;=&#32;createCompleteGraph(6);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00044"/>00044 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;(boyer_myrvold_planarity_test(graph))</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00045"/>00045 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;ERROR!&#32;K_6&#32;was&#32;recognized&#32;as&#32;planar!&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00046"/>00046 <emphasis role="comment">&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00047"/>00047 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;K_6&#32;is&#32;not&#32;planar.&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00048"/>00048 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00049"/>00049 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00051"/>00051 <emphasis role="comment">&#32;&#32;&#32;&#32;Add&#32;edges&#32;set&#32;to&#32;a&#32;graph&#32;to&#32;make&#32;it&#32;connected</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00052"/>00052 <emphasis role="comment">&#32;&#32;&#32;&#32;undirectedGraph&#32;graph(11);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00053"/>00053 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(0,1,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00054"/>00054 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(2,3,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00055"/>00055 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(3,4,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00056"/>00056 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(5,6,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00057"/>00057 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(6,7,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00058"/>00058 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(8,9,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00059"/>00059 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(9,10,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00060"/>00060 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(10,8,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00061"/>00061 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00062"/>00062 <emphasis role="comment">&#32;&#32;&#32;&#32;std::vector&lt;&#32;graph_traits&lt;undirectedGraph&gt;::vertices_size_type&#32;&gt;&#32;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00063"/>00063 <emphasis role="comment">&#32;&#32;&#32;&#32;component(num_vertices(graph));</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00064"/>00064 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00065"/>00065 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Before&#32;calling&#32;make_connected,&#32;the&#32;graph&#32;has&#32;&quot;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00066"/>00066 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;connected_components(graph,&#32;&amp;component[0])</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00067"/>00067 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;&#32;connected&#32;components&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00068"/>00068 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00069"/>00069 <emphasis role="comment">&#32;&#32;&#32;&#32;make_connected(graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00070"/>00070 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00071"/>00071 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;After&#32;calling&#32;make_connected,&#32;the&#32;graph&#32;has&#32;&quot;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00072"/>00072 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;connected_components(graph,&#32;&amp;component[0])</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00073"/>00073 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;&#32;connected&#32;components&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00074"/>00074 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00075"/>00075 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00076"/>00076 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00078"/>00078 <emphasis role="comment">&#32;&#32;&#32;&#32;Making&#32;a&#32;graph&#32;maximally&#32;planar</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00079"/>00079 <emphasis role="comment">&#32;&#32;&#32;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00080"/>00080 <emphasis role="comment">&#32;&#32;&#32;&#32;undirectedGraph&#32;graph(10);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00081"/>00081 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(0,1,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00082"/>00082 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(1,2,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00083"/>00083 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(2,3,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00084"/>00084 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(3,4,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00085"/>00085 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(4,5,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00086"/>00086 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(5,6,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00087"/>00087 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(6,7,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00088"/>00088 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(7,8,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00089"/>00089 <emphasis role="comment">&#32;&#32;&#32;&#32;add_edge(8,9,graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00090"/>00090 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00091"/>00091 <emphasis role="comment">&#32;&#32;&#32;&#32;//std::vector&lt;edgeDescriptor&gt;&#32;embedding(num_vertices(graph));</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00092"/>00092 <emphasis role="comment">&#32;&#32;&#32;//&#32;make_maximal_planar(graph,&#32;&amp;embedding[0]);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00093"/>00093 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00094"/>00094 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Since&#32;the&#32;input&#32;graph&#32;is&#32;planar&#32;with&#32;&quot;&#32;&lt;&lt;&#32;num_vertices(graph)&#32;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00095"/>00095 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;&#32;vertices,&quot;&#32;&lt;&lt;&#32;std::endl</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00096"/>00096 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;The&#32;output&#32;graph&#32;should&#32;be&#32;planar&#32;with&#32;&quot;&#32;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00097"/>00097 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;3*num_vertices(graph)&#32;-&#32;6&#32;&lt;&lt;&#32;&quot;&#32;edges&#32;and&#32;&quot;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00098"/>00098 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;2*num_vertices(graph)&#32;-&#32;4&#32;&lt;&lt;&#32;&quot;&#32;faces.&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00099"/>00099 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00100"/>00100 <emphasis role="comment">&#32;&#32;&#32;&#32;//Initialize&#32;the&#32;interior&#32;edge&#32;index</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00101"/>00101 <emphasis role="comment">&#32;&#32;&#32;&#32;property_map&lt;undirectedGraph,&#32;edge_index_t&gt;::type&#32;e_index&#32;=&#32;get(edge_index,&#32;graph);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00102"/>00102 <emphasis role="comment">&#32;&#32;&#32;&#32;graph_traits&lt;undirectedGraph&gt;::edges_size_type&#32;edge_count&#32;=&#32;0;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00103"/>00103 <emphasis role="comment">&#32;&#32;&#32;&#32;graph_traits&lt;undirectedGraph&gt;::edge_iterator&#32;ei,&#32;ei_end;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00104"/>00104 <emphasis role="comment">&#32;&#32;&#32;&#32;for(tie(ei,&#32;ei_end)&#32;=&#32;edges(graph);&#32;ei&#32;!=&#32;ei_end;&#32;++ei)</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00105"/>00105 <emphasis role="comment">&#32;&#32;&#32;&#32;put(e_index,&#32;*ei,&#32;edge_count++);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00106"/>00106 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00107"/>00107 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00108"/>00108 <emphasis role="comment">&#32;&#32;&#32;&#32;//Test&#32;for&#32;planarity;&#32;compute&#32;the&#32;planar&#32;embedding&#32;as&#32;a&#32;side-effect</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00109"/>00109 <emphasis role="comment">&#32;&#32;&#32;&#32;std::vector&lt;edgeDescriptor&gt;&#32;embedding(num_vertices(graph));</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00110"/>00110 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;(boyer_myrvold_planarity_test(boyer_myrvold_params::graph&#32;=&#32;graph,</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00111"/>00111 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boyer_myrvold_params::embedding&#32;=&#32;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00112"/>00112 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;embedding[0]</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00113"/>00113 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00114"/>00114 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00115"/>00115 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Input&#32;graph&#32;is&#32;planar&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00116"/>00116 <emphasis role="comment">&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00117"/>00117 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Input&#32;graph&#32;is&#32;not&#32;planar&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00118"/>00118 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00119"/>00119 <emphasis role="comment">&#32;&#32;&#32;&#32;make_biconnected_planar(graph,&#32;&amp;embedding[0]);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00120"/>00120 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00121"/>00121 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;Re-initialize&#32;the&#32;edge&#32;index,&#32;since&#32;we&#32;just&#32;added&#32;a&#32;few&#32;edges</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00122"/>00122 <emphasis role="comment">&#32;&#32;&#32;&#32;edge_count&#32;=&#32;0;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00123"/>00123 <emphasis role="comment">&#32;&#32;&#32;&#32;for(tie(ei,&#32;ei_end)&#32;=&#32;edges(graph);&#32;ei&#32;!=&#32;ei_end;&#32;++ei)</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00124"/>00124 <emphasis role="comment">&#32;&#32;&#32;&#32;put(e_index,&#32;*ei,&#32;edge_count++);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00125"/>00125 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00126"/>00126 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00127"/>00127 <emphasis role="comment">&#32;&#32;&#32;&#32;//Test&#32;for&#32;planarity&#32;again;&#32;compute&#32;the&#32;planar&#32;embedding&#32;as&#32;a&#32;side-effect</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00128"/>00128 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;(boyer_myrvold_planarity_test(boyer_myrvold_params::graph&#32;=&#32;graph,</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00129"/>00129 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boyer_myrvold_params::embedding&#32;=&#32;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00130"/>00130 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;embedding[0]</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00131"/>00131 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00132"/>00132 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00133"/>00133 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;After&#32;calling&#32;make_biconnected,&#32;the&#32;graph&#32;is&#32;still&#32;planar&quot;&#32;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00134"/>00134 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00135"/>00135 <emphasis role="comment">&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00136"/>00136 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;After&#32;calling&#32;make_biconnected,&#32;the&#32;graph&#32;is&#32;not&#32;planar&quot;&#32;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00137"/>00137 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00138"/>00138 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00139"/>00139 <emphasis role="comment">&#32;&#32;&#32;&#32;make_maximal_planar(graph,&#32;&amp;embedding[0]);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00140"/>00140 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00141"/>00141 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00142"/>00142 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;Re-initialize&#32;the&#32;edge&#32;index,&#32;since&#32;we&#32;just&#32;added&#32;a&#32;few&#32;edges</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00143"/>00143 <emphasis role="comment">&#32;&#32;&#32;&#32;edge_count&#32;=&#32;0;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00144"/>00144 <emphasis role="comment">&#32;&#32;&#32;&#32;for(tie(ei,&#32;ei_end)&#32;=&#32;edges(graph);&#32;ei&#32;!=&#32;ei_end;&#32;++ei)</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00145"/>00145 <emphasis role="comment">&#32;&#32;&#32;&#32;put(e_index,&#32;*ei,&#32;edge_count++);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00146"/>00146 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00147"/>00147 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;Test&#32;for&#32;planarity&#32;one&#32;final&#32;time;&#32;compute&#32;the&#32;planar&#32;embedding&#32;as&#32;a&#32;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00148"/>00148 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;side-effect</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00149"/>00149 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;After&#32;calling&#32;make_maximal_planar,&#32;the&#32;final&#32;graph&#32;&quot;;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00150"/>00150 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;(boyer_myrvold_planarity_test(boyer_myrvold_params::graph&#32;=&#32;graph,</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00151"/>00151 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boyer_myrvold_params::embedding&#32;=&#32;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00152"/>00152 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;embedding[0]</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00153"/>00153 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00154"/>00154 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00155"/>00155 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;is&#32;planar.&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00156"/>00156 <emphasis role="comment">&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00157"/>00157 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;is&#32;not&#32;planar.&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00158"/>00158 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00159"/>00159 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;The&#32;final&#32;graph&#32;has&#32;&quot;&#32;&lt;&lt;&#32;num_edges(graph)&#32;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00160"/>00160 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;&#32;edges.&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00161"/>00161 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00162"/>00162 <emphasis role="comment">&#32;&#32;&#32;&#32;face_counter&#32;count_visitor;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00163"/>00163 <emphasis role="comment">&#32;&#32;&#32;&#32;planar_face_traversal(graph,&#32;&amp;embedding[0],&#32;count_visitor);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00164"/>00164 <emphasis role="comment">&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;The&#32;final&#32;graph&#32;has&#32;&quot;&#32;&lt;&lt;&#32;count_visitor.count&#32;&lt;&lt;&#32;&quot;&#32;faces.&quot;&#32;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00165"/>00165 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00166"/>00166 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00167"/>00167 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00168"/>00168 <emphasis role="comment"></emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00169"/>00169 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00170"/>00170 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;boost::print_graph(graph);
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00172"/>00172 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00173"/>00173 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00174"/>00174 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;graph&#32;to&#32;file</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;with&#32;desired&#32;directory&#32;to&#32;view&#32;graph.</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00178"/>00178 <emphasis role="comment">&#32;&#32;&#32;&#32;std::string&#32;figsDir&#32;=&#32;MBQC_FIGS_DIR;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00179"/>00179 <emphasis role="comment">&#32;&#32;&#32;&#32;std::string&#32;graphName&#32;=&#32;&quot;CompleteMultiPartiteGraph&quot;;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00180"/>00180 <emphasis role="comment">&#32;&#32;&#32;&#32;std::string&#32;format&#32;=&#32;PNG_FORMAT;</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00181"/>00181 <emphasis role="comment">&#32;&#32;&#32;&#32;printGraphToFile(graph,figsDir,graphName,format);</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00182"/>00182 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00183"/>00183 
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_test_general_graph_constructions_8cpp_source_1l00185"/>00185 }
</programlisting></section>
