<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_graph_constructions_8hpp" xml:lang="en-US">
<title>src/graphs/graphConstructions.hpp File Reference</title>
<indexterm><primary>src/graphs/graphConstructions.hpp</primary></indexterm>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; std::vector&lt; int &gt; &gt; <link linkend="_graph_constructions_8hpp_1a6e0974be2fa2e599ab591aa02f1c9eb2">create_lattice</link> (int numRows, int numCols)</para>

<para>Creates a lattice graph from two integers. </para>
</listitem>
            <listitem><para><link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> <link linkend="_graph_constructions_8hpp_1a74f9014929a19ec558c3bc766754f1c3">createLatticeGraph</link> (int numRows, int numCols)</para>

<para>Creates an undirected lattice graph with the specified number of rows and columns. </para>
</listitem>
            <listitem><para><link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> <link linkend="_graph_constructions_8hpp_1ad98926f5eb7fb84b5b97dab2ecfb2cfd">createGraphFromFile</link> (const std::string &amp;filePath)</para>
</listitem>
            <listitem><para><link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> <link linkend="_graph_constructions_8hpp_1a70437089483619704433833029d11f37">createCompleteGraph</link> (int numVertices)</para>

<para>Create a complete graph on N vertices. </para>
</listitem>
            <listitem><para><link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> <link linkend="_graph_constructions_8hpp_1adcbe67f3268e7329117899193f291541">generateRandomGraph</link> (int numVertices, int numEdges)</para>

<para>Generate a random graph with a specified number of vertices and edges. </para>
</listitem>
            <listitem><para><link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> <link linkend="_graph_constructions_8hpp_1a37c654fe4ab57a0b23bfca64a19855d7">generateCompleteBipartiteGraph</link> (int n, int m)</para>

<para>Generate a complete bipartite graph with n vertices on one side and m vertices on the other side. </para>
</listitem>
            <listitem><para><link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> <link linkend="_graph_constructions_8hpp_1af7834390f429aec77b9fd4d1fd706a9c">createCompleteMultipartiteGraph</link> (const std::vector&lt; int &gt; &amp;partitions)</para>

<para>Generate a complete multipartite graph with given partitions. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_graph_constructions_8hpp_1a6e0974be2fa2e599ab591aa02f1c9eb2"/><section>
    <title>create_lattice()</title>
<indexterm><primary>create_lattice</primary><secondary>graphConstructions.hpp</secondary></indexterm>
<indexterm><primary>graphConstructions.hpp</primary><secondary>create_lattice</secondary></indexterm>
<para><computeroutput>std::vector&lt; std::vector&lt; int &gt; &gt; create_lattice (int numRows, int numCols)</computeroutput></para><para>

<para>Creates a lattice graph from two integers. </para>
</para>

<para>This function takes two integers as parameters and returns a littice graph with them as parameters</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>numRows</entry><entry>
<para>The number of rows. </para>
</entry>
                            </row>
                            <row>
<entry>numCols</entry><entry>
<para>The number of columns. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A lattice graph. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_graph_constructions_8hpp_source_1l00024">24</link> of file <link linkend="_graph_constructions_8hpp_source">graphConstructions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00025 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVertices&#32;=&#32;numRows&#32;*&#32;numCols;
00026 &#32;&#32;&#32;&#32;std::vector&lt;std::vector&lt;int&gt;&gt;&#32;lattice(numRows,&#32;std::vector&lt;int&gt;(numCols,&#32;-1));
00027 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;numbers(numVertices);
00028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numVertices;&#32;i++)&#32;{
00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numbers[i]&#32;=&#32;i;
00030 &#32;&#32;&#32;&#32;}
00031 
00032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;number&#32;:&#32;numbers)&#32;{
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;row&#32;=&#32;number&#32;%&#32;numRows;
00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;col&#32;=&#32;number&#32;/&#32;numRows;
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lattice[row][col]&#32;=&#32;number;
00036 &#32;&#32;&#32;&#32;}
00037 
00038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lattice;
00039 }
</programlisting></section>
<anchor xml:id="_graph_constructions_8hpp_1a70437089483619704433833029d11f37"/><section>
    <title>createCompleteGraph()</title>
<indexterm><primary>createCompleteGraph</primary><secondary>graphConstructions.hpp</secondary></indexterm>
<indexterm><primary>graphConstructions.hpp</primary><secondary>createCompleteGraph</secondary></indexterm>
<para><computeroutput><link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> createCompleteGraph (int numVertices)</computeroutput></para><para>

<para>Create a complete graph on N vertices. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>numVertices</entry><entry>
<para>The number of vertices in the complete graph. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The created complete graph. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_graph_constructions_8hpp_source_1l00113">113</link> of file <link linkend="_graph_constructions_8hpp_source">graphConstructions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00114 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;graph(numVertices);
00115 
00116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numVertices;&#32;++i)&#32;{
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;i&#32;+&#32;1;&#32;j&#32;&lt;&#32;numVertices;&#32;++j)&#32;{
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(i,&#32;j,&#32;graph);
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00120 &#32;&#32;&#32;&#32;}
00121 
00122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;graph;
00123 }
</programlisting></section>
<anchor xml:id="_graph_constructions_8hpp_1af7834390f429aec77b9fd4d1fd706a9c"/><section>
    <title>createCompleteMultipartiteGraph()</title>
<indexterm><primary>createCompleteMultipartiteGraph</primary><secondary>graphConstructions.hpp</secondary></indexterm>
<indexterm><primary>graphConstructions.hpp</primary><secondary>createCompleteMultipartiteGraph</secondary></indexterm>
<para><computeroutput><link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> createCompleteMultipartiteGraph (const std::vector&lt; int &gt; &amp; partitions)</computeroutput></para><para>

<para>Generate a complete multipartite graph with given partitions. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>partitions</entry><entry>
<para>The number of vertices in each partition. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The generated complete multipartite graph. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_graph_constructions_8hpp_source_1l00180">180</link> of file <link linkend="_graph_constructions_8hpp_source">graphConstructions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00181 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numPartitions&#32;=&#32;partitions.size();
00182 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVertices&#32;=&#32;0;
00183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;partitionSize&#32;:&#32;partitions)&#32;{
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numVertices&#32;+=&#32;partitionSize;
00185 &#32;&#32;&#32;&#32;}
00186 
00187 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;graph(numVertices);
00188 
00189 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertexOffset&#32;=&#32;0;
00190 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;partitionSize&#32;:&#32;partitions)&#32;{
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;vertexOffset;&#32;i&#32;&lt;&#32;vertexOffset&#32;+&#32;partitionSize;&#32;++i)&#32;{
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;vertexOffset&#32;+&#32;partitionSize;&#32;j&#32;&lt;&#32;numVertices;&#32;++j)&#32;{
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(i,&#32;j,&#32;graph);
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertexOffset&#32;+=&#32;partitionSize;
00197 &#32;&#32;&#32;&#32;}
00198 
00199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;graph;
00200 }
</programlisting></section>
<anchor xml:id="_graph_constructions_8hpp_1ad98926f5eb7fb84b5b97dab2ecfb2cfd"/><section>
    <title>createGraphFromFile()</title>
<indexterm><primary>createGraphFromFile</primary><secondary>graphConstructions.hpp</secondary></indexterm>
<indexterm><primary>graphConstructions.hpp</primary><secondary>createGraphFromFile</secondary></indexterm>
<para><computeroutput><link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> createGraphFromFile (const std::string &amp; filePath)</computeroutput></para>
<para>Creates an undirected graph from a file.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filePath</entry><entry>
<para>The path to the input file. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The created undirected graph. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_graph_constructions_8hpp_source_1l00081">81</link> of file <link linkend="_graph_constructions_8hpp_source">graphConstructions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00082 &#32;&#32;&#32;&#32;std::ifstream&#32;file(filePath);
00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)&#32;{
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;open&#32;the&#32;file.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00085 &#32;&#32;&#32;&#32;}
00086 
00087 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVertices,&#32;numEdges;
00088 &#32;&#32;&#32;&#32;file&#32;&gt;&gt;&#32;numVertices&#32;&gt;&gt;&#32;numEdges;
00089 
00090 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;graph(numVertices);
00091 
00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numEdges;&#32;++i)&#32;{
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;source,&#32;target;
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&gt;&gt;&#32;source&#32;&gt;&gt;&#32;target;
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(source,&#32;target,&#32;graph);
00096 &#32;&#32;&#32;&#32;}
00097 
00098 &#32;&#32;&#32;&#32;file.close();
00099 
00100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;graph;
00101 }
</programlisting></section>
<anchor xml:id="_graph_constructions_8hpp_1a74f9014929a19ec558c3bc766754f1c3"/><section>
    <title>createLatticeGraph()</title>
<indexterm><primary>createLatticeGraph</primary><secondary>graphConstructions.hpp</secondary></indexterm>
<indexterm><primary>graphConstructions.hpp</primary><secondary>createLatticeGraph</secondary></indexterm>
<para><computeroutput><link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> createLatticeGraph (int numRows, int numCols)</computeroutput></para><para>

<para>Creates an undirected lattice graph with the specified number of rows and columns. </para>
</para>

<para>This function creates an undirected lattice graph based on the given number of rows and columns. It uses the create_lattice function to generate the lattice structure and then constructs a corresponding Boost Graph using the undirectedGraph typedef.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>numRows</entry><entry>
<para>The number of rows in the lattice graph. </para>
</entry>
                            </row>
                            <row>
<entry>numCols</entry><entry>
<para>The number of columns in the lattice graph. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The created undirected lattice graph represented by an undirectedGraph. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_graph_constructions_8hpp_source_1l00054">54</link> of file <link linkend="_graph_constructions_8hpp_source">graphConstructions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;
00055 &#32;&#32;&#32;&#32;std::vector&lt;std::vector&lt;int&gt;&gt;&#32;lattice&#32;=&#32;<link linkend="_graph_constructions_8hpp_1a6e0974be2fa2e599ab591aa02f1c9eb2">create_lattice</link>(numRows,&#32;numCols);
00056 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVertices&#32;=&#32;numRows&#32;*&#32;numCols;
00057 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;latticeGraph(numVertices);
00058 &#32;&#32;&#32;&#32;
00059 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;edges&#32;to&#32;the&#32;graph</emphasis>
00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;row&#32;=&#32;0;&#32;row&#32;&lt;&#32;numRows;&#32;row++)&#32;{
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;col&#32;=&#32;0;&#32;col&#32;&lt;&#32;numCols;&#32;col++)&#32;{
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(row&#32;+&#32;1&#32;&lt;&#32;numRows)&#32;{
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(lattice[row][col],&#32;lattice[row&#32;+&#32;1][col],&#32;latticeGraph);
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(col&#32;+&#32;1&#32;&lt;&#32;numCols)&#32;{
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(lattice[row][col],&#32;lattice[row][col&#32;+&#32;1],&#32;latticeGraph);
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00069 &#32;&#32;&#32;&#32;}
00070 
00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;latticeGraph;
00072 }
</programlisting></section>
<anchor xml:id="_graph_constructions_8hpp_1a37c654fe4ab57a0b23bfca64a19855d7"/><section>
    <title>generateCompleteBipartiteGraph()</title>
<indexterm><primary>generateCompleteBipartiteGraph</primary><secondary>graphConstructions.hpp</secondary></indexterm>
<indexterm><primary>graphConstructions.hpp</primary><secondary>generateCompleteBipartiteGraph</secondary></indexterm>
<para><computeroutput><link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> generateCompleteBipartiteGraph (int n, int m)</computeroutput></para><para>

<para>Generate a complete bipartite graph with n vertices on one side and m vertices on the other side. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>n</entry><entry>
<para>The number of vertices on one side. </para>
</entry>
                            </row>
                            <row>
<entry>m</entry><entry>
<para>The number of vertices on the other side. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The generated complete bipartite graph. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_graph_constructions_8hpp_source_1l00161">161</link> of file <link linkend="_graph_constructions_8hpp_source">graphConstructions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00162 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;graph(n&#32;+&#32;m);
00163 
00164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;n;&#32;++i)&#32;{
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;n;&#32;j&#32;&lt;&#32;n&#32;+&#32;m;&#32;++j)&#32;{
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(i,&#32;j,&#32;graph);
00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00168 &#32;&#32;&#32;&#32;}
00169 
00170 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;graph;
00171 }
</programlisting></section>
<anchor xml:id="_graph_constructions_8hpp_1adcbe67f3268e7329117899193f291541"/><section>
    <title>generateRandomGraph()</title>
<indexterm><primary>generateRandomGraph</primary><secondary>graphConstructions.hpp</secondary></indexterm>
<indexterm><primary>graphConstructions.hpp</primary><secondary>generateRandomGraph</secondary></indexterm>
<para><computeroutput><link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link> generateRandomGraph (int numVertices, int numEdges)</computeroutput></para><para>

<para>Generate a random graph with a specified number of vertices and edges. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>numVertices</entry><entry>
<para>The number of vertices in the graph. </para>
</entry>
                            </row>
                            <row>
<entry>numEdges</entry><entry>
<para>The number of edges in the graph. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The generated random graph. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_graph_constructions_8hpp_source_1l00134">134</link> of file <link linkend="_graph_constructions_8hpp_source">graphConstructions.hpp</link>.</para>
<programlisting linenumbering="unnumbered">00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00135 &#32;&#32;&#32;&#32;std::random_device&#32;rd;
00136 &#32;&#32;&#32;&#32;std::mt19937&#32;gen(rd());
00137 &#32;&#32;&#32;&#32;std::uniform_int_distribution&lt;&gt;&#32;dis(0,&#32;numVertices&#32;-&#32;1);
00138 
00139 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;graph(numVertices);
00140 
00141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numEdges;&#32;++i)&#32;{
00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;source&#32;=&#32;dis(gen);
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;target&#32;=&#32;dis(gen);
00144 
00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(source,&#32;target,&#32;graph);
00146 &#32;&#32;&#32;&#32;}
00147 
00148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;graph;
00149 }
</programlisting></section>
</section>
</section>
