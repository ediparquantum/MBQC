<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_graph_constructions_8hpp_source" xml:lang="en-US">
<title>graphConstructions.hpp</title>
<indexterm><primary>src/graphs/graphConstructions.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_graph_constructions_8hpp_source_1l00001"/>00001 
<anchor xml:id="_graph_constructions_8hpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;Title&#32;&#32;:&#32;graphConstructions.hpp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_constructions_8hpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;Author&#32;:&#32;Jonathan&#32;Miller&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_constructions_8hpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;Date&#32;&#32;&#32;:&#32;20230425&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_constructions_8hpp_source_1l00005"/>00005 <emphasis role="comment">//&#32;Aim&#32;&#32;&#32;&#32;:&#32;Construct&#32;graphs&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_constructions_8hpp_source_1l00006"/>00006 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;As&#32;graph&#32;types&#32;grow&#32;in&#32;number,&#32;separate&#32;tests&#32;&#32;//</emphasis>
<anchor xml:id="_graph_constructions_8hpp_source_1l00007"/>00007 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;across&#32;multiple&#32;files&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="_graph_constructions_8hpp_source_1l00009"/>00009 <emphasis role="comment"></emphasis>
<anchor xml:id="_graph_constructions_8hpp_source_1l00010"/>00010 
<anchor xml:id="_graph_constructions_8hpp_source_1l00011"/>00011 
<anchor xml:id="_graph_constructions_8hpp_source_1l00012"/>00012 
<anchor xml:id="_graph_constructions_8hpp_source_1l00013"/>00013 
<anchor xml:id="_graph_constructions_8hpp_source_1l00014"/>00014 
<anchor xml:id="_graph_constructions_8hpp_source_1l00024"/><link linkend="_graph_constructions_8hpp_1a6e0974be2fa2e599ab591aa02f1c9eb2">00024</link> std::vector&lt;std::vector&lt;int&gt;&gt;&#32;<link linkend="_graph_constructions_8hpp_1a6e0974be2fa2e599ab591aa02f1c9eb2">create_lattice</link>(<emphasis role="keywordtype">int</emphasis>&#32;numRows,&#32;<emphasis role="keywordtype">int</emphasis>&#32;numCols)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVertices&#32;=&#32;numRows&#32;*&#32;numCols;
<anchor xml:id="_graph_constructions_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;std::vector&lt;std::vector&lt;int&gt;&gt;&#32;lattice(numRows,&#32;std::vector&lt;int&gt;(numCols,&#32;-1));
<anchor xml:id="_graph_constructions_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;numbers(numVertices);
<anchor xml:id="_graph_constructions_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numVertices;&#32;i++)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numbers[i]&#32;=&#32;i;
<anchor xml:id="_graph_constructions_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00031"/>00031 
<anchor xml:id="_graph_constructions_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;number&#32;:&#32;numbers)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;row&#32;=&#32;number&#32;%&#32;numRows;
<anchor xml:id="_graph_constructions_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;col&#32;=&#32;number&#32;/&#32;numRows;
<anchor xml:id="_graph_constructions_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lattice[row][col]&#32;=&#32;number;
<anchor xml:id="_graph_constructions_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00037"/>00037 
<anchor xml:id="_graph_constructions_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lattice;
<anchor xml:id="_graph_constructions_8hpp_source_1l00039"/>00039 }
<anchor xml:id="_graph_constructions_8hpp_source_1l00040"/>00040 
<anchor xml:id="_graph_constructions_8hpp_source_1l00041"/>00041 
<anchor xml:id="_graph_constructions_8hpp_source_1l00054"/><link linkend="_graph_constructions_8hpp_1a74f9014929a19ec558c3bc766754f1c3">00054</link> <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;<link linkend="_graph_constructions_8hpp_1a74f9014929a19ec558c3bc766754f1c3">createLatticeGraph</link>(<emphasis role="keywordtype">int</emphasis>&#32;numRows,&#32;<emphasis role="keywordtype">int</emphasis>&#32;numCols)&#32;{&#32;
<anchor xml:id="_graph_constructions_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;std::vector&lt;std::vector&lt;int&gt;&gt;&#32;lattice&#32;=&#32;<link linkend="_graph_constructions_8hpp_1a6e0974be2fa2e599ab591aa02f1c9eb2">create_lattice</link>(numRows,&#32;numCols);
<anchor xml:id="_graph_constructions_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVertices&#32;=&#32;numRows&#32;*&#32;numCols;
<anchor xml:id="_graph_constructions_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;latticeGraph(numVertices);
<anchor xml:id="_graph_constructions_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;
<anchor xml:id="_graph_constructions_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;edges&#32;to&#32;the&#32;graph</emphasis>
<anchor xml:id="_graph_constructions_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;row&#32;=&#32;0;&#32;row&#32;&lt;&#32;numRows;&#32;row++)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;col&#32;=&#32;0;&#32;col&#32;&lt;&#32;numCols;&#32;col++)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(row&#32;+&#32;1&#32;&lt;&#32;numRows)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(lattice[row][col],&#32;lattice[row&#32;+&#32;1][col],&#32;latticeGraph);
<anchor xml:id="_graph_constructions_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(col&#32;+&#32;1&#32;&lt;&#32;numCols)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(lattice[row][col],&#32;lattice[row][col&#32;+&#32;1],&#32;latticeGraph);
<anchor xml:id="_graph_constructions_8hpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00070"/>00070 
<anchor xml:id="_graph_constructions_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;latticeGraph;
<anchor xml:id="_graph_constructions_8hpp_source_1l00072"/>00072 }
<anchor xml:id="_graph_constructions_8hpp_source_1l00073"/>00073 
<anchor xml:id="_graph_constructions_8hpp_source_1l00074"/>00074 
<anchor xml:id="_graph_constructions_8hpp_source_1l00081"/><link linkend="_graph_constructions_8hpp_1ad98926f5eb7fb84b5b97dab2ecfb2cfd">00081</link> <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;<link linkend="_graph_constructions_8hpp_1ad98926f5eb7fb84b5b97dab2ecfb2cfd">createGraphFromFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;filePath)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;std::ifstream&#32;file(filePath);
<anchor xml:id="_graph_constructions_8hpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;open&#32;the&#32;file.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_graph_constructions_8hpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00086"/>00086 
<anchor xml:id="_graph_constructions_8hpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVertices,&#32;numEdges;
<anchor xml:id="_graph_constructions_8hpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;file&#32;&gt;&gt;&#32;numVertices&#32;&gt;&gt;&#32;numEdges;
<anchor xml:id="_graph_constructions_8hpp_source_1l00089"/>00089 
<anchor xml:id="_graph_constructions_8hpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;graph(numVertices);
<anchor xml:id="_graph_constructions_8hpp_source_1l00091"/>00091 
<anchor xml:id="_graph_constructions_8hpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numEdges;&#32;++i)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;source,&#32;target;
<anchor xml:id="_graph_constructions_8hpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&gt;&gt;&#32;source&#32;&gt;&gt;&#32;target;
<anchor xml:id="_graph_constructions_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(source,&#32;target,&#32;graph);
<anchor xml:id="_graph_constructions_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00097"/>00097 
<anchor xml:id="_graph_constructions_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;file.close();
<anchor xml:id="_graph_constructions_8hpp_source_1l00099"/>00099 
<anchor xml:id="_graph_constructions_8hpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;graph;
<anchor xml:id="_graph_constructions_8hpp_source_1l00101"/>00101 }
<anchor xml:id="_graph_constructions_8hpp_source_1l00102"/>00102 
<anchor xml:id="_graph_constructions_8hpp_source_1l00103"/>00103 
<anchor xml:id="_graph_constructions_8hpp_source_1l00104"/>00104 
<anchor xml:id="_graph_constructions_8hpp_source_1l00105"/>00105 
<anchor xml:id="_graph_constructions_8hpp_source_1l00106"/>00106 
<anchor xml:id="_graph_constructions_8hpp_source_1l00113"/><link linkend="_graph_constructions_8hpp_1a70437089483619704433833029d11f37">00113</link> <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;<link linkend="_graph_constructions_8hpp_1a70437089483619704433833029d11f37">createCompleteGraph</link>(<emphasis role="keywordtype">int</emphasis>&#32;numVertices)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;graph(numVertices);
<anchor xml:id="_graph_constructions_8hpp_source_1l00115"/>00115 
<anchor xml:id="_graph_constructions_8hpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numVertices;&#32;++i)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;i&#32;+&#32;1;&#32;j&#32;&lt;&#32;numVertices;&#32;++j)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(i,&#32;j,&#32;graph);
<anchor xml:id="_graph_constructions_8hpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00121"/>00121 
<anchor xml:id="_graph_constructions_8hpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;graph;
<anchor xml:id="_graph_constructions_8hpp_source_1l00123"/>00123 }
<anchor xml:id="_graph_constructions_8hpp_source_1l00124"/>00124 
<anchor xml:id="_graph_constructions_8hpp_source_1l00125"/>00125 
<anchor xml:id="_graph_constructions_8hpp_source_1l00126"/>00126 
<anchor xml:id="_graph_constructions_8hpp_source_1l00134"/><link linkend="_graph_constructions_8hpp_1adcbe67f3268e7329117899193f291541">00134</link> <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;<link linkend="_graph_constructions_8hpp_1adcbe67f3268e7329117899193f291541">generateRandomGraph</link>(<emphasis role="keywordtype">int</emphasis>&#32;numVertices,&#32;<emphasis role="keywordtype">int</emphasis>&#32;numEdges)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;std::random_device&#32;rd;
<anchor xml:id="_graph_constructions_8hpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;std::mt19937&#32;gen(rd());
<anchor xml:id="_graph_constructions_8hpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;std::uniform_int_distribution&lt;&gt;&#32;dis(0,&#32;numVertices&#32;-&#32;1);
<anchor xml:id="_graph_constructions_8hpp_source_1l00138"/>00138 
<anchor xml:id="_graph_constructions_8hpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;graph(numVertices);
<anchor xml:id="_graph_constructions_8hpp_source_1l00140"/>00140 
<anchor xml:id="_graph_constructions_8hpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numEdges;&#32;++i)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;source&#32;=&#32;dis(gen);
<anchor xml:id="_graph_constructions_8hpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;target&#32;=&#32;dis(gen);
<anchor xml:id="_graph_constructions_8hpp_source_1l00144"/>00144 
<anchor xml:id="_graph_constructions_8hpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(source,&#32;target,&#32;graph);
<anchor xml:id="_graph_constructions_8hpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00147"/>00147 
<anchor xml:id="_graph_constructions_8hpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;graph;
<anchor xml:id="_graph_constructions_8hpp_source_1l00149"/>00149 }
<anchor xml:id="_graph_constructions_8hpp_source_1l00150"/>00150 
<anchor xml:id="_graph_constructions_8hpp_source_1l00151"/>00151 
<anchor xml:id="_graph_constructions_8hpp_source_1l00152"/>00152 
<anchor xml:id="_graph_constructions_8hpp_source_1l00153"/>00153 
<anchor xml:id="_graph_constructions_8hpp_source_1l00161"/><link linkend="_graph_constructions_8hpp_1a37c654fe4ab57a0b23bfca64a19855d7">00161</link> <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;<link linkend="_graph_constructions_8hpp_1a37c654fe4ab57a0b23bfca64a19855d7">generateCompleteBipartiteGraph</link>(<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">int</emphasis>&#32;m)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;graph(n&#32;+&#32;m);
<anchor xml:id="_graph_constructions_8hpp_source_1l00163"/>00163 
<anchor xml:id="_graph_constructions_8hpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;n;&#32;++i)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;n;&#32;j&#32;&lt;&#32;n&#32;+&#32;m;&#32;++j)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(i,&#32;j,&#32;graph);
<anchor xml:id="_graph_constructions_8hpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00169"/>00169 
<anchor xml:id="_graph_constructions_8hpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;graph;
<anchor xml:id="_graph_constructions_8hpp_source_1l00171"/>00171 }
<anchor xml:id="_graph_constructions_8hpp_source_1l00172"/>00172 
<anchor xml:id="_graph_constructions_8hpp_source_1l00173"/>00173 
<anchor xml:id="_graph_constructions_8hpp_source_1l00180"/><link linkend="_graph_constructions_8hpp_1af7834390f429aec77b9fd4d1fd706a9c">00180</link> <link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;<link linkend="_graph_constructions_8hpp_1af7834390f429aec77b9fd4d1fd706a9c">createCompleteMultipartiteGraph</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;int&gt;&amp;&#32;partitions)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numPartitions&#32;=&#32;partitions.size();
<anchor xml:id="_graph_constructions_8hpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVertices&#32;=&#32;0;
<anchor xml:id="_graph_constructions_8hpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;partitionSize&#32;:&#32;partitions)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numVertices&#32;+=&#32;partitionSize;
<anchor xml:id="_graph_constructions_8hpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00186"/>00186 
<anchor xml:id="_graph_constructions_8hpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;<link linkend="_packages_8hpp_1adb6c610c60479e8b904f5832786b4125">undirectedGraph</link>&#32;graph(numVertices);
<anchor xml:id="_graph_constructions_8hpp_source_1l00188"/>00188 
<anchor xml:id="_graph_constructions_8hpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertexOffset&#32;=&#32;0;
<anchor xml:id="_graph_constructions_8hpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;partitionSize&#32;:&#32;partitions)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;vertexOffset;&#32;i&#32;&lt;&#32;vertexOffset&#32;+&#32;partitionSize;&#32;++i)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;vertexOffset&#32;+&#32;partitionSize;&#32;j&#32;&lt;&#32;numVertices;&#32;++j)&#32;{
<anchor xml:id="_graph_constructions_8hpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::add_edge(i,&#32;j,&#32;graph);
<anchor xml:id="_graph_constructions_8hpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertexOffset&#32;+=&#32;partitionSize;
<anchor xml:id="_graph_constructions_8hpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graph_constructions_8hpp_source_1l00198"/>00198 
<anchor xml:id="_graph_constructions_8hpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;graph;
<anchor xml:id="_graph_constructions_8hpp_source_1l00200"/>00200 }
<anchor xml:id="_graph_constructions_8hpp_source_1l00201"/>00201 
</programlisting></section>
